
OLED_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a62c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d8c  0800a6f0  0800a6f0  0000b6f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b47c  0800b47c  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b47c  0800b47c  0000c47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b484  0800b484  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b484  0800b484  0000c484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b488  0800b488  0000c488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b48c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b4  200001d4  0800b660  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000888  0800b660  0000d888  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0fc  00000000  00000000  0000d1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000221f  00000000  00000000  0001b2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  0001d518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000093f  00000000  00000000  0001e118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014fe8  00000000  00000000  0001ea57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010077  00000000  00000000  00033a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826c7  00000000  00000000  00043ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c617d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dc0  00000000  00000000  000c61c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000c9f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a6d4 	.word	0x0800a6d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	0800a6d4 	.word	0x0800a6d4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fcbf 	bl	8001dc0 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fc03 	bl	8001c58 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fcb1 	bl	8001dc0 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fca7 	bl	8001dc0 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fc2d 	bl	8001ce0 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fc23 	bl	8001ce0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_ldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d115      	bne.n	80004d8 <__aeabi_ldivmod+0x30>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d113      	bne.n	80004d8 <__aeabi_ldivmod+0x30>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	db06      	blt.n	80004c2 <__aeabi_ldivmod+0x1a>
 80004b4:	dc01      	bgt.n	80004ba <__aeabi_ldivmod+0x12>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d006      	beq.n	80004c8 <__aeabi_ldivmod+0x20>
 80004ba:	2000      	movs	r0, #0
 80004bc:	43c0      	mvns	r0, r0
 80004be:	0841      	lsrs	r1, r0, #1
 80004c0:	e002      	b.n	80004c8 <__aeabi_ldivmod+0x20>
 80004c2:	2180      	movs	r1, #128	@ 0x80
 80004c4:	0609      	lsls	r1, r1, #24
 80004c6:	2000      	movs	r0, #0
 80004c8:	b407      	push	{r0, r1, r2}
 80004ca:	4802      	ldr	r0, [pc, #8]	@ (80004d4 <__aeabi_ldivmod+0x2c>)
 80004cc:	a101      	add	r1, pc, #4	@ (adr r1, 80004d4 <__aeabi_ldivmod+0x2c>)
 80004ce:	1840      	adds	r0, r0, r1
 80004d0:	9002      	str	r0, [sp, #8]
 80004d2:	bd03      	pop	{r0, r1, pc}
 80004d4:	ffffff55 	.word	0xffffff55
 80004d8:	b403      	push	{r0, r1}
 80004da:	4668      	mov	r0, sp
 80004dc:	b501      	push	{r0, lr}
 80004de:	9802      	ldr	r0, [sp, #8]
 80004e0:	f000 f920 	bl	8000724 <__gnu_ldivmod_helper>
 80004e4:	9b01      	ldr	r3, [sp, #4]
 80004e6:	469e      	mov	lr, r3
 80004e8:	b002      	add	sp, #8
 80004ea:	bc0c      	pop	{r2, r3}
 80004ec:	4770      	bx	lr
 80004ee:	46c0      	nop			@ (mov r8, r8)

080004f0 <__aeabi_uldivmod>:
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d111      	bne.n	8000518 <__aeabi_uldivmod+0x28>
 80004f4:	2a00      	cmp	r2, #0
 80004f6:	d10f      	bne.n	8000518 <__aeabi_uldivmod+0x28>
 80004f8:	2900      	cmp	r1, #0
 80004fa:	d100      	bne.n	80004fe <__aeabi_uldivmod+0xe>
 80004fc:	2800      	cmp	r0, #0
 80004fe:	d002      	beq.n	8000506 <__aeabi_uldivmod+0x16>
 8000500:	2100      	movs	r1, #0
 8000502:	43c9      	mvns	r1, r1
 8000504:	0008      	movs	r0, r1
 8000506:	b407      	push	{r0, r1, r2}
 8000508:	4802      	ldr	r0, [pc, #8]	@ (8000514 <__aeabi_uldivmod+0x24>)
 800050a:	a102      	add	r1, pc, #8	@ (adr r1, 8000514 <__aeabi_uldivmod+0x24>)
 800050c:	1840      	adds	r0, r0, r1
 800050e:	9002      	str	r0, [sp, #8]
 8000510:	bd03      	pop	{r0, r1, pc}
 8000512:	46c0      	nop			@ (mov r8, r8)
 8000514:	ffffff15 	.word	0xffffff15
 8000518:	b403      	push	{r0, r1}
 800051a:	4668      	mov	r0, sp
 800051c:	b501      	push	{r0, lr}
 800051e:	9802      	ldr	r0, [sp, #8]
 8000520:	f000 f834 	bl	800058c <__udivmoddi4>
 8000524:	9b01      	ldr	r3, [sp, #4]
 8000526:	469e      	mov	lr, r3
 8000528:	b002      	add	sp, #8
 800052a:	bc0c      	pop	{r2, r3}
 800052c:	4770      	bx	lr
 800052e:	46c0      	nop			@ (mov r8, r8)

08000530 <__aeabi_lmul>:
 8000530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000532:	46ce      	mov	lr, r9
 8000534:	4699      	mov	r9, r3
 8000536:	0c03      	lsrs	r3, r0, #16
 8000538:	469c      	mov	ip, r3
 800053a:	0413      	lsls	r3, r2, #16
 800053c:	4647      	mov	r7, r8
 800053e:	0c1b      	lsrs	r3, r3, #16
 8000540:	001d      	movs	r5, r3
 8000542:	000e      	movs	r6, r1
 8000544:	4661      	mov	r1, ip
 8000546:	0404      	lsls	r4, r0, #16
 8000548:	0c24      	lsrs	r4, r4, #16
 800054a:	b580      	push	{r7, lr}
 800054c:	0007      	movs	r7, r0
 800054e:	0c10      	lsrs	r0, r2, #16
 8000550:	434b      	muls	r3, r1
 8000552:	4365      	muls	r5, r4
 8000554:	4341      	muls	r1, r0
 8000556:	4360      	muls	r0, r4
 8000558:	0c2c      	lsrs	r4, r5, #16
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	1824      	adds	r4, r4, r0
 800055e:	468c      	mov	ip, r1
 8000560:	42a3      	cmp	r3, r4
 8000562:	d903      	bls.n	800056c <__aeabi_lmul+0x3c>
 8000564:	2380      	movs	r3, #128	@ 0x80
 8000566:	025b      	lsls	r3, r3, #9
 8000568:	4698      	mov	r8, r3
 800056a:	44c4      	add	ip, r8
 800056c:	4649      	mov	r1, r9
 800056e:	4379      	muls	r1, r7
 8000570:	4356      	muls	r6, r2
 8000572:	0c23      	lsrs	r3, r4, #16
 8000574:	042d      	lsls	r5, r5, #16
 8000576:	0c2d      	lsrs	r5, r5, #16
 8000578:	1989      	adds	r1, r1, r6
 800057a:	4463      	add	r3, ip
 800057c:	0424      	lsls	r4, r4, #16
 800057e:	1960      	adds	r0, r4, r5
 8000580:	18c9      	adds	r1, r1, r3
 8000582:	bcc0      	pop	{r6, r7}
 8000584:	46b9      	mov	r9, r7
 8000586:	46b0      	mov	r8, r6
 8000588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800058a:	46c0      	nop			@ (mov r8, r8)

0800058c <__udivmoddi4>:
 800058c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058e:	4657      	mov	r7, sl
 8000590:	464e      	mov	r6, r9
 8000592:	4645      	mov	r5, r8
 8000594:	46de      	mov	lr, fp
 8000596:	b5e0      	push	{r5, r6, r7, lr}
 8000598:	0004      	movs	r4, r0
 800059a:	000d      	movs	r5, r1
 800059c:	4692      	mov	sl, r2
 800059e:	4699      	mov	r9, r3
 80005a0:	b083      	sub	sp, #12
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d830      	bhi.n	8000608 <__udivmoddi4+0x7c>
 80005a6:	d02d      	beq.n	8000604 <__udivmoddi4+0x78>
 80005a8:	4649      	mov	r1, r9
 80005aa:	4650      	mov	r0, sl
 80005ac:	f002 fc7c 	bl	8002ea8 <__clzdi2>
 80005b0:	0029      	movs	r1, r5
 80005b2:	0006      	movs	r6, r0
 80005b4:	0020      	movs	r0, r4
 80005b6:	f002 fc77 	bl	8002ea8 <__clzdi2>
 80005ba:	1a33      	subs	r3, r6, r0
 80005bc:	4698      	mov	r8, r3
 80005be:	3b20      	subs	r3, #32
 80005c0:	d434      	bmi.n	800062c <__udivmoddi4+0xa0>
 80005c2:	469b      	mov	fp, r3
 80005c4:	4653      	mov	r3, sl
 80005c6:	465a      	mov	r2, fp
 80005c8:	4093      	lsls	r3, r2
 80005ca:	4642      	mov	r2, r8
 80005cc:	001f      	movs	r7, r3
 80005ce:	4653      	mov	r3, sl
 80005d0:	4093      	lsls	r3, r2
 80005d2:	001e      	movs	r6, r3
 80005d4:	42af      	cmp	r7, r5
 80005d6:	d83b      	bhi.n	8000650 <__udivmoddi4+0xc4>
 80005d8:	42af      	cmp	r7, r5
 80005da:	d100      	bne.n	80005de <__udivmoddi4+0x52>
 80005dc:	e079      	b.n	80006d2 <__udivmoddi4+0x146>
 80005de:	465b      	mov	r3, fp
 80005e0:	1ba4      	subs	r4, r4, r6
 80005e2:	41bd      	sbcs	r5, r7
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	da00      	bge.n	80005ea <__udivmoddi4+0x5e>
 80005e8:	e076      	b.n	80006d8 <__udivmoddi4+0x14c>
 80005ea:	2200      	movs	r2, #0
 80005ec:	2300      	movs	r3, #0
 80005ee:	9200      	str	r2, [sp, #0]
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2301      	movs	r3, #1
 80005f4:	465a      	mov	r2, fp
 80005f6:	4093      	lsls	r3, r2
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2301      	movs	r3, #1
 80005fc:	4642      	mov	r2, r8
 80005fe:	4093      	lsls	r3, r2
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	e029      	b.n	8000658 <__udivmoddi4+0xcc>
 8000604:	4282      	cmp	r2, r0
 8000606:	d9cf      	bls.n	80005a8 <__udivmoddi4+0x1c>
 8000608:	2200      	movs	r2, #0
 800060a:	2300      	movs	r3, #0
 800060c:	9200      	str	r2, [sp, #0]
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <__udivmoddi4+0x8e>
 8000616:	601c      	str	r4, [r3, #0]
 8000618:	605d      	str	r5, [r3, #4]
 800061a:	9800      	ldr	r0, [sp, #0]
 800061c:	9901      	ldr	r1, [sp, #4]
 800061e:	b003      	add	sp, #12
 8000620:	bcf0      	pop	{r4, r5, r6, r7}
 8000622:	46bb      	mov	fp, r7
 8000624:	46b2      	mov	sl, r6
 8000626:	46a9      	mov	r9, r5
 8000628:	46a0      	mov	r8, r4
 800062a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800062c:	4642      	mov	r2, r8
 800062e:	469b      	mov	fp, r3
 8000630:	2320      	movs	r3, #32
 8000632:	1a9b      	subs	r3, r3, r2
 8000634:	4652      	mov	r2, sl
 8000636:	40da      	lsrs	r2, r3
 8000638:	4641      	mov	r1, r8
 800063a:	0013      	movs	r3, r2
 800063c:	464a      	mov	r2, r9
 800063e:	408a      	lsls	r2, r1
 8000640:	0017      	movs	r7, r2
 8000642:	4642      	mov	r2, r8
 8000644:	431f      	orrs	r7, r3
 8000646:	4653      	mov	r3, sl
 8000648:	4093      	lsls	r3, r2
 800064a:	001e      	movs	r6, r3
 800064c:	42af      	cmp	r7, r5
 800064e:	d9c3      	bls.n	80005d8 <__udivmoddi4+0x4c>
 8000650:	2200      	movs	r2, #0
 8000652:	2300      	movs	r3, #0
 8000654:	9200      	str	r2, [sp, #0]
 8000656:	9301      	str	r3, [sp, #4]
 8000658:	4643      	mov	r3, r8
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0d8      	beq.n	8000610 <__udivmoddi4+0x84>
 800065e:	07fb      	lsls	r3, r7, #31
 8000660:	0872      	lsrs	r2, r6, #1
 8000662:	431a      	orrs	r2, r3
 8000664:	4646      	mov	r6, r8
 8000666:	087b      	lsrs	r3, r7, #1
 8000668:	e00e      	b.n	8000688 <__udivmoddi4+0xfc>
 800066a:	42ab      	cmp	r3, r5
 800066c:	d101      	bne.n	8000672 <__udivmoddi4+0xe6>
 800066e:	42a2      	cmp	r2, r4
 8000670:	d80c      	bhi.n	800068c <__udivmoddi4+0x100>
 8000672:	1aa4      	subs	r4, r4, r2
 8000674:	419d      	sbcs	r5, r3
 8000676:	2001      	movs	r0, #1
 8000678:	1924      	adds	r4, r4, r4
 800067a:	416d      	adcs	r5, r5
 800067c:	2100      	movs	r1, #0
 800067e:	3e01      	subs	r6, #1
 8000680:	1824      	adds	r4, r4, r0
 8000682:	414d      	adcs	r5, r1
 8000684:	2e00      	cmp	r6, #0
 8000686:	d006      	beq.n	8000696 <__udivmoddi4+0x10a>
 8000688:	42ab      	cmp	r3, r5
 800068a:	d9ee      	bls.n	800066a <__udivmoddi4+0xde>
 800068c:	3e01      	subs	r6, #1
 800068e:	1924      	adds	r4, r4, r4
 8000690:	416d      	adcs	r5, r5
 8000692:	2e00      	cmp	r6, #0
 8000694:	d1f8      	bne.n	8000688 <__udivmoddi4+0xfc>
 8000696:	9800      	ldr	r0, [sp, #0]
 8000698:	9901      	ldr	r1, [sp, #4]
 800069a:	465b      	mov	r3, fp
 800069c:	1900      	adds	r0, r0, r4
 800069e:	4169      	adcs	r1, r5
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db24      	blt.n	80006ee <__udivmoddi4+0x162>
 80006a4:	002b      	movs	r3, r5
 80006a6:	465a      	mov	r2, fp
 80006a8:	4644      	mov	r4, r8
 80006aa:	40d3      	lsrs	r3, r2
 80006ac:	002a      	movs	r2, r5
 80006ae:	40e2      	lsrs	r2, r4
 80006b0:	001c      	movs	r4, r3
 80006b2:	465b      	mov	r3, fp
 80006b4:	0015      	movs	r5, r2
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	db2a      	blt.n	8000710 <__udivmoddi4+0x184>
 80006ba:	0026      	movs	r6, r4
 80006bc:	409e      	lsls	r6, r3
 80006be:	0033      	movs	r3, r6
 80006c0:	0026      	movs	r6, r4
 80006c2:	4647      	mov	r7, r8
 80006c4:	40be      	lsls	r6, r7
 80006c6:	0032      	movs	r2, r6
 80006c8:	1a80      	subs	r0, r0, r2
 80006ca:	4199      	sbcs	r1, r3
 80006cc:	9000      	str	r0, [sp, #0]
 80006ce:	9101      	str	r1, [sp, #4]
 80006d0:	e79e      	b.n	8000610 <__udivmoddi4+0x84>
 80006d2:	42a3      	cmp	r3, r4
 80006d4:	d8bc      	bhi.n	8000650 <__udivmoddi4+0xc4>
 80006d6:	e782      	b.n	80005de <__udivmoddi4+0x52>
 80006d8:	4642      	mov	r2, r8
 80006da:	2320      	movs	r3, #32
 80006dc:	2100      	movs	r1, #0
 80006de:	1a9b      	subs	r3, r3, r2
 80006e0:	2200      	movs	r2, #0
 80006e2:	9100      	str	r1, [sp, #0]
 80006e4:	9201      	str	r2, [sp, #4]
 80006e6:	2201      	movs	r2, #1
 80006e8:	40da      	lsrs	r2, r3
 80006ea:	9201      	str	r2, [sp, #4]
 80006ec:	e785      	b.n	80005fa <__udivmoddi4+0x6e>
 80006ee:	4642      	mov	r2, r8
 80006f0:	2320      	movs	r3, #32
 80006f2:	1a9b      	subs	r3, r3, r2
 80006f4:	002a      	movs	r2, r5
 80006f6:	4646      	mov	r6, r8
 80006f8:	409a      	lsls	r2, r3
 80006fa:	0023      	movs	r3, r4
 80006fc:	40f3      	lsrs	r3, r6
 80006fe:	4644      	mov	r4, r8
 8000700:	4313      	orrs	r3, r2
 8000702:	002a      	movs	r2, r5
 8000704:	40e2      	lsrs	r2, r4
 8000706:	001c      	movs	r4, r3
 8000708:	465b      	mov	r3, fp
 800070a:	0015      	movs	r5, r2
 800070c:	2b00      	cmp	r3, #0
 800070e:	dad4      	bge.n	80006ba <__udivmoddi4+0x12e>
 8000710:	4642      	mov	r2, r8
 8000712:	002f      	movs	r7, r5
 8000714:	2320      	movs	r3, #32
 8000716:	0026      	movs	r6, r4
 8000718:	4097      	lsls	r7, r2
 800071a:	1a9b      	subs	r3, r3, r2
 800071c:	40de      	lsrs	r6, r3
 800071e:	003b      	movs	r3, r7
 8000720:	4333      	orrs	r3, r6
 8000722:	e7cd      	b.n	80006c0 <__udivmoddi4+0x134>

08000724 <__gnu_ldivmod_helper>:
 8000724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000726:	46ce      	mov	lr, r9
 8000728:	4647      	mov	r7, r8
 800072a:	b580      	push	{r7, lr}
 800072c:	4691      	mov	r9, r2
 800072e:	4698      	mov	r8, r3
 8000730:	0004      	movs	r4, r0
 8000732:	000d      	movs	r5, r1
 8000734:	f002 fbc4 	bl	8002ec0 <__divdi3>
 8000738:	0007      	movs	r7, r0
 800073a:	000e      	movs	r6, r1
 800073c:	0002      	movs	r2, r0
 800073e:	000b      	movs	r3, r1
 8000740:	4648      	mov	r0, r9
 8000742:	4641      	mov	r1, r8
 8000744:	f7ff fef4 	bl	8000530 <__aeabi_lmul>
 8000748:	1a24      	subs	r4, r4, r0
 800074a:	418d      	sbcs	r5, r1
 800074c:	9b08      	ldr	r3, [sp, #32]
 800074e:	0038      	movs	r0, r7
 8000750:	0031      	movs	r1, r6
 8000752:	601c      	str	r4, [r3, #0]
 8000754:	605d      	str	r5, [r3, #4]
 8000756:	bcc0      	pop	{r6, r7}
 8000758:	46b9      	mov	r9, r7
 800075a:	46b0      	mov	r8, r6
 800075c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800075e:	46c0      	nop			@ (mov r8, r8)

08000760 <__aeabi_fadd>:
 8000760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000762:	024b      	lsls	r3, r1, #9
 8000764:	0a5a      	lsrs	r2, r3, #9
 8000766:	4694      	mov	ip, r2
 8000768:	004a      	lsls	r2, r1, #1
 800076a:	0fc9      	lsrs	r1, r1, #31
 800076c:	46ce      	mov	lr, r9
 800076e:	4647      	mov	r7, r8
 8000770:	4689      	mov	r9, r1
 8000772:	0045      	lsls	r5, r0, #1
 8000774:	0246      	lsls	r6, r0, #9
 8000776:	0e2d      	lsrs	r5, r5, #24
 8000778:	0e12      	lsrs	r2, r2, #24
 800077a:	b580      	push	{r7, lr}
 800077c:	0999      	lsrs	r1, r3, #6
 800077e:	0a77      	lsrs	r7, r6, #9
 8000780:	0fc4      	lsrs	r4, r0, #31
 8000782:	09b6      	lsrs	r6, r6, #6
 8000784:	1aab      	subs	r3, r5, r2
 8000786:	454c      	cmp	r4, r9
 8000788:	d020      	beq.n	80007cc <__aeabi_fadd+0x6c>
 800078a:	2b00      	cmp	r3, #0
 800078c:	dd0c      	ble.n	80007a8 <__aeabi_fadd+0x48>
 800078e:	2a00      	cmp	r2, #0
 8000790:	d134      	bne.n	80007fc <__aeabi_fadd+0x9c>
 8000792:	2900      	cmp	r1, #0
 8000794:	d02a      	beq.n	80007ec <__aeabi_fadd+0x8c>
 8000796:	1e5a      	subs	r2, r3, #1
 8000798:	2b01      	cmp	r3, #1
 800079a:	d100      	bne.n	800079e <__aeabi_fadd+0x3e>
 800079c:	e08f      	b.n	80008be <__aeabi_fadd+0x15e>
 800079e:	2bff      	cmp	r3, #255	@ 0xff
 80007a0:	d100      	bne.n	80007a4 <__aeabi_fadd+0x44>
 80007a2:	e0cd      	b.n	8000940 <__aeabi_fadd+0x1e0>
 80007a4:	0013      	movs	r3, r2
 80007a6:	e02f      	b.n	8000808 <__aeabi_fadd+0xa8>
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d060      	beq.n	800086e <__aeabi_fadd+0x10e>
 80007ac:	1b53      	subs	r3, r2, r5
 80007ae:	2d00      	cmp	r5, #0
 80007b0:	d000      	beq.n	80007b4 <__aeabi_fadd+0x54>
 80007b2:	e0ee      	b.n	8000992 <__aeabi_fadd+0x232>
 80007b4:	2e00      	cmp	r6, #0
 80007b6:	d100      	bne.n	80007ba <__aeabi_fadd+0x5a>
 80007b8:	e13e      	b.n	8000a38 <__aeabi_fadd+0x2d8>
 80007ba:	1e5c      	subs	r4, r3, #1
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d100      	bne.n	80007c2 <__aeabi_fadd+0x62>
 80007c0:	e16b      	b.n	8000a9a <__aeabi_fadd+0x33a>
 80007c2:	2bff      	cmp	r3, #255	@ 0xff
 80007c4:	d100      	bne.n	80007c8 <__aeabi_fadd+0x68>
 80007c6:	e0b9      	b.n	800093c <__aeabi_fadd+0x1dc>
 80007c8:	0023      	movs	r3, r4
 80007ca:	e0e7      	b.n	800099c <__aeabi_fadd+0x23c>
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	dc00      	bgt.n	80007d2 <__aeabi_fadd+0x72>
 80007d0:	e0a4      	b.n	800091c <__aeabi_fadd+0x1bc>
 80007d2:	2a00      	cmp	r2, #0
 80007d4:	d069      	beq.n	80008aa <__aeabi_fadd+0x14a>
 80007d6:	2dff      	cmp	r5, #255	@ 0xff
 80007d8:	d100      	bne.n	80007dc <__aeabi_fadd+0x7c>
 80007da:	e0b1      	b.n	8000940 <__aeabi_fadd+0x1e0>
 80007dc:	2280      	movs	r2, #128	@ 0x80
 80007de:	04d2      	lsls	r2, r2, #19
 80007e0:	4311      	orrs	r1, r2
 80007e2:	2b1b      	cmp	r3, #27
 80007e4:	dc00      	bgt.n	80007e8 <__aeabi_fadd+0x88>
 80007e6:	e0e9      	b.n	80009bc <__aeabi_fadd+0x25c>
 80007e8:	002b      	movs	r3, r5
 80007ea:	3605      	adds	r6, #5
 80007ec:	08f7      	lsrs	r7, r6, #3
 80007ee:	2bff      	cmp	r3, #255	@ 0xff
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x94>
 80007f2:	e0a5      	b.n	8000940 <__aeabi_fadd+0x1e0>
 80007f4:	027a      	lsls	r2, r7, #9
 80007f6:	0a52      	lsrs	r2, r2, #9
 80007f8:	b2d8      	uxtb	r0, r3
 80007fa:	e030      	b.n	800085e <__aeabi_fadd+0xfe>
 80007fc:	2dff      	cmp	r5, #255	@ 0xff
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0xa2>
 8000800:	e09e      	b.n	8000940 <__aeabi_fadd+0x1e0>
 8000802:	2280      	movs	r2, #128	@ 0x80
 8000804:	04d2      	lsls	r2, r2, #19
 8000806:	4311      	orrs	r1, r2
 8000808:	2001      	movs	r0, #1
 800080a:	2b1b      	cmp	r3, #27
 800080c:	dc08      	bgt.n	8000820 <__aeabi_fadd+0xc0>
 800080e:	0008      	movs	r0, r1
 8000810:	2220      	movs	r2, #32
 8000812:	40d8      	lsrs	r0, r3
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	4099      	lsls	r1, r3
 8000818:	000b      	movs	r3, r1
 800081a:	1e5a      	subs	r2, r3, #1
 800081c:	4193      	sbcs	r3, r2
 800081e:	4318      	orrs	r0, r3
 8000820:	1a36      	subs	r6, r6, r0
 8000822:	0173      	lsls	r3, r6, #5
 8000824:	d400      	bmi.n	8000828 <__aeabi_fadd+0xc8>
 8000826:	e071      	b.n	800090c <__aeabi_fadd+0x1ac>
 8000828:	01b6      	lsls	r6, r6, #6
 800082a:	09b7      	lsrs	r7, r6, #6
 800082c:	0038      	movs	r0, r7
 800082e:	f002 fb1d 	bl	8002e6c <__clzsi2>
 8000832:	003b      	movs	r3, r7
 8000834:	3805      	subs	r0, #5
 8000836:	4083      	lsls	r3, r0
 8000838:	4285      	cmp	r5, r0
 800083a:	dd4d      	ble.n	80008d8 <__aeabi_fadd+0x178>
 800083c:	4eb4      	ldr	r6, [pc, #720]	@ (8000b10 <__aeabi_fadd+0x3b0>)
 800083e:	1a2d      	subs	r5, r5, r0
 8000840:	401e      	ands	r6, r3
 8000842:	075a      	lsls	r2, r3, #29
 8000844:	d068      	beq.n	8000918 <__aeabi_fadd+0x1b8>
 8000846:	220f      	movs	r2, #15
 8000848:	4013      	ands	r3, r2
 800084a:	2b04      	cmp	r3, #4
 800084c:	d064      	beq.n	8000918 <__aeabi_fadd+0x1b8>
 800084e:	3604      	adds	r6, #4
 8000850:	0173      	lsls	r3, r6, #5
 8000852:	d561      	bpl.n	8000918 <__aeabi_fadd+0x1b8>
 8000854:	1c68      	adds	r0, r5, #1
 8000856:	2dfe      	cmp	r5, #254	@ 0xfe
 8000858:	d154      	bne.n	8000904 <__aeabi_fadd+0x1a4>
 800085a:	20ff      	movs	r0, #255	@ 0xff
 800085c:	2200      	movs	r2, #0
 800085e:	05c0      	lsls	r0, r0, #23
 8000860:	4310      	orrs	r0, r2
 8000862:	07e4      	lsls	r4, r4, #31
 8000864:	4320      	orrs	r0, r4
 8000866:	bcc0      	pop	{r6, r7}
 8000868:	46b9      	mov	r9, r7
 800086a:	46b0      	mov	r8, r6
 800086c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800086e:	22fe      	movs	r2, #254	@ 0xfe
 8000870:	4690      	mov	r8, r2
 8000872:	1c68      	adds	r0, r5, #1
 8000874:	0002      	movs	r2, r0
 8000876:	4640      	mov	r0, r8
 8000878:	4210      	tst	r0, r2
 800087a:	d16b      	bne.n	8000954 <__aeabi_fadd+0x1f4>
 800087c:	2d00      	cmp	r5, #0
 800087e:	d000      	beq.n	8000882 <__aeabi_fadd+0x122>
 8000880:	e0dd      	b.n	8000a3e <__aeabi_fadd+0x2de>
 8000882:	2e00      	cmp	r6, #0
 8000884:	d100      	bne.n	8000888 <__aeabi_fadd+0x128>
 8000886:	e102      	b.n	8000a8e <__aeabi_fadd+0x32e>
 8000888:	2900      	cmp	r1, #0
 800088a:	d0b3      	beq.n	80007f4 <__aeabi_fadd+0x94>
 800088c:	2280      	movs	r2, #128	@ 0x80
 800088e:	1a77      	subs	r7, r6, r1
 8000890:	04d2      	lsls	r2, r2, #19
 8000892:	4217      	tst	r7, r2
 8000894:	d100      	bne.n	8000898 <__aeabi_fadd+0x138>
 8000896:	e136      	b.n	8000b06 <__aeabi_fadd+0x3a6>
 8000898:	464c      	mov	r4, r9
 800089a:	1b8e      	subs	r6, r1, r6
 800089c:	d061      	beq.n	8000962 <__aeabi_fadd+0x202>
 800089e:	2001      	movs	r0, #1
 80008a0:	4216      	tst	r6, r2
 80008a2:	d130      	bne.n	8000906 <__aeabi_fadd+0x1a6>
 80008a4:	2300      	movs	r3, #0
 80008a6:	08f7      	lsrs	r7, r6, #3
 80008a8:	e7a4      	b.n	80007f4 <__aeabi_fadd+0x94>
 80008aa:	2900      	cmp	r1, #0
 80008ac:	d09e      	beq.n	80007ec <__aeabi_fadd+0x8c>
 80008ae:	1e5a      	subs	r2, r3, #1
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d100      	bne.n	80008b6 <__aeabi_fadd+0x156>
 80008b4:	e0ca      	b.n	8000a4c <__aeabi_fadd+0x2ec>
 80008b6:	2bff      	cmp	r3, #255	@ 0xff
 80008b8:	d042      	beq.n	8000940 <__aeabi_fadd+0x1e0>
 80008ba:	0013      	movs	r3, r2
 80008bc:	e791      	b.n	80007e2 <__aeabi_fadd+0x82>
 80008be:	1a71      	subs	r1, r6, r1
 80008c0:	014b      	lsls	r3, r1, #5
 80008c2:	d400      	bmi.n	80008c6 <__aeabi_fadd+0x166>
 80008c4:	e0d1      	b.n	8000a6a <__aeabi_fadd+0x30a>
 80008c6:	018f      	lsls	r7, r1, #6
 80008c8:	09bf      	lsrs	r7, r7, #6
 80008ca:	0038      	movs	r0, r7
 80008cc:	f002 face 	bl	8002e6c <__clzsi2>
 80008d0:	003b      	movs	r3, r7
 80008d2:	3805      	subs	r0, #5
 80008d4:	4083      	lsls	r3, r0
 80008d6:	2501      	movs	r5, #1
 80008d8:	2220      	movs	r2, #32
 80008da:	1b40      	subs	r0, r0, r5
 80008dc:	3001      	adds	r0, #1
 80008de:	1a12      	subs	r2, r2, r0
 80008e0:	001e      	movs	r6, r3
 80008e2:	4093      	lsls	r3, r2
 80008e4:	40c6      	lsrs	r6, r0
 80008e6:	1e5a      	subs	r2, r3, #1
 80008e8:	4193      	sbcs	r3, r2
 80008ea:	431e      	orrs	r6, r3
 80008ec:	d039      	beq.n	8000962 <__aeabi_fadd+0x202>
 80008ee:	0773      	lsls	r3, r6, #29
 80008f0:	d100      	bne.n	80008f4 <__aeabi_fadd+0x194>
 80008f2:	e11b      	b.n	8000b2c <__aeabi_fadd+0x3cc>
 80008f4:	230f      	movs	r3, #15
 80008f6:	2500      	movs	r5, #0
 80008f8:	4033      	ands	r3, r6
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	d1a7      	bne.n	800084e <__aeabi_fadd+0xee>
 80008fe:	2001      	movs	r0, #1
 8000900:	0172      	lsls	r2, r6, #5
 8000902:	d57c      	bpl.n	80009fe <__aeabi_fadd+0x29e>
 8000904:	b2c0      	uxtb	r0, r0
 8000906:	01b2      	lsls	r2, r6, #6
 8000908:	0a52      	lsrs	r2, r2, #9
 800090a:	e7a8      	b.n	800085e <__aeabi_fadd+0xfe>
 800090c:	0773      	lsls	r3, r6, #29
 800090e:	d003      	beq.n	8000918 <__aeabi_fadd+0x1b8>
 8000910:	230f      	movs	r3, #15
 8000912:	4033      	ands	r3, r6
 8000914:	2b04      	cmp	r3, #4
 8000916:	d19a      	bne.n	800084e <__aeabi_fadd+0xee>
 8000918:	002b      	movs	r3, r5
 800091a:	e767      	b.n	80007ec <__aeabi_fadd+0x8c>
 800091c:	2b00      	cmp	r3, #0
 800091e:	d023      	beq.n	8000968 <__aeabi_fadd+0x208>
 8000920:	1b53      	subs	r3, r2, r5
 8000922:	2d00      	cmp	r5, #0
 8000924:	d17b      	bne.n	8000a1e <__aeabi_fadd+0x2be>
 8000926:	2e00      	cmp	r6, #0
 8000928:	d100      	bne.n	800092c <__aeabi_fadd+0x1cc>
 800092a:	e086      	b.n	8000a3a <__aeabi_fadd+0x2da>
 800092c:	1e5d      	subs	r5, r3, #1
 800092e:	2b01      	cmp	r3, #1
 8000930:	d100      	bne.n	8000934 <__aeabi_fadd+0x1d4>
 8000932:	e08b      	b.n	8000a4c <__aeabi_fadd+0x2ec>
 8000934:	2bff      	cmp	r3, #255	@ 0xff
 8000936:	d002      	beq.n	800093e <__aeabi_fadd+0x1de>
 8000938:	002b      	movs	r3, r5
 800093a:	e075      	b.n	8000a28 <__aeabi_fadd+0x2c8>
 800093c:	464c      	mov	r4, r9
 800093e:	4667      	mov	r7, ip
 8000940:	2f00      	cmp	r7, #0
 8000942:	d100      	bne.n	8000946 <__aeabi_fadd+0x1e6>
 8000944:	e789      	b.n	800085a <__aeabi_fadd+0xfa>
 8000946:	2280      	movs	r2, #128	@ 0x80
 8000948:	03d2      	lsls	r2, r2, #15
 800094a:	433a      	orrs	r2, r7
 800094c:	0252      	lsls	r2, r2, #9
 800094e:	20ff      	movs	r0, #255	@ 0xff
 8000950:	0a52      	lsrs	r2, r2, #9
 8000952:	e784      	b.n	800085e <__aeabi_fadd+0xfe>
 8000954:	1a77      	subs	r7, r6, r1
 8000956:	017b      	lsls	r3, r7, #5
 8000958:	d46b      	bmi.n	8000a32 <__aeabi_fadd+0x2d2>
 800095a:	2f00      	cmp	r7, #0
 800095c:	d000      	beq.n	8000960 <__aeabi_fadd+0x200>
 800095e:	e765      	b.n	800082c <__aeabi_fadd+0xcc>
 8000960:	2400      	movs	r4, #0
 8000962:	2000      	movs	r0, #0
 8000964:	2200      	movs	r2, #0
 8000966:	e77a      	b.n	800085e <__aeabi_fadd+0xfe>
 8000968:	22fe      	movs	r2, #254	@ 0xfe
 800096a:	1c6b      	adds	r3, r5, #1
 800096c:	421a      	tst	r2, r3
 800096e:	d149      	bne.n	8000a04 <__aeabi_fadd+0x2a4>
 8000970:	2d00      	cmp	r5, #0
 8000972:	d000      	beq.n	8000976 <__aeabi_fadd+0x216>
 8000974:	e09f      	b.n	8000ab6 <__aeabi_fadd+0x356>
 8000976:	2e00      	cmp	r6, #0
 8000978:	d100      	bne.n	800097c <__aeabi_fadd+0x21c>
 800097a:	e0ba      	b.n	8000af2 <__aeabi_fadd+0x392>
 800097c:	2900      	cmp	r1, #0
 800097e:	d100      	bne.n	8000982 <__aeabi_fadd+0x222>
 8000980:	e0cf      	b.n	8000b22 <__aeabi_fadd+0x3c2>
 8000982:	1872      	adds	r2, r6, r1
 8000984:	0153      	lsls	r3, r2, #5
 8000986:	d400      	bmi.n	800098a <__aeabi_fadd+0x22a>
 8000988:	e0cd      	b.n	8000b26 <__aeabi_fadd+0x3c6>
 800098a:	0192      	lsls	r2, r2, #6
 800098c:	2001      	movs	r0, #1
 800098e:	0a52      	lsrs	r2, r2, #9
 8000990:	e765      	b.n	800085e <__aeabi_fadd+0xfe>
 8000992:	2aff      	cmp	r2, #255	@ 0xff
 8000994:	d0d2      	beq.n	800093c <__aeabi_fadd+0x1dc>
 8000996:	2080      	movs	r0, #128	@ 0x80
 8000998:	04c0      	lsls	r0, r0, #19
 800099a:	4306      	orrs	r6, r0
 800099c:	2001      	movs	r0, #1
 800099e:	2b1b      	cmp	r3, #27
 80009a0:	dc08      	bgt.n	80009b4 <__aeabi_fadd+0x254>
 80009a2:	0030      	movs	r0, r6
 80009a4:	2420      	movs	r4, #32
 80009a6:	40d8      	lsrs	r0, r3
 80009a8:	1ae3      	subs	r3, r4, r3
 80009aa:	409e      	lsls	r6, r3
 80009ac:	0033      	movs	r3, r6
 80009ae:	1e5c      	subs	r4, r3, #1
 80009b0:	41a3      	sbcs	r3, r4
 80009b2:	4318      	orrs	r0, r3
 80009b4:	464c      	mov	r4, r9
 80009b6:	0015      	movs	r5, r2
 80009b8:	1a0e      	subs	r6, r1, r0
 80009ba:	e732      	b.n	8000822 <__aeabi_fadd+0xc2>
 80009bc:	0008      	movs	r0, r1
 80009be:	2220      	movs	r2, #32
 80009c0:	40d8      	lsrs	r0, r3
 80009c2:	1ad3      	subs	r3, r2, r3
 80009c4:	4099      	lsls	r1, r3
 80009c6:	000b      	movs	r3, r1
 80009c8:	1e5a      	subs	r2, r3, #1
 80009ca:	4193      	sbcs	r3, r2
 80009cc:	4303      	orrs	r3, r0
 80009ce:	18f6      	adds	r6, r6, r3
 80009d0:	0173      	lsls	r3, r6, #5
 80009d2:	d59b      	bpl.n	800090c <__aeabi_fadd+0x1ac>
 80009d4:	3501      	adds	r5, #1
 80009d6:	2dff      	cmp	r5, #255	@ 0xff
 80009d8:	d100      	bne.n	80009dc <__aeabi_fadd+0x27c>
 80009da:	e73e      	b.n	800085a <__aeabi_fadd+0xfa>
 80009dc:	2301      	movs	r3, #1
 80009de:	494d      	ldr	r1, [pc, #308]	@ (8000b14 <__aeabi_fadd+0x3b4>)
 80009e0:	0872      	lsrs	r2, r6, #1
 80009e2:	4033      	ands	r3, r6
 80009e4:	400a      	ands	r2, r1
 80009e6:	431a      	orrs	r2, r3
 80009e8:	0016      	movs	r6, r2
 80009ea:	0753      	lsls	r3, r2, #29
 80009ec:	d004      	beq.n	80009f8 <__aeabi_fadd+0x298>
 80009ee:	230f      	movs	r3, #15
 80009f0:	4013      	ands	r3, r2
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	d000      	beq.n	80009f8 <__aeabi_fadd+0x298>
 80009f6:	e72a      	b.n	800084e <__aeabi_fadd+0xee>
 80009f8:	0173      	lsls	r3, r6, #5
 80009fa:	d500      	bpl.n	80009fe <__aeabi_fadd+0x29e>
 80009fc:	e72a      	b.n	8000854 <__aeabi_fadd+0xf4>
 80009fe:	002b      	movs	r3, r5
 8000a00:	08f7      	lsrs	r7, r6, #3
 8000a02:	e6f7      	b.n	80007f4 <__aeabi_fadd+0x94>
 8000a04:	2bff      	cmp	r3, #255	@ 0xff
 8000a06:	d100      	bne.n	8000a0a <__aeabi_fadd+0x2aa>
 8000a08:	e727      	b.n	800085a <__aeabi_fadd+0xfa>
 8000a0a:	1871      	adds	r1, r6, r1
 8000a0c:	0849      	lsrs	r1, r1, #1
 8000a0e:	074a      	lsls	r2, r1, #29
 8000a10:	d02f      	beq.n	8000a72 <__aeabi_fadd+0x312>
 8000a12:	220f      	movs	r2, #15
 8000a14:	400a      	ands	r2, r1
 8000a16:	2a04      	cmp	r2, #4
 8000a18:	d02b      	beq.n	8000a72 <__aeabi_fadd+0x312>
 8000a1a:	1d0e      	adds	r6, r1, #4
 8000a1c:	e6e6      	b.n	80007ec <__aeabi_fadd+0x8c>
 8000a1e:	2aff      	cmp	r2, #255	@ 0xff
 8000a20:	d08d      	beq.n	800093e <__aeabi_fadd+0x1de>
 8000a22:	2080      	movs	r0, #128	@ 0x80
 8000a24:	04c0      	lsls	r0, r0, #19
 8000a26:	4306      	orrs	r6, r0
 8000a28:	2b1b      	cmp	r3, #27
 8000a2a:	dd24      	ble.n	8000a76 <__aeabi_fadd+0x316>
 8000a2c:	0013      	movs	r3, r2
 8000a2e:	1d4e      	adds	r6, r1, #5
 8000a30:	e6dc      	b.n	80007ec <__aeabi_fadd+0x8c>
 8000a32:	464c      	mov	r4, r9
 8000a34:	1b8f      	subs	r7, r1, r6
 8000a36:	e6f9      	b.n	800082c <__aeabi_fadd+0xcc>
 8000a38:	464c      	mov	r4, r9
 8000a3a:	000e      	movs	r6, r1
 8000a3c:	e6d6      	b.n	80007ec <__aeabi_fadd+0x8c>
 8000a3e:	2e00      	cmp	r6, #0
 8000a40:	d149      	bne.n	8000ad6 <__aeabi_fadd+0x376>
 8000a42:	2900      	cmp	r1, #0
 8000a44:	d068      	beq.n	8000b18 <__aeabi_fadd+0x3b8>
 8000a46:	4667      	mov	r7, ip
 8000a48:	464c      	mov	r4, r9
 8000a4a:	e77c      	b.n	8000946 <__aeabi_fadd+0x1e6>
 8000a4c:	1870      	adds	r0, r6, r1
 8000a4e:	0143      	lsls	r3, r0, #5
 8000a50:	d574      	bpl.n	8000b3c <__aeabi_fadd+0x3dc>
 8000a52:	4930      	ldr	r1, [pc, #192]	@ (8000b14 <__aeabi_fadd+0x3b4>)
 8000a54:	0840      	lsrs	r0, r0, #1
 8000a56:	4001      	ands	r1, r0
 8000a58:	0743      	lsls	r3, r0, #29
 8000a5a:	d009      	beq.n	8000a70 <__aeabi_fadd+0x310>
 8000a5c:	230f      	movs	r3, #15
 8000a5e:	4003      	ands	r3, r0
 8000a60:	2b04      	cmp	r3, #4
 8000a62:	d005      	beq.n	8000a70 <__aeabi_fadd+0x310>
 8000a64:	2302      	movs	r3, #2
 8000a66:	1d0e      	adds	r6, r1, #4
 8000a68:	e6c0      	b.n	80007ec <__aeabi_fadd+0x8c>
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	08cf      	lsrs	r7, r1, #3
 8000a6e:	e6c1      	b.n	80007f4 <__aeabi_fadd+0x94>
 8000a70:	2302      	movs	r3, #2
 8000a72:	08cf      	lsrs	r7, r1, #3
 8000a74:	e6be      	b.n	80007f4 <__aeabi_fadd+0x94>
 8000a76:	2520      	movs	r5, #32
 8000a78:	0030      	movs	r0, r6
 8000a7a:	40d8      	lsrs	r0, r3
 8000a7c:	1aeb      	subs	r3, r5, r3
 8000a7e:	409e      	lsls	r6, r3
 8000a80:	0033      	movs	r3, r6
 8000a82:	1e5d      	subs	r5, r3, #1
 8000a84:	41ab      	sbcs	r3, r5
 8000a86:	4303      	orrs	r3, r0
 8000a88:	0015      	movs	r5, r2
 8000a8a:	185e      	adds	r6, r3, r1
 8000a8c:	e7a0      	b.n	80009d0 <__aeabi_fadd+0x270>
 8000a8e:	2900      	cmp	r1, #0
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fadd+0x334>
 8000a92:	e765      	b.n	8000960 <__aeabi_fadd+0x200>
 8000a94:	464c      	mov	r4, r9
 8000a96:	4667      	mov	r7, ip
 8000a98:	e6ac      	b.n	80007f4 <__aeabi_fadd+0x94>
 8000a9a:	1b8f      	subs	r7, r1, r6
 8000a9c:	017b      	lsls	r3, r7, #5
 8000a9e:	d52e      	bpl.n	8000afe <__aeabi_fadd+0x39e>
 8000aa0:	01bf      	lsls	r7, r7, #6
 8000aa2:	09bf      	lsrs	r7, r7, #6
 8000aa4:	0038      	movs	r0, r7
 8000aa6:	f002 f9e1 	bl	8002e6c <__clzsi2>
 8000aaa:	003b      	movs	r3, r7
 8000aac:	3805      	subs	r0, #5
 8000aae:	4083      	lsls	r3, r0
 8000ab0:	464c      	mov	r4, r9
 8000ab2:	3501      	adds	r5, #1
 8000ab4:	e710      	b.n	80008d8 <__aeabi_fadd+0x178>
 8000ab6:	2e00      	cmp	r6, #0
 8000ab8:	d100      	bne.n	8000abc <__aeabi_fadd+0x35c>
 8000aba:	e740      	b.n	800093e <__aeabi_fadd+0x1de>
 8000abc:	2900      	cmp	r1, #0
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_fadd+0x362>
 8000ac0:	e741      	b.n	8000946 <__aeabi_fadd+0x1e6>
 8000ac2:	2380      	movs	r3, #128	@ 0x80
 8000ac4:	03db      	lsls	r3, r3, #15
 8000ac6:	429f      	cmp	r7, r3
 8000ac8:	d200      	bcs.n	8000acc <__aeabi_fadd+0x36c>
 8000aca:	e73c      	b.n	8000946 <__aeabi_fadd+0x1e6>
 8000acc:	459c      	cmp	ip, r3
 8000ace:	d300      	bcc.n	8000ad2 <__aeabi_fadd+0x372>
 8000ad0:	e739      	b.n	8000946 <__aeabi_fadd+0x1e6>
 8000ad2:	4667      	mov	r7, ip
 8000ad4:	e737      	b.n	8000946 <__aeabi_fadd+0x1e6>
 8000ad6:	2900      	cmp	r1, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_fadd+0x37c>
 8000ada:	e734      	b.n	8000946 <__aeabi_fadd+0x1e6>
 8000adc:	2380      	movs	r3, #128	@ 0x80
 8000ade:	03db      	lsls	r3, r3, #15
 8000ae0:	429f      	cmp	r7, r3
 8000ae2:	d200      	bcs.n	8000ae6 <__aeabi_fadd+0x386>
 8000ae4:	e72f      	b.n	8000946 <__aeabi_fadd+0x1e6>
 8000ae6:	459c      	cmp	ip, r3
 8000ae8:	d300      	bcc.n	8000aec <__aeabi_fadd+0x38c>
 8000aea:	e72c      	b.n	8000946 <__aeabi_fadd+0x1e6>
 8000aec:	464c      	mov	r4, r9
 8000aee:	4667      	mov	r7, ip
 8000af0:	e729      	b.n	8000946 <__aeabi_fadd+0x1e6>
 8000af2:	2900      	cmp	r1, #0
 8000af4:	d100      	bne.n	8000af8 <__aeabi_fadd+0x398>
 8000af6:	e734      	b.n	8000962 <__aeabi_fadd+0x202>
 8000af8:	2300      	movs	r3, #0
 8000afa:	08cf      	lsrs	r7, r1, #3
 8000afc:	e67a      	b.n	80007f4 <__aeabi_fadd+0x94>
 8000afe:	464c      	mov	r4, r9
 8000b00:	2301      	movs	r3, #1
 8000b02:	08ff      	lsrs	r7, r7, #3
 8000b04:	e676      	b.n	80007f4 <__aeabi_fadd+0x94>
 8000b06:	2f00      	cmp	r7, #0
 8000b08:	d100      	bne.n	8000b0c <__aeabi_fadd+0x3ac>
 8000b0a:	e729      	b.n	8000960 <__aeabi_fadd+0x200>
 8000b0c:	08ff      	lsrs	r7, r7, #3
 8000b0e:	e671      	b.n	80007f4 <__aeabi_fadd+0x94>
 8000b10:	fbffffff 	.word	0xfbffffff
 8000b14:	7dffffff 	.word	0x7dffffff
 8000b18:	2280      	movs	r2, #128	@ 0x80
 8000b1a:	2400      	movs	r4, #0
 8000b1c:	20ff      	movs	r0, #255	@ 0xff
 8000b1e:	03d2      	lsls	r2, r2, #15
 8000b20:	e69d      	b.n	800085e <__aeabi_fadd+0xfe>
 8000b22:	2300      	movs	r3, #0
 8000b24:	e666      	b.n	80007f4 <__aeabi_fadd+0x94>
 8000b26:	2300      	movs	r3, #0
 8000b28:	08d7      	lsrs	r7, r2, #3
 8000b2a:	e663      	b.n	80007f4 <__aeabi_fadd+0x94>
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	0172      	lsls	r2, r6, #5
 8000b30:	d500      	bpl.n	8000b34 <__aeabi_fadd+0x3d4>
 8000b32:	e6e7      	b.n	8000904 <__aeabi_fadd+0x1a4>
 8000b34:	0031      	movs	r1, r6
 8000b36:	2300      	movs	r3, #0
 8000b38:	08cf      	lsrs	r7, r1, #3
 8000b3a:	e65b      	b.n	80007f4 <__aeabi_fadd+0x94>
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	08c7      	lsrs	r7, r0, #3
 8000b40:	e658      	b.n	80007f4 <__aeabi_fadd+0x94>
 8000b42:	46c0      	nop			@ (mov r8, r8)

08000b44 <__aeabi_fdiv>:
 8000b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b46:	4646      	mov	r6, r8
 8000b48:	464f      	mov	r7, r9
 8000b4a:	46d6      	mov	lr, sl
 8000b4c:	0245      	lsls	r5, r0, #9
 8000b4e:	b5c0      	push	{r6, r7, lr}
 8000b50:	0fc3      	lsrs	r3, r0, #31
 8000b52:	0047      	lsls	r7, r0, #1
 8000b54:	4698      	mov	r8, r3
 8000b56:	1c0e      	adds	r6, r1, #0
 8000b58:	0a6d      	lsrs	r5, r5, #9
 8000b5a:	0e3f      	lsrs	r7, r7, #24
 8000b5c:	d05b      	beq.n	8000c16 <__aeabi_fdiv+0xd2>
 8000b5e:	2fff      	cmp	r7, #255	@ 0xff
 8000b60:	d021      	beq.n	8000ba6 <__aeabi_fdiv+0x62>
 8000b62:	2380      	movs	r3, #128	@ 0x80
 8000b64:	00ed      	lsls	r5, r5, #3
 8000b66:	04db      	lsls	r3, r3, #19
 8000b68:	431d      	orrs	r5, r3
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	4699      	mov	r9, r3
 8000b6e:	469a      	mov	sl, r3
 8000b70:	3f7f      	subs	r7, #127	@ 0x7f
 8000b72:	0274      	lsls	r4, r6, #9
 8000b74:	0073      	lsls	r3, r6, #1
 8000b76:	0a64      	lsrs	r4, r4, #9
 8000b78:	0e1b      	lsrs	r3, r3, #24
 8000b7a:	0ff6      	lsrs	r6, r6, #31
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d020      	beq.n	8000bc2 <__aeabi_fdiv+0x7e>
 8000b80:	2bff      	cmp	r3, #255	@ 0xff
 8000b82:	d043      	beq.n	8000c0c <__aeabi_fdiv+0xc8>
 8000b84:	2280      	movs	r2, #128	@ 0x80
 8000b86:	2000      	movs	r0, #0
 8000b88:	00e4      	lsls	r4, r4, #3
 8000b8a:	04d2      	lsls	r2, r2, #19
 8000b8c:	4314      	orrs	r4, r2
 8000b8e:	3b7f      	subs	r3, #127	@ 0x7f
 8000b90:	4642      	mov	r2, r8
 8000b92:	1aff      	subs	r7, r7, r3
 8000b94:	464b      	mov	r3, r9
 8000b96:	4072      	eors	r2, r6
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d900      	bls.n	8000b9e <__aeabi_fdiv+0x5a>
 8000b9c:	e09d      	b.n	8000cda <__aeabi_fdiv+0x196>
 8000b9e:	4971      	ldr	r1, [pc, #452]	@ (8000d64 <__aeabi_fdiv+0x220>)
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	58cb      	ldr	r3, [r1, r3]
 8000ba4:	469f      	mov	pc, r3
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	d15a      	bne.n	8000c60 <__aeabi_fdiv+0x11c>
 8000baa:	2308      	movs	r3, #8
 8000bac:	4699      	mov	r9, r3
 8000bae:	3b06      	subs	r3, #6
 8000bb0:	0274      	lsls	r4, r6, #9
 8000bb2:	469a      	mov	sl, r3
 8000bb4:	0073      	lsls	r3, r6, #1
 8000bb6:	27ff      	movs	r7, #255	@ 0xff
 8000bb8:	0a64      	lsrs	r4, r4, #9
 8000bba:	0e1b      	lsrs	r3, r3, #24
 8000bbc:	0ff6      	lsrs	r6, r6, #31
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1de      	bne.n	8000b80 <__aeabi_fdiv+0x3c>
 8000bc2:	2c00      	cmp	r4, #0
 8000bc4:	d13b      	bne.n	8000c3e <__aeabi_fdiv+0xfa>
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	4642      	mov	r2, r8
 8000bca:	4649      	mov	r1, r9
 8000bcc:	4072      	eors	r2, r6
 8000bce:	4319      	orrs	r1, r3
 8000bd0:	290e      	cmp	r1, #14
 8000bd2:	d818      	bhi.n	8000c06 <__aeabi_fdiv+0xc2>
 8000bd4:	4864      	ldr	r0, [pc, #400]	@ (8000d68 <__aeabi_fdiv+0x224>)
 8000bd6:	0089      	lsls	r1, r1, #2
 8000bd8:	5841      	ldr	r1, [r0, r1]
 8000bda:	468f      	mov	pc, r1
 8000bdc:	4653      	mov	r3, sl
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d100      	bne.n	8000be4 <__aeabi_fdiv+0xa0>
 8000be2:	e0b8      	b.n	8000d56 <__aeabi_fdiv+0x212>
 8000be4:	2b03      	cmp	r3, #3
 8000be6:	d06e      	beq.n	8000cc6 <__aeabi_fdiv+0x182>
 8000be8:	4642      	mov	r2, r8
 8000bea:	002c      	movs	r4, r5
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d140      	bne.n	8000c72 <__aeabi_fdiv+0x12e>
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	2400      	movs	r4, #0
 8000bf4:	05c0      	lsls	r0, r0, #23
 8000bf6:	4320      	orrs	r0, r4
 8000bf8:	07d2      	lsls	r2, r2, #31
 8000bfa:	4310      	orrs	r0, r2
 8000bfc:	bce0      	pop	{r5, r6, r7}
 8000bfe:	46ba      	mov	sl, r7
 8000c00:	46b1      	mov	r9, r6
 8000c02:	46a8      	mov	r8, r5
 8000c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c06:	20ff      	movs	r0, #255	@ 0xff
 8000c08:	2400      	movs	r4, #0
 8000c0a:	e7f3      	b.n	8000bf4 <__aeabi_fdiv+0xb0>
 8000c0c:	2c00      	cmp	r4, #0
 8000c0e:	d120      	bne.n	8000c52 <__aeabi_fdiv+0x10e>
 8000c10:	2302      	movs	r3, #2
 8000c12:	3fff      	subs	r7, #255	@ 0xff
 8000c14:	e7d8      	b.n	8000bc8 <__aeabi_fdiv+0x84>
 8000c16:	2d00      	cmp	r5, #0
 8000c18:	d105      	bne.n	8000c26 <__aeabi_fdiv+0xe2>
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	4699      	mov	r9, r3
 8000c1e:	3b03      	subs	r3, #3
 8000c20:	2700      	movs	r7, #0
 8000c22:	469a      	mov	sl, r3
 8000c24:	e7a5      	b.n	8000b72 <__aeabi_fdiv+0x2e>
 8000c26:	0028      	movs	r0, r5
 8000c28:	f002 f920 	bl	8002e6c <__clzsi2>
 8000c2c:	2776      	movs	r7, #118	@ 0x76
 8000c2e:	1f43      	subs	r3, r0, #5
 8000c30:	409d      	lsls	r5, r3
 8000c32:	2300      	movs	r3, #0
 8000c34:	427f      	negs	r7, r7
 8000c36:	4699      	mov	r9, r3
 8000c38:	469a      	mov	sl, r3
 8000c3a:	1a3f      	subs	r7, r7, r0
 8000c3c:	e799      	b.n	8000b72 <__aeabi_fdiv+0x2e>
 8000c3e:	0020      	movs	r0, r4
 8000c40:	f002 f914 	bl	8002e6c <__clzsi2>
 8000c44:	1f43      	subs	r3, r0, #5
 8000c46:	409c      	lsls	r4, r3
 8000c48:	2376      	movs	r3, #118	@ 0x76
 8000c4a:	425b      	negs	r3, r3
 8000c4c:	1a1b      	subs	r3, r3, r0
 8000c4e:	2000      	movs	r0, #0
 8000c50:	e79e      	b.n	8000b90 <__aeabi_fdiv+0x4c>
 8000c52:	2303      	movs	r3, #3
 8000c54:	464a      	mov	r2, r9
 8000c56:	431a      	orrs	r2, r3
 8000c58:	4691      	mov	r9, r2
 8000c5a:	2003      	movs	r0, #3
 8000c5c:	33fc      	adds	r3, #252	@ 0xfc
 8000c5e:	e797      	b.n	8000b90 <__aeabi_fdiv+0x4c>
 8000c60:	230c      	movs	r3, #12
 8000c62:	4699      	mov	r9, r3
 8000c64:	3b09      	subs	r3, #9
 8000c66:	27ff      	movs	r7, #255	@ 0xff
 8000c68:	469a      	mov	sl, r3
 8000c6a:	e782      	b.n	8000b72 <__aeabi_fdiv+0x2e>
 8000c6c:	2803      	cmp	r0, #3
 8000c6e:	d02c      	beq.n	8000cca <__aeabi_fdiv+0x186>
 8000c70:	0032      	movs	r2, r6
 8000c72:	0038      	movs	r0, r7
 8000c74:	307f      	adds	r0, #127	@ 0x7f
 8000c76:	2800      	cmp	r0, #0
 8000c78:	dd47      	ble.n	8000d0a <__aeabi_fdiv+0x1c6>
 8000c7a:	0763      	lsls	r3, r4, #29
 8000c7c:	d004      	beq.n	8000c88 <__aeabi_fdiv+0x144>
 8000c7e:	230f      	movs	r3, #15
 8000c80:	4023      	ands	r3, r4
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	d000      	beq.n	8000c88 <__aeabi_fdiv+0x144>
 8000c86:	3404      	adds	r4, #4
 8000c88:	0123      	lsls	r3, r4, #4
 8000c8a:	d503      	bpl.n	8000c94 <__aeabi_fdiv+0x150>
 8000c8c:	0038      	movs	r0, r7
 8000c8e:	4b37      	ldr	r3, [pc, #220]	@ (8000d6c <__aeabi_fdiv+0x228>)
 8000c90:	3080      	adds	r0, #128	@ 0x80
 8000c92:	401c      	ands	r4, r3
 8000c94:	28fe      	cmp	r0, #254	@ 0xfe
 8000c96:	dcb6      	bgt.n	8000c06 <__aeabi_fdiv+0xc2>
 8000c98:	01a4      	lsls	r4, r4, #6
 8000c9a:	0a64      	lsrs	r4, r4, #9
 8000c9c:	b2c0      	uxtb	r0, r0
 8000c9e:	e7a9      	b.n	8000bf4 <__aeabi_fdiv+0xb0>
 8000ca0:	2480      	movs	r4, #128	@ 0x80
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	20ff      	movs	r0, #255	@ 0xff
 8000ca6:	03e4      	lsls	r4, r4, #15
 8000ca8:	e7a4      	b.n	8000bf4 <__aeabi_fdiv+0xb0>
 8000caa:	2380      	movs	r3, #128	@ 0x80
 8000cac:	03db      	lsls	r3, r3, #15
 8000cae:	421d      	tst	r5, r3
 8000cb0:	d001      	beq.n	8000cb6 <__aeabi_fdiv+0x172>
 8000cb2:	421c      	tst	r4, r3
 8000cb4:	d00b      	beq.n	8000cce <__aeabi_fdiv+0x18a>
 8000cb6:	2480      	movs	r4, #128	@ 0x80
 8000cb8:	03e4      	lsls	r4, r4, #15
 8000cba:	432c      	orrs	r4, r5
 8000cbc:	0264      	lsls	r4, r4, #9
 8000cbe:	4642      	mov	r2, r8
 8000cc0:	20ff      	movs	r0, #255	@ 0xff
 8000cc2:	0a64      	lsrs	r4, r4, #9
 8000cc4:	e796      	b.n	8000bf4 <__aeabi_fdiv+0xb0>
 8000cc6:	4646      	mov	r6, r8
 8000cc8:	002c      	movs	r4, r5
 8000cca:	2380      	movs	r3, #128	@ 0x80
 8000ccc:	03db      	lsls	r3, r3, #15
 8000cce:	431c      	orrs	r4, r3
 8000cd0:	0264      	lsls	r4, r4, #9
 8000cd2:	0032      	movs	r2, r6
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	0a64      	lsrs	r4, r4, #9
 8000cd8:	e78c      	b.n	8000bf4 <__aeabi_fdiv+0xb0>
 8000cda:	016d      	lsls	r5, r5, #5
 8000cdc:	0160      	lsls	r0, r4, #5
 8000cde:	4285      	cmp	r5, r0
 8000ce0:	d22d      	bcs.n	8000d3e <__aeabi_fdiv+0x1fa>
 8000ce2:	231b      	movs	r3, #27
 8000ce4:	2400      	movs	r4, #0
 8000ce6:	3f01      	subs	r7, #1
 8000ce8:	2601      	movs	r6, #1
 8000cea:	0029      	movs	r1, r5
 8000cec:	0064      	lsls	r4, r4, #1
 8000cee:	006d      	lsls	r5, r5, #1
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	db01      	blt.n	8000cf8 <__aeabi_fdiv+0x1b4>
 8000cf4:	4285      	cmp	r5, r0
 8000cf6:	d301      	bcc.n	8000cfc <__aeabi_fdiv+0x1b8>
 8000cf8:	1a2d      	subs	r5, r5, r0
 8000cfa:	4334      	orrs	r4, r6
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f3      	bne.n	8000cea <__aeabi_fdiv+0x1a6>
 8000d02:	1e6b      	subs	r3, r5, #1
 8000d04:	419d      	sbcs	r5, r3
 8000d06:	432c      	orrs	r4, r5
 8000d08:	e7b3      	b.n	8000c72 <__aeabi_fdiv+0x12e>
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	1a1b      	subs	r3, r3, r0
 8000d0e:	2b1b      	cmp	r3, #27
 8000d10:	dd00      	ble.n	8000d14 <__aeabi_fdiv+0x1d0>
 8000d12:	e76d      	b.n	8000bf0 <__aeabi_fdiv+0xac>
 8000d14:	0021      	movs	r1, r4
 8000d16:	379e      	adds	r7, #158	@ 0x9e
 8000d18:	40d9      	lsrs	r1, r3
 8000d1a:	40bc      	lsls	r4, r7
 8000d1c:	000b      	movs	r3, r1
 8000d1e:	1e61      	subs	r1, r4, #1
 8000d20:	418c      	sbcs	r4, r1
 8000d22:	4323      	orrs	r3, r4
 8000d24:	0759      	lsls	r1, r3, #29
 8000d26:	d004      	beq.n	8000d32 <__aeabi_fdiv+0x1ee>
 8000d28:	210f      	movs	r1, #15
 8000d2a:	4019      	ands	r1, r3
 8000d2c:	2904      	cmp	r1, #4
 8000d2e:	d000      	beq.n	8000d32 <__aeabi_fdiv+0x1ee>
 8000d30:	3304      	adds	r3, #4
 8000d32:	0159      	lsls	r1, r3, #5
 8000d34:	d413      	bmi.n	8000d5e <__aeabi_fdiv+0x21a>
 8000d36:	019b      	lsls	r3, r3, #6
 8000d38:	2000      	movs	r0, #0
 8000d3a:	0a5c      	lsrs	r4, r3, #9
 8000d3c:	e75a      	b.n	8000bf4 <__aeabi_fdiv+0xb0>
 8000d3e:	231a      	movs	r3, #26
 8000d40:	2401      	movs	r4, #1
 8000d42:	1a2d      	subs	r5, r5, r0
 8000d44:	e7d0      	b.n	8000ce8 <__aeabi_fdiv+0x1a4>
 8000d46:	1e98      	subs	r0, r3, #2
 8000d48:	4243      	negs	r3, r0
 8000d4a:	4158      	adcs	r0, r3
 8000d4c:	4240      	negs	r0, r0
 8000d4e:	0032      	movs	r2, r6
 8000d50:	2400      	movs	r4, #0
 8000d52:	b2c0      	uxtb	r0, r0
 8000d54:	e74e      	b.n	8000bf4 <__aeabi_fdiv+0xb0>
 8000d56:	4642      	mov	r2, r8
 8000d58:	20ff      	movs	r0, #255	@ 0xff
 8000d5a:	2400      	movs	r4, #0
 8000d5c:	e74a      	b.n	8000bf4 <__aeabi_fdiv+0xb0>
 8000d5e:	2001      	movs	r0, #1
 8000d60:	2400      	movs	r4, #0
 8000d62:	e747      	b.n	8000bf4 <__aeabi_fdiv+0xb0>
 8000d64:	0800a868 	.word	0x0800a868
 8000d68:	0800a8a8 	.word	0x0800a8a8
 8000d6c:	f7ffffff 	.word	0xf7ffffff

08000d70 <__aeabi_i2f>:
 8000d70:	b570      	push	{r4, r5, r6, lr}
 8000d72:	2800      	cmp	r0, #0
 8000d74:	d012      	beq.n	8000d9c <__aeabi_i2f+0x2c>
 8000d76:	17c3      	asrs	r3, r0, #31
 8000d78:	18c5      	adds	r5, r0, r3
 8000d7a:	405d      	eors	r5, r3
 8000d7c:	0fc4      	lsrs	r4, r0, #31
 8000d7e:	0028      	movs	r0, r5
 8000d80:	f002 f874 	bl	8002e6c <__clzsi2>
 8000d84:	239e      	movs	r3, #158	@ 0x9e
 8000d86:	1a1b      	subs	r3, r3, r0
 8000d88:	2b96      	cmp	r3, #150	@ 0x96
 8000d8a:	dc0f      	bgt.n	8000dac <__aeabi_i2f+0x3c>
 8000d8c:	2808      	cmp	r0, #8
 8000d8e:	d038      	beq.n	8000e02 <__aeabi_i2f+0x92>
 8000d90:	3808      	subs	r0, #8
 8000d92:	4085      	lsls	r5, r0
 8000d94:	026d      	lsls	r5, r5, #9
 8000d96:	0a6d      	lsrs	r5, r5, #9
 8000d98:	b2d8      	uxtb	r0, r3
 8000d9a:	e002      	b.n	8000da2 <__aeabi_i2f+0x32>
 8000d9c:	2400      	movs	r4, #0
 8000d9e:	2000      	movs	r0, #0
 8000da0:	2500      	movs	r5, #0
 8000da2:	05c0      	lsls	r0, r0, #23
 8000da4:	4328      	orrs	r0, r5
 8000da6:	07e4      	lsls	r4, r4, #31
 8000da8:	4320      	orrs	r0, r4
 8000daa:	bd70      	pop	{r4, r5, r6, pc}
 8000dac:	2b99      	cmp	r3, #153	@ 0x99
 8000dae:	dc14      	bgt.n	8000dda <__aeabi_i2f+0x6a>
 8000db0:	1f42      	subs	r2, r0, #5
 8000db2:	4095      	lsls	r5, r2
 8000db4:	002a      	movs	r2, r5
 8000db6:	4915      	ldr	r1, [pc, #84]	@ (8000e0c <__aeabi_i2f+0x9c>)
 8000db8:	4011      	ands	r1, r2
 8000dba:	0755      	lsls	r5, r2, #29
 8000dbc:	d01c      	beq.n	8000df8 <__aeabi_i2f+0x88>
 8000dbe:	250f      	movs	r5, #15
 8000dc0:	402a      	ands	r2, r5
 8000dc2:	2a04      	cmp	r2, #4
 8000dc4:	d018      	beq.n	8000df8 <__aeabi_i2f+0x88>
 8000dc6:	3104      	adds	r1, #4
 8000dc8:	08ca      	lsrs	r2, r1, #3
 8000dca:	0149      	lsls	r1, r1, #5
 8000dcc:	d515      	bpl.n	8000dfa <__aeabi_i2f+0x8a>
 8000dce:	239f      	movs	r3, #159	@ 0x9f
 8000dd0:	0252      	lsls	r2, r2, #9
 8000dd2:	1a18      	subs	r0, r3, r0
 8000dd4:	0a55      	lsrs	r5, r2, #9
 8000dd6:	b2c0      	uxtb	r0, r0
 8000dd8:	e7e3      	b.n	8000da2 <__aeabi_i2f+0x32>
 8000dda:	2205      	movs	r2, #5
 8000ddc:	0029      	movs	r1, r5
 8000dde:	1a12      	subs	r2, r2, r0
 8000de0:	40d1      	lsrs	r1, r2
 8000de2:	0002      	movs	r2, r0
 8000de4:	321b      	adds	r2, #27
 8000de6:	4095      	lsls	r5, r2
 8000de8:	002a      	movs	r2, r5
 8000dea:	1e55      	subs	r5, r2, #1
 8000dec:	41aa      	sbcs	r2, r5
 8000dee:	430a      	orrs	r2, r1
 8000df0:	4906      	ldr	r1, [pc, #24]	@ (8000e0c <__aeabi_i2f+0x9c>)
 8000df2:	4011      	ands	r1, r2
 8000df4:	0755      	lsls	r5, r2, #29
 8000df6:	d1e2      	bne.n	8000dbe <__aeabi_i2f+0x4e>
 8000df8:	08ca      	lsrs	r2, r1, #3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0a55      	lsrs	r5, r2, #9
 8000dfe:	b2d8      	uxtb	r0, r3
 8000e00:	e7cf      	b.n	8000da2 <__aeabi_i2f+0x32>
 8000e02:	026d      	lsls	r5, r5, #9
 8000e04:	0a6d      	lsrs	r5, r5, #9
 8000e06:	308e      	adds	r0, #142	@ 0x8e
 8000e08:	e7cb      	b.n	8000da2 <__aeabi_i2f+0x32>
 8000e0a:	46c0      	nop			@ (mov r8, r8)
 8000e0c:	fbffffff 	.word	0xfbffffff

08000e10 <__aeabi_ui2f>:
 8000e10:	b510      	push	{r4, lr}
 8000e12:	1e04      	subs	r4, r0, #0
 8000e14:	d00d      	beq.n	8000e32 <__aeabi_ui2f+0x22>
 8000e16:	f002 f829 	bl	8002e6c <__clzsi2>
 8000e1a:	239e      	movs	r3, #158	@ 0x9e
 8000e1c:	1a1b      	subs	r3, r3, r0
 8000e1e:	2b96      	cmp	r3, #150	@ 0x96
 8000e20:	dc0c      	bgt.n	8000e3c <__aeabi_ui2f+0x2c>
 8000e22:	2808      	cmp	r0, #8
 8000e24:	d034      	beq.n	8000e90 <__aeabi_ui2f+0x80>
 8000e26:	3808      	subs	r0, #8
 8000e28:	4084      	lsls	r4, r0
 8000e2a:	0264      	lsls	r4, r4, #9
 8000e2c:	0a64      	lsrs	r4, r4, #9
 8000e2e:	b2d8      	uxtb	r0, r3
 8000e30:	e001      	b.n	8000e36 <__aeabi_ui2f+0x26>
 8000e32:	2000      	movs	r0, #0
 8000e34:	2400      	movs	r4, #0
 8000e36:	05c0      	lsls	r0, r0, #23
 8000e38:	4320      	orrs	r0, r4
 8000e3a:	bd10      	pop	{r4, pc}
 8000e3c:	2b99      	cmp	r3, #153	@ 0x99
 8000e3e:	dc13      	bgt.n	8000e68 <__aeabi_ui2f+0x58>
 8000e40:	1f42      	subs	r2, r0, #5
 8000e42:	4094      	lsls	r4, r2
 8000e44:	4a14      	ldr	r2, [pc, #80]	@ (8000e98 <__aeabi_ui2f+0x88>)
 8000e46:	4022      	ands	r2, r4
 8000e48:	0761      	lsls	r1, r4, #29
 8000e4a:	d01c      	beq.n	8000e86 <__aeabi_ui2f+0x76>
 8000e4c:	210f      	movs	r1, #15
 8000e4e:	4021      	ands	r1, r4
 8000e50:	2904      	cmp	r1, #4
 8000e52:	d018      	beq.n	8000e86 <__aeabi_ui2f+0x76>
 8000e54:	3204      	adds	r2, #4
 8000e56:	08d4      	lsrs	r4, r2, #3
 8000e58:	0152      	lsls	r2, r2, #5
 8000e5a:	d515      	bpl.n	8000e88 <__aeabi_ui2f+0x78>
 8000e5c:	239f      	movs	r3, #159	@ 0x9f
 8000e5e:	0264      	lsls	r4, r4, #9
 8000e60:	1a18      	subs	r0, r3, r0
 8000e62:	0a64      	lsrs	r4, r4, #9
 8000e64:	b2c0      	uxtb	r0, r0
 8000e66:	e7e6      	b.n	8000e36 <__aeabi_ui2f+0x26>
 8000e68:	0002      	movs	r2, r0
 8000e6a:	0021      	movs	r1, r4
 8000e6c:	321b      	adds	r2, #27
 8000e6e:	4091      	lsls	r1, r2
 8000e70:	000a      	movs	r2, r1
 8000e72:	1e51      	subs	r1, r2, #1
 8000e74:	418a      	sbcs	r2, r1
 8000e76:	2105      	movs	r1, #5
 8000e78:	1a09      	subs	r1, r1, r0
 8000e7a:	40cc      	lsrs	r4, r1
 8000e7c:	4314      	orrs	r4, r2
 8000e7e:	4a06      	ldr	r2, [pc, #24]	@ (8000e98 <__aeabi_ui2f+0x88>)
 8000e80:	4022      	ands	r2, r4
 8000e82:	0761      	lsls	r1, r4, #29
 8000e84:	d1e2      	bne.n	8000e4c <__aeabi_ui2f+0x3c>
 8000e86:	08d4      	lsrs	r4, r2, #3
 8000e88:	0264      	lsls	r4, r4, #9
 8000e8a:	0a64      	lsrs	r4, r4, #9
 8000e8c:	b2d8      	uxtb	r0, r3
 8000e8e:	e7d2      	b.n	8000e36 <__aeabi_ui2f+0x26>
 8000e90:	0264      	lsls	r4, r4, #9
 8000e92:	0a64      	lsrs	r4, r4, #9
 8000e94:	308e      	adds	r0, #142	@ 0x8e
 8000e96:	e7ce      	b.n	8000e36 <__aeabi_ui2f+0x26>
 8000e98:	fbffffff 	.word	0xfbffffff

08000e9c <__aeabi_dadd>:
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	464f      	mov	r7, r9
 8000ea0:	4646      	mov	r6, r8
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	b5c0      	push	{r6, r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	9000      	str	r0, [sp, #0]
 8000eaa:	9101      	str	r1, [sp, #4]
 8000eac:	030e      	lsls	r6, r1, #12
 8000eae:	004c      	lsls	r4, r1, #1
 8000eb0:	0fcd      	lsrs	r5, r1, #31
 8000eb2:	0a71      	lsrs	r1, r6, #9
 8000eb4:	9e00      	ldr	r6, [sp, #0]
 8000eb6:	005f      	lsls	r7, r3, #1
 8000eb8:	0f76      	lsrs	r6, r6, #29
 8000eba:	430e      	orrs	r6, r1
 8000ebc:	9900      	ldr	r1, [sp, #0]
 8000ebe:	9200      	str	r2, [sp, #0]
 8000ec0:	9301      	str	r3, [sp, #4]
 8000ec2:	00c9      	lsls	r1, r1, #3
 8000ec4:	4689      	mov	r9, r1
 8000ec6:	0319      	lsls	r1, r3, #12
 8000ec8:	0d7b      	lsrs	r3, r7, #21
 8000eca:	4698      	mov	r8, r3
 8000ecc:	9b01      	ldr	r3, [sp, #4]
 8000ece:	0a49      	lsrs	r1, r1, #9
 8000ed0:	0fdb      	lsrs	r3, r3, #31
 8000ed2:	469c      	mov	ip, r3
 8000ed4:	9b00      	ldr	r3, [sp, #0]
 8000ed6:	9a00      	ldr	r2, [sp, #0]
 8000ed8:	0f5b      	lsrs	r3, r3, #29
 8000eda:	430b      	orrs	r3, r1
 8000edc:	4641      	mov	r1, r8
 8000ede:	0d64      	lsrs	r4, r4, #21
 8000ee0:	00d2      	lsls	r2, r2, #3
 8000ee2:	1a61      	subs	r1, r4, r1
 8000ee4:	4565      	cmp	r5, ip
 8000ee6:	d100      	bne.n	8000eea <__aeabi_dadd+0x4e>
 8000ee8:	e0a6      	b.n	8001038 <__aeabi_dadd+0x19c>
 8000eea:	2900      	cmp	r1, #0
 8000eec:	dd72      	ble.n	8000fd4 <__aeabi_dadd+0x138>
 8000eee:	4647      	mov	r7, r8
 8000ef0:	2f00      	cmp	r7, #0
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_dadd+0x5a>
 8000ef4:	e0dd      	b.n	80010b2 <__aeabi_dadd+0x216>
 8000ef6:	4fcc      	ldr	r7, [pc, #816]	@ (8001228 <__aeabi_dadd+0x38c>)
 8000ef8:	42bc      	cmp	r4, r7
 8000efa:	d100      	bne.n	8000efe <__aeabi_dadd+0x62>
 8000efc:	e19a      	b.n	8001234 <__aeabi_dadd+0x398>
 8000efe:	2701      	movs	r7, #1
 8000f00:	2938      	cmp	r1, #56	@ 0x38
 8000f02:	dc17      	bgt.n	8000f34 <__aeabi_dadd+0x98>
 8000f04:	2780      	movs	r7, #128	@ 0x80
 8000f06:	043f      	lsls	r7, r7, #16
 8000f08:	433b      	orrs	r3, r7
 8000f0a:	291f      	cmp	r1, #31
 8000f0c:	dd00      	ble.n	8000f10 <__aeabi_dadd+0x74>
 8000f0e:	e1dd      	b.n	80012cc <__aeabi_dadd+0x430>
 8000f10:	2720      	movs	r7, #32
 8000f12:	1a78      	subs	r0, r7, r1
 8000f14:	001f      	movs	r7, r3
 8000f16:	4087      	lsls	r7, r0
 8000f18:	46ba      	mov	sl, r7
 8000f1a:	0017      	movs	r7, r2
 8000f1c:	40cf      	lsrs	r7, r1
 8000f1e:	4684      	mov	ip, r0
 8000f20:	0038      	movs	r0, r7
 8000f22:	4657      	mov	r7, sl
 8000f24:	4307      	orrs	r7, r0
 8000f26:	4660      	mov	r0, ip
 8000f28:	4082      	lsls	r2, r0
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	1e50      	subs	r0, r2, #1
 8000f2e:	4182      	sbcs	r2, r0
 8000f30:	1af6      	subs	r6, r6, r3
 8000f32:	4317      	orrs	r7, r2
 8000f34:	464b      	mov	r3, r9
 8000f36:	1bdf      	subs	r7, r3, r7
 8000f38:	45b9      	cmp	r9, r7
 8000f3a:	4180      	sbcs	r0, r0
 8000f3c:	4240      	negs	r0, r0
 8000f3e:	1a36      	subs	r6, r6, r0
 8000f40:	0233      	lsls	r3, r6, #8
 8000f42:	d400      	bmi.n	8000f46 <__aeabi_dadd+0xaa>
 8000f44:	e0ff      	b.n	8001146 <__aeabi_dadd+0x2aa>
 8000f46:	0276      	lsls	r6, r6, #9
 8000f48:	0a76      	lsrs	r6, r6, #9
 8000f4a:	2e00      	cmp	r6, #0
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_dadd+0xb4>
 8000f4e:	e13c      	b.n	80011ca <__aeabi_dadd+0x32e>
 8000f50:	0030      	movs	r0, r6
 8000f52:	f001 ff8b 	bl	8002e6c <__clzsi2>
 8000f56:	0003      	movs	r3, r0
 8000f58:	3b08      	subs	r3, #8
 8000f5a:	2120      	movs	r1, #32
 8000f5c:	0038      	movs	r0, r7
 8000f5e:	1aca      	subs	r2, r1, r3
 8000f60:	40d0      	lsrs	r0, r2
 8000f62:	409e      	lsls	r6, r3
 8000f64:	0002      	movs	r2, r0
 8000f66:	409f      	lsls	r7, r3
 8000f68:	4332      	orrs	r2, r6
 8000f6a:	429c      	cmp	r4, r3
 8000f6c:	dd00      	ble.n	8000f70 <__aeabi_dadd+0xd4>
 8000f6e:	e1a6      	b.n	80012be <__aeabi_dadd+0x422>
 8000f70:	1b18      	subs	r0, r3, r4
 8000f72:	3001      	adds	r0, #1
 8000f74:	1a09      	subs	r1, r1, r0
 8000f76:	003e      	movs	r6, r7
 8000f78:	408f      	lsls	r7, r1
 8000f7a:	40c6      	lsrs	r6, r0
 8000f7c:	1e7b      	subs	r3, r7, #1
 8000f7e:	419f      	sbcs	r7, r3
 8000f80:	0013      	movs	r3, r2
 8000f82:	408b      	lsls	r3, r1
 8000f84:	4337      	orrs	r7, r6
 8000f86:	431f      	orrs	r7, r3
 8000f88:	40c2      	lsrs	r2, r0
 8000f8a:	003b      	movs	r3, r7
 8000f8c:	0016      	movs	r6, r2
 8000f8e:	2400      	movs	r4, #0
 8000f90:	4313      	orrs	r3, r2
 8000f92:	d100      	bne.n	8000f96 <__aeabi_dadd+0xfa>
 8000f94:	e1df      	b.n	8001356 <__aeabi_dadd+0x4ba>
 8000f96:	077b      	lsls	r3, r7, #29
 8000f98:	d100      	bne.n	8000f9c <__aeabi_dadd+0x100>
 8000f9a:	e332      	b.n	8001602 <__aeabi_dadd+0x766>
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	003a      	movs	r2, r7
 8000fa0:	403b      	ands	r3, r7
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	d004      	beq.n	8000fb0 <__aeabi_dadd+0x114>
 8000fa6:	1d3a      	adds	r2, r7, #4
 8000fa8:	42ba      	cmp	r2, r7
 8000faa:	41bf      	sbcs	r7, r7
 8000fac:	427f      	negs	r7, r7
 8000fae:	19f6      	adds	r6, r6, r7
 8000fb0:	0233      	lsls	r3, r6, #8
 8000fb2:	d400      	bmi.n	8000fb6 <__aeabi_dadd+0x11a>
 8000fb4:	e323      	b.n	80015fe <__aeabi_dadd+0x762>
 8000fb6:	4b9c      	ldr	r3, [pc, #624]	@ (8001228 <__aeabi_dadd+0x38c>)
 8000fb8:	3401      	adds	r4, #1
 8000fba:	429c      	cmp	r4, r3
 8000fbc:	d100      	bne.n	8000fc0 <__aeabi_dadd+0x124>
 8000fbe:	e0b4      	b.n	800112a <__aeabi_dadd+0x28e>
 8000fc0:	4b9a      	ldr	r3, [pc, #616]	@ (800122c <__aeabi_dadd+0x390>)
 8000fc2:	0564      	lsls	r4, r4, #21
 8000fc4:	401e      	ands	r6, r3
 8000fc6:	0d64      	lsrs	r4, r4, #21
 8000fc8:	0777      	lsls	r7, r6, #29
 8000fca:	08d2      	lsrs	r2, r2, #3
 8000fcc:	0276      	lsls	r6, r6, #9
 8000fce:	4317      	orrs	r7, r2
 8000fd0:	0b36      	lsrs	r6, r6, #12
 8000fd2:	e0ac      	b.n	800112e <__aeabi_dadd+0x292>
 8000fd4:	2900      	cmp	r1, #0
 8000fd6:	d100      	bne.n	8000fda <__aeabi_dadd+0x13e>
 8000fd8:	e07e      	b.n	80010d8 <__aeabi_dadd+0x23c>
 8000fda:	4641      	mov	r1, r8
 8000fdc:	1b09      	subs	r1, r1, r4
 8000fde:	2c00      	cmp	r4, #0
 8000fe0:	d000      	beq.n	8000fe4 <__aeabi_dadd+0x148>
 8000fe2:	e160      	b.n	80012a6 <__aeabi_dadd+0x40a>
 8000fe4:	0034      	movs	r4, r6
 8000fe6:	4648      	mov	r0, r9
 8000fe8:	4304      	orrs	r4, r0
 8000fea:	d100      	bne.n	8000fee <__aeabi_dadd+0x152>
 8000fec:	e1c9      	b.n	8001382 <__aeabi_dadd+0x4e6>
 8000fee:	1e4c      	subs	r4, r1, #1
 8000ff0:	2901      	cmp	r1, #1
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_dadd+0x15a>
 8000ff4:	e22e      	b.n	8001454 <__aeabi_dadd+0x5b8>
 8000ff6:	4d8c      	ldr	r5, [pc, #560]	@ (8001228 <__aeabi_dadd+0x38c>)
 8000ff8:	42a9      	cmp	r1, r5
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_dadd+0x162>
 8000ffc:	e224      	b.n	8001448 <__aeabi_dadd+0x5ac>
 8000ffe:	2701      	movs	r7, #1
 8001000:	2c38      	cmp	r4, #56	@ 0x38
 8001002:	dc11      	bgt.n	8001028 <__aeabi_dadd+0x18c>
 8001004:	0021      	movs	r1, r4
 8001006:	291f      	cmp	r1, #31
 8001008:	dd00      	ble.n	800100c <__aeabi_dadd+0x170>
 800100a:	e20b      	b.n	8001424 <__aeabi_dadd+0x588>
 800100c:	2420      	movs	r4, #32
 800100e:	0037      	movs	r7, r6
 8001010:	4648      	mov	r0, r9
 8001012:	1a64      	subs	r4, r4, r1
 8001014:	40a7      	lsls	r7, r4
 8001016:	40c8      	lsrs	r0, r1
 8001018:	4307      	orrs	r7, r0
 800101a:	4648      	mov	r0, r9
 800101c:	40a0      	lsls	r0, r4
 800101e:	40ce      	lsrs	r6, r1
 8001020:	1e44      	subs	r4, r0, #1
 8001022:	41a0      	sbcs	r0, r4
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	4307      	orrs	r7, r0
 8001028:	1bd7      	subs	r7, r2, r7
 800102a:	42ba      	cmp	r2, r7
 800102c:	4192      	sbcs	r2, r2
 800102e:	4252      	negs	r2, r2
 8001030:	4665      	mov	r5, ip
 8001032:	4644      	mov	r4, r8
 8001034:	1a9e      	subs	r6, r3, r2
 8001036:	e783      	b.n	8000f40 <__aeabi_dadd+0xa4>
 8001038:	2900      	cmp	r1, #0
 800103a:	dc00      	bgt.n	800103e <__aeabi_dadd+0x1a2>
 800103c:	e09c      	b.n	8001178 <__aeabi_dadd+0x2dc>
 800103e:	4647      	mov	r7, r8
 8001040:	2f00      	cmp	r7, #0
 8001042:	d167      	bne.n	8001114 <__aeabi_dadd+0x278>
 8001044:	001f      	movs	r7, r3
 8001046:	4317      	orrs	r7, r2
 8001048:	d100      	bne.n	800104c <__aeabi_dadd+0x1b0>
 800104a:	e0e4      	b.n	8001216 <__aeabi_dadd+0x37a>
 800104c:	1e48      	subs	r0, r1, #1
 800104e:	2901      	cmp	r1, #1
 8001050:	d100      	bne.n	8001054 <__aeabi_dadd+0x1b8>
 8001052:	e19b      	b.n	800138c <__aeabi_dadd+0x4f0>
 8001054:	4f74      	ldr	r7, [pc, #464]	@ (8001228 <__aeabi_dadd+0x38c>)
 8001056:	42b9      	cmp	r1, r7
 8001058:	d100      	bne.n	800105c <__aeabi_dadd+0x1c0>
 800105a:	e0eb      	b.n	8001234 <__aeabi_dadd+0x398>
 800105c:	2701      	movs	r7, #1
 800105e:	0001      	movs	r1, r0
 8001060:	2838      	cmp	r0, #56	@ 0x38
 8001062:	dc11      	bgt.n	8001088 <__aeabi_dadd+0x1ec>
 8001064:	291f      	cmp	r1, #31
 8001066:	dd00      	ble.n	800106a <__aeabi_dadd+0x1ce>
 8001068:	e1c7      	b.n	80013fa <__aeabi_dadd+0x55e>
 800106a:	2720      	movs	r7, #32
 800106c:	1a78      	subs	r0, r7, r1
 800106e:	001f      	movs	r7, r3
 8001070:	4684      	mov	ip, r0
 8001072:	4087      	lsls	r7, r0
 8001074:	0010      	movs	r0, r2
 8001076:	40c8      	lsrs	r0, r1
 8001078:	4307      	orrs	r7, r0
 800107a:	4660      	mov	r0, ip
 800107c:	4082      	lsls	r2, r0
 800107e:	40cb      	lsrs	r3, r1
 8001080:	1e50      	subs	r0, r2, #1
 8001082:	4182      	sbcs	r2, r0
 8001084:	18f6      	adds	r6, r6, r3
 8001086:	4317      	orrs	r7, r2
 8001088:	444f      	add	r7, r9
 800108a:	454f      	cmp	r7, r9
 800108c:	4180      	sbcs	r0, r0
 800108e:	4240      	negs	r0, r0
 8001090:	1836      	adds	r6, r6, r0
 8001092:	0233      	lsls	r3, r6, #8
 8001094:	d557      	bpl.n	8001146 <__aeabi_dadd+0x2aa>
 8001096:	4b64      	ldr	r3, [pc, #400]	@ (8001228 <__aeabi_dadd+0x38c>)
 8001098:	3401      	adds	r4, #1
 800109a:	429c      	cmp	r4, r3
 800109c:	d045      	beq.n	800112a <__aeabi_dadd+0x28e>
 800109e:	2101      	movs	r1, #1
 80010a0:	4b62      	ldr	r3, [pc, #392]	@ (800122c <__aeabi_dadd+0x390>)
 80010a2:	087a      	lsrs	r2, r7, #1
 80010a4:	401e      	ands	r6, r3
 80010a6:	4039      	ands	r1, r7
 80010a8:	430a      	orrs	r2, r1
 80010aa:	07f7      	lsls	r7, r6, #31
 80010ac:	4317      	orrs	r7, r2
 80010ae:	0876      	lsrs	r6, r6, #1
 80010b0:	e771      	b.n	8000f96 <__aeabi_dadd+0xfa>
 80010b2:	001f      	movs	r7, r3
 80010b4:	4317      	orrs	r7, r2
 80010b6:	d100      	bne.n	80010ba <__aeabi_dadd+0x21e>
 80010b8:	e0ad      	b.n	8001216 <__aeabi_dadd+0x37a>
 80010ba:	1e4f      	subs	r7, r1, #1
 80010bc:	46bc      	mov	ip, r7
 80010be:	2901      	cmp	r1, #1
 80010c0:	d100      	bne.n	80010c4 <__aeabi_dadd+0x228>
 80010c2:	e182      	b.n	80013ca <__aeabi_dadd+0x52e>
 80010c4:	4f58      	ldr	r7, [pc, #352]	@ (8001228 <__aeabi_dadd+0x38c>)
 80010c6:	42b9      	cmp	r1, r7
 80010c8:	d100      	bne.n	80010cc <__aeabi_dadd+0x230>
 80010ca:	e190      	b.n	80013ee <__aeabi_dadd+0x552>
 80010cc:	4661      	mov	r1, ip
 80010ce:	2701      	movs	r7, #1
 80010d0:	2938      	cmp	r1, #56	@ 0x38
 80010d2:	dd00      	ble.n	80010d6 <__aeabi_dadd+0x23a>
 80010d4:	e72e      	b.n	8000f34 <__aeabi_dadd+0x98>
 80010d6:	e718      	b.n	8000f0a <__aeabi_dadd+0x6e>
 80010d8:	4f55      	ldr	r7, [pc, #340]	@ (8001230 <__aeabi_dadd+0x394>)
 80010da:	1c61      	adds	r1, r4, #1
 80010dc:	4239      	tst	r1, r7
 80010de:	d000      	beq.n	80010e2 <__aeabi_dadd+0x246>
 80010e0:	e0d0      	b.n	8001284 <__aeabi_dadd+0x3e8>
 80010e2:	0031      	movs	r1, r6
 80010e4:	4648      	mov	r0, r9
 80010e6:	001f      	movs	r7, r3
 80010e8:	4301      	orrs	r1, r0
 80010ea:	4317      	orrs	r7, r2
 80010ec:	2c00      	cmp	r4, #0
 80010ee:	d000      	beq.n	80010f2 <__aeabi_dadd+0x256>
 80010f0:	e13d      	b.n	800136e <__aeabi_dadd+0x4d2>
 80010f2:	2900      	cmp	r1, #0
 80010f4:	d100      	bne.n	80010f8 <__aeabi_dadd+0x25c>
 80010f6:	e1bc      	b.n	8001472 <__aeabi_dadd+0x5d6>
 80010f8:	2f00      	cmp	r7, #0
 80010fa:	d000      	beq.n	80010fe <__aeabi_dadd+0x262>
 80010fc:	e1bf      	b.n	800147e <__aeabi_dadd+0x5e2>
 80010fe:	464b      	mov	r3, r9
 8001100:	2100      	movs	r1, #0
 8001102:	08d8      	lsrs	r0, r3, #3
 8001104:	0777      	lsls	r7, r6, #29
 8001106:	4307      	orrs	r7, r0
 8001108:	08f0      	lsrs	r0, r6, #3
 800110a:	0306      	lsls	r6, r0, #12
 800110c:	054c      	lsls	r4, r1, #21
 800110e:	0b36      	lsrs	r6, r6, #12
 8001110:	0d64      	lsrs	r4, r4, #21
 8001112:	e00c      	b.n	800112e <__aeabi_dadd+0x292>
 8001114:	4f44      	ldr	r7, [pc, #272]	@ (8001228 <__aeabi_dadd+0x38c>)
 8001116:	42bc      	cmp	r4, r7
 8001118:	d100      	bne.n	800111c <__aeabi_dadd+0x280>
 800111a:	e08b      	b.n	8001234 <__aeabi_dadd+0x398>
 800111c:	2701      	movs	r7, #1
 800111e:	2938      	cmp	r1, #56	@ 0x38
 8001120:	dcb2      	bgt.n	8001088 <__aeabi_dadd+0x1ec>
 8001122:	2780      	movs	r7, #128	@ 0x80
 8001124:	043f      	lsls	r7, r7, #16
 8001126:	433b      	orrs	r3, r7
 8001128:	e79c      	b.n	8001064 <__aeabi_dadd+0x1c8>
 800112a:	2600      	movs	r6, #0
 800112c:	2700      	movs	r7, #0
 800112e:	0524      	lsls	r4, r4, #20
 8001130:	4334      	orrs	r4, r6
 8001132:	07ed      	lsls	r5, r5, #31
 8001134:	432c      	orrs	r4, r5
 8001136:	0038      	movs	r0, r7
 8001138:	0021      	movs	r1, r4
 800113a:	b002      	add	sp, #8
 800113c:	bce0      	pop	{r5, r6, r7}
 800113e:	46ba      	mov	sl, r7
 8001140:	46b1      	mov	r9, r6
 8001142:	46a8      	mov	r8, r5
 8001144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001146:	077b      	lsls	r3, r7, #29
 8001148:	d004      	beq.n	8001154 <__aeabi_dadd+0x2b8>
 800114a:	230f      	movs	r3, #15
 800114c:	403b      	ands	r3, r7
 800114e:	2b04      	cmp	r3, #4
 8001150:	d000      	beq.n	8001154 <__aeabi_dadd+0x2b8>
 8001152:	e728      	b.n	8000fa6 <__aeabi_dadd+0x10a>
 8001154:	08f8      	lsrs	r0, r7, #3
 8001156:	4b34      	ldr	r3, [pc, #208]	@ (8001228 <__aeabi_dadd+0x38c>)
 8001158:	0777      	lsls	r7, r6, #29
 800115a:	4307      	orrs	r7, r0
 800115c:	08f0      	lsrs	r0, r6, #3
 800115e:	429c      	cmp	r4, r3
 8001160:	d000      	beq.n	8001164 <__aeabi_dadd+0x2c8>
 8001162:	e24a      	b.n	80015fa <__aeabi_dadd+0x75e>
 8001164:	003b      	movs	r3, r7
 8001166:	4303      	orrs	r3, r0
 8001168:	d059      	beq.n	800121e <__aeabi_dadd+0x382>
 800116a:	2680      	movs	r6, #128	@ 0x80
 800116c:	0336      	lsls	r6, r6, #12
 800116e:	4306      	orrs	r6, r0
 8001170:	0336      	lsls	r6, r6, #12
 8001172:	4c2d      	ldr	r4, [pc, #180]	@ (8001228 <__aeabi_dadd+0x38c>)
 8001174:	0b36      	lsrs	r6, r6, #12
 8001176:	e7da      	b.n	800112e <__aeabi_dadd+0x292>
 8001178:	2900      	cmp	r1, #0
 800117a:	d061      	beq.n	8001240 <__aeabi_dadd+0x3a4>
 800117c:	4641      	mov	r1, r8
 800117e:	1b09      	subs	r1, r1, r4
 8001180:	2c00      	cmp	r4, #0
 8001182:	d100      	bne.n	8001186 <__aeabi_dadd+0x2ea>
 8001184:	e0b9      	b.n	80012fa <__aeabi_dadd+0x45e>
 8001186:	4c28      	ldr	r4, [pc, #160]	@ (8001228 <__aeabi_dadd+0x38c>)
 8001188:	45a0      	cmp	r8, r4
 800118a:	d100      	bne.n	800118e <__aeabi_dadd+0x2f2>
 800118c:	e1a5      	b.n	80014da <__aeabi_dadd+0x63e>
 800118e:	2701      	movs	r7, #1
 8001190:	2938      	cmp	r1, #56	@ 0x38
 8001192:	dc13      	bgt.n	80011bc <__aeabi_dadd+0x320>
 8001194:	2480      	movs	r4, #128	@ 0x80
 8001196:	0424      	lsls	r4, r4, #16
 8001198:	4326      	orrs	r6, r4
 800119a:	291f      	cmp	r1, #31
 800119c:	dd00      	ble.n	80011a0 <__aeabi_dadd+0x304>
 800119e:	e1c8      	b.n	8001532 <__aeabi_dadd+0x696>
 80011a0:	2420      	movs	r4, #32
 80011a2:	0037      	movs	r7, r6
 80011a4:	4648      	mov	r0, r9
 80011a6:	1a64      	subs	r4, r4, r1
 80011a8:	40a7      	lsls	r7, r4
 80011aa:	40c8      	lsrs	r0, r1
 80011ac:	4307      	orrs	r7, r0
 80011ae:	4648      	mov	r0, r9
 80011b0:	40a0      	lsls	r0, r4
 80011b2:	40ce      	lsrs	r6, r1
 80011b4:	1e44      	subs	r4, r0, #1
 80011b6:	41a0      	sbcs	r0, r4
 80011b8:	199b      	adds	r3, r3, r6
 80011ba:	4307      	orrs	r7, r0
 80011bc:	18bf      	adds	r7, r7, r2
 80011be:	4297      	cmp	r7, r2
 80011c0:	4192      	sbcs	r2, r2
 80011c2:	4252      	negs	r2, r2
 80011c4:	4644      	mov	r4, r8
 80011c6:	18d6      	adds	r6, r2, r3
 80011c8:	e763      	b.n	8001092 <__aeabi_dadd+0x1f6>
 80011ca:	0038      	movs	r0, r7
 80011cc:	f001 fe4e 	bl	8002e6c <__clzsi2>
 80011d0:	0003      	movs	r3, r0
 80011d2:	3318      	adds	r3, #24
 80011d4:	2b1f      	cmp	r3, #31
 80011d6:	dc00      	bgt.n	80011da <__aeabi_dadd+0x33e>
 80011d8:	e6bf      	b.n	8000f5a <__aeabi_dadd+0xbe>
 80011da:	003a      	movs	r2, r7
 80011dc:	3808      	subs	r0, #8
 80011de:	4082      	lsls	r2, r0
 80011e0:	429c      	cmp	r4, r3
 80011e2:	dd00      	ble.n	80011e6 <__aeabi_dadd+0x34a>
 80011e4:	e083      	b.n	80012ee <__aeabi_dadd+0x452>
 80011e6:	1b1b      	subs	r3, r3, r4
 80011e8:	1c58      	adds	r0, r3, #1
 80011ea:	281f      	cmp	r0, #31
 80011ec:	dc00      	bgt.n	80011f0 <__aeabi_dadd+0x354>
 80011ee:	e1b4      	b.n	800155a <__aeabi_dadd+0x6be>
 80011f0:	0017      	movs	r7, r2
 80011f2:	3b1f      	subs	r3, #31
 80011f4:	40df      	lsrs	r7, r3
 80011f6:	2820      	cmp	r0, #32
 80011f8:	d005      	beq.n	8001206 <__aeabi_dadd+0x36a>
 80011fa:	2340      	movs	r3, #64	@ 0x40
 80011fc:	1a1b      	subs	r3, r3, r0
 80011fe:	409a      	lsls	r2, r3
 8001200:	1e53      	subs	r3, r2, #1
 8001202:	419a      	sbcs	r2, r3
 8001204:	4317      	orrs	r7, r2
 8001206:	2400      	movs	r4, #0
 8001208:	2f00      	cmp	r7, #0
 800120a:	d00a      	beq.n	8001222 <__aeabi_dadd+0x386>
 800120c:	077b      	lsls	r3, r7, #29
 800120e:	d000      	beq.n	8001212 <__aeabi_dadd+0x376>
 8001210:	e6c4      	b.n	8000f9c <__aeabi_dadd+0x100>
 8001212:	0026      	movs	r6, r4
 8001214:	e79e      	b.n	8001154 <__aeabi_dadd+0x2b8>
 8001216:	464b      	mov	r3, r9
 8001218:	000c      	movs	r4, r1
 800121a:	08d8      	lsrs	r0, r3, #3
 800121c:	e79b      	b.n	8001156 <__aeabi_dadd+0x2ba>
 800121e:	2700      	movs	r7, #0
 8001220:	4c01      	ldr	r4, [pc, #4]	@ (8001228 <__aeabi_dadd+0x38c>)
 8001222:	2600      	movs	r6, #0
 8001224:	e783      	b.n	800112e <__aeabi_dadd+0x292>
 8001226:	46c0      	nop			@ (mov r8, r8)
 8001228:	000007ff 	.word	0x000007ff
 800122c:	ff7fffff 	.word	0xff7fffff
 8001230:	000007fe 	.word	0x000007fe
 8001234:	464b      	mov	r3, r9
 8001236:	0777      	lsls	r7, r6, #29
 8001238:	08d8      	lsrs	r0, r3, #3
 800123a:	4307      	orrs	r7, r0
 800123c:	08f0      	lsrs	r0, r6, #3
 800123e:	e791      	b.n	8001164 <__aeabi_dadd+0x2c8>
 8001240:	4fcd      	ldr	r7, [pc, #820]	@ (8001578 <__aeabi_dadd+0x6dc>)
 8001242:	1c61      	adds	r1, r4, #1
 8001244:	4239      	tst	r1, r7
 8001246:	d16b      	bne.n	8001320 <__aeabi_dadd+0x484>
 8001248:	0031      	movs	r1, r6
 800124a:	4648      	mov	r0, r9
 800124c:	4301      	orrs	r1, r0
 800124e:	2c00      	cmp	r4, #0
 8001250:	d000      	beq.n	8001254 <__aeabi_dadd+0x3b8>
 8001252:	e14b      	b.n	80014ec <__aeabi_dadd+0x650>
 8001254:	001f      	movs	r7, r3
 8001256:	4317      	orrs	r7, r2
 8001258:	2900      	cmp	r1, #0
 800125a:	d100      	bne.n	800125e <__aeabi_dadd+0x3c2>
 800125c:	e181      	b.n	8001562 <__aeabi_dadd+0x6c6>
 800125e:	2f00      	cmp	r7, #0
 8001260:	d100      	bne.n	8001264 <__aeabi_dadd+0x3c8>
 8001262:	e74c      	b.n	80010fe <__aeabi_dadd+0x262>
 8001264:	444a      	add	r2, r9
 8001266:	454a      	cmp	r2, r9
 8001268:	4180      	sbcs	r0, r0
 800126a:	18f6      	adds	r6, r6, r3
 800126c:	4240      	negs	r0, r0
 800126e:	1836      	adds	r6, r6, r0
 8001270:	0233      	lsls	r3, r6, #8
 8001272:	d500      	bpl.n	8001276 <__aeabi_dadd+0x3da>
 8001274:	e1b0      	b.n	80015d8 <__aeabi_dadd+0x73c>
 8001276:	0017      	movs	r7, r2
 8001278:	4691      	mov	r9, r2
 800127a:	4337      	orrs	r7, r6
 800127c:	d000      	beq.n	8001280 <__aeabi_dadd+0x3e4>
 800127e:	e73e      	b.n	80010fe <__aeabi_dadd+0x262>
 8001280:	2600      	movs	r6, #0
 8001282:	e754      	b.n	800112e <__aeabi_dadd+0x292>
 8001284:	4649      	mov	r1, r9
 8001286:	1a89      	subs	r1, r1, r2
 8001288:	4688      	mov	r8, r1
 800128a:	45c1      	cmp	r9, r8
 800128c:	41bf      	sbcs	r7, r7
 800128e:	1af1      	subs	r1, r6, r3
 8001290:	427f      	negs	r7, r7
 8001292:	1bc9      	subs	r1, r1, r7
 8001294:	020f      	lsls	r7, r1, #8
 8001296:	d461      	bmi.n	800135c <__aeabi_dadd+0x4c0>
 8001298:	4647      	mov	r7, r8
 800129a:	430f      	orrs	r7, r1
 800129c:	d100      	bne.n	80012a0 <__aeabi_dadd+0x404>
 800129e:	e0bd      	b.n	800141c <__aeabi_dadd+0x580>
 80012a0:	000e      	movs	r6, r1
 80012a2:	4647      	mov	r7, r8
 80012a4:	e651      	b.n	8000f4a <__aeabi_dadd+0xae>
 80012a6:	4cb5      	ldr	r4, [pc, #724]	@ (800157c <__aeabi_dadd+0x6e0>)
 80012a8:	45a0      	cmp	r8, r4
 80012aa:	d100      	bne.n	80012ae <__aeabi_dadd+0x412>
 80012ac:	e100      	b.n	80014b0 <__aeabi_dadd+0x614>
 80012ae:	2701      	movs	r7, #1
 80012b0:	2938      	cmp	r1, #56	@ 0x38
 80012b2:	dd00      	ble.n	80012b6 <__aeabi_dadd+0x41a>
 80012b4:	e6b8      	b.n	8001028 <__aeabi_dadd+0x18c>
 80012b6:	2480      	movs	r4, #128	@ 0x80
 80012b8:	0424      	lsls	r4, r4, #16
 80012ba:	4326      	orrs	r6, r4
 80012bc:	e6a3      	b.n	8001006 <__aeabi_dadd+0x16a>
 80012be:	4eb0      	ldr	r6, [pc, #704]	@ (8001580 <__aeabi_dadd+0x6e4>)
 80012c0:	1ae4      	subs	r4, r4, r3
 80012c2:	4016      	ands	r6, r2
 80012c4:	077b      	lsls	r3, r7, #29
 80012c6:	d000      	beq.n	80012ca <__aeabi_dadd+0x42e>
 80012c8:	e73f      	b.n	800114a <__aeabi_dadd+0x2ae>
 80012ca:	e743      	b.n	8001154 <__aeabi_dadd+0x2b8>
 80012cc:	000f      	movs	r7, r1
 80012ce:	0018      	movs	r0, r3
 80012d0:	3f20      	subs	r7, #32
 80012d2:	40f8      	lsrs	r0, r7
 80012d4:	4684      	mov	ip, r0
 80012d6:	2920      	cmp	r1, #32
 80012d8:	d003      	beq.n	80012e2 <__aeabi_dadd+0x446>
 80012da:	2740      	movs	r7, #64	@ 0x40
 80012dc:	1a79      	subs	r1, r7, r1
 80012de:	408b      	lsls	r3, r1
 80012e0:	431a      	orrs	r2, r3
 80012e2:	1e53      	subs	r3, r2, #1
 80012e4:	419a      	sbcs	r2, r3
 80012e6:	4663      	mov	r3, ip
 80012e8:	0017      	movs	r7, r2
 80012ea:	431f      	orrs	r7, r3
 80012ec:	e622      	b.n	8000f34 <__aeabi_dadd+0x98>
 80012ee:	48a4      	ldr	r0, [pc, #656]	@ (8001580 <__aeabi_dadd+0x6e4>)
 80012f0:	1ae1      	subs	r1, r4, r3
 80012f2:	4010      	ands	r0, r2
 80012f4:	0747      	lsls	r7, r0, #29
 80012f6:	08c0      	lsrs	r0, r0, #3
 80012f8:	e707      	b.n	800110a <__aeabi_dadd+0x26e>
 80012fa:	0034      	movs	r4, r6
 80012fc:	4648      	mov	r0, r9
 80012fe:	4304      	orrs	r4, r0
 8001300:	d100      	bne.n	8001304 <__aeabi_dadd+0x468>
 8001302:	e0fa      	b.n	80014fa <__aeabi_dadd+0x65e>
 8001304:	1e4c      	subs	r4, r1, #1
 8001306:	2901      	cmp	r1, #1
 8001308:	d100      	bne.n	800130c <__aeabi_dadd+0x470>
 800130a:	e0d7      	b.n	80014bc <__aeabi_dadd+0x620>
 800130c:	4f9b      	ldr	r7, [pc, #620]	@ (800157c <__aeabi_dadd+0x6e0>)
 800130e:	42b9      	cmp	r1, r7
 8001310:	d100      	bne.n	8001314 <__aeabi_dadd+0x478>
 8001312:	e0e2      	b.n	80014da <__aeabi_dadd+0x63e>
 8001314:	2701      	movs	r7, #1
 8001316:	2c38      	cmp	r4, #56	@ 0x38
 8001318:	dd00      	ble.n	800131c <__aeabi_dadd+0x480>
 800131a:	e74f      	b.n	80011bc <__aeabi_dadd+0x320>
 800131c:	0021      	movs	r1, r4
 800131e:	e73c      	b.n	800119a <__aeabi_dadd+0x2fe>
 8001320:	4c96      	ldr	r4, [pc, #600]	@ (800157c <__aeabi_dadd+0x6e0>)
 8001322:	42a1      	cmp	r1, r4
 8001324:	d100      	bne.n	8001328 <__aeabi_dadd+0x48c>
 8001326:	e0dd      	b.n	80014e4 <__aeabi_dadd+0x648>
 8001328:	444a      	add	r2, r9
 800132a:	454a      	cmp	r2, r9
 800132c:	4180      	sbcs	r0, r0
 800132e:	18f3      	adds	r3, r6, r3
 8001330:	4240      	negs	r0, r0
 8001332:	1818      	adds	r0, r3, r0
 8001334:	07c7      	lsls	r7, r0, #31
 8001336:	0852      	lsrs	r2, r2, #1
 8001338:	4317      	orrs	r7, r2
 800133a:	0846      	lsrs	r6, r0, #1
 800133c:	0752      	lsls	r2, r2, #29
 800133e:	d005      	beq.n	800134c <__aeabi_dadd+0x4b0>
 8001340:	220f      	movs	r2, #15
 8001342:	000c      	movs	r4, r1
 8001344:	403a      	ands	r2, r7
 8001346:	2a04      	cmp	r2, #4
 8001348:	d000      	beq.n	800134c <__aeabi_dadd+0x4b0>
 800134a:	e62c      	b.n	8000fa6 <__aeabi_dadd+0x10a>
 800134c:	0776      	lsls	r6, r6, #29
 800134e:	08ff      	lsrs	r7, r7, #3
 8001350:	4337      	orrs	r7, r6
 8001352:	0900      	lsrs	r0, r0, #4
 8001354:	e6d9      	b.n	800110a <__aeabi_dadd+0x26e>
 8001356:	2700      	movs	r7, #0
 8001358:	2600      	movs	r6, #0
 800135a:	e6e8      	b.n	800112e <__aeabi_dadd+0x292>
 800135c:	4649      	mov	r1, r9
 800135e:	1a57      	subs	r7, r2, r1
 8001360:	42ba      	cmp	r2, r7
 8001362:	4192      	sbcs	r2, r2
 8001364:	1b9e      	subs	r6, r3, r6
 8001366:	4252      	negs	r2, r2
 8001368:	4665      	mov	r5, ip
 800136a:	1ab6      	subs	r6, r6, r2
 800136c:	e5ed      	b.n	8000f4a <__aeabi_dadd+0xae>
 800136e:	2900      	cmp	r1, #0
 8001370:	d000      	beq.n	8001374 <__aeabi_dadd+0x4d8>
 8001372:	e0c6      	b.n	8001502 <__aeabi_dadd+0x666>
 8001374:	2f00      	cmp	r7, #0
 8001376:	d167      	bne.n	8001448 <__aeabi_dadd+0x5ac>
 8001378:	2680      	movs	r6, #128	@ 0x80
 800137a:	2500      	movs	r5, #0
 800137c:	4c7f      	ldr	r4, [pc, #508]	@ (800157c <__aeabi_dadd+0x6e0>)
 800137e:	0336      	lsls	r6, r6, #12
 8001380:	e6d5      	b.n	800112e <__aeabi_dadd+0x292>
 8001382:	4665      	mov	r5, ip
 8001384:	000c      	movs	r4, r1
 8001386:	001e      	movs	r6, r3
 8001388:	08d0      	lsrs	r0, r2, #3
 800138a:	e6e4      	b.n	8001156 <__aeabi_dadd+0x2ba>
 800138c:	444a      	add	r2, r9
 800138e:	454a      	cmp	r2, r9
 8001390:	4180      	sbcs	r0, r0
 8001392:	18f3      	adds	r3, r6, r3
 8001394:	4240      	negs	r0, r0
 8001396:	1818      	adds	r0, r3, r0
 8001398:	0011      	movs	r1, r2
 800139a:	0203      	lsls	r3, r0, #8
 800139c:	d400      	bmi.n	80013a0 <__aeabi_dadd+0x504>
 800139e:	e096      	b.n	80014ce <__aeabi_dadd+0x632>
 80013a0:	4b77      	ldr	r3, [pc, #476]	@ (8001580 <__aeabi_dadd+0x6e4>)
 80013a2:	0849      	lsrs	r1, r1, #1
 80013a4:	4018      	ands	r0, r3
 80013a6:	07c3      	lsls	r3, r0, #31
 80013a8:	430b      	orrs	r3, r1
 80013aa:	0844      	lsrs	r4, r0, #1
 80013ac:	0749      	lsls	r1, r1, #29
 80013ae:	d100      	bne.n	80013b2 <__aeabi_dadd+0x516>
 80013b0:	e129      	b.n	8001606 <__aeabi_dadd+0x76a>
 80013b2:	220f      	movs	r2, #15
 80013b4:	401a      	ands	r2, r3
 80013b6:	2a04      	cmp	r2, #4
 80013b8:	d100      	bne.n	80013bc <__aeabi_dadd+0x520>
 80013ba:	e0ea      	b.n	8001592 <__aeabi_dadd+0x6f6>
 80013bc:	1d1f      	adds	r7, r3, #4
 80013be:	429f      	cmp	r7, r3
 80013c0:	41b6      	sbcs	r6, r6
 80013c2:	4276      	negs	r6, r6
 80013c4:	1936      	adds	r6, r6, r4
 80013c6:	2402      	movs	r4, #2
 80013c8:	e6c4      	b.n	8001154 <__aeabi_dadd+0x2b8>
 80013ca:	4649      	mov	r1, r9
 80013cc:	1a8f      	subs	r7, r1, r2
 80013ce:	45b9      	cmp	r9, r7
 80013d0:	4180      	sbcs	r0, r0
 80013d2:	1af6      	subs	r6, r6, r3
 80013d4:	4240      	negs	r0, r0
 80013d6:	1a36      	subs	r6, r6, r0
 80013d8:	0233      	lsls	r3, r6, #8
 80013da:	d406      	bmi.n	80013ea <__aeabi_dadd+0x54e>
 80013dc:	0773      	lsls	r3, r6, #29
 80013de:	08ff      	lsrs	r7, r7, #3
 80013e0:	2101      	movs	r1, #1
 80013e2:	431f      	orrs	r7, r3
 80013e4:	08f0      	lsrs	r0, r6, #3
 80013e6:	e690      	b.n	800110a <__aeabi_dadd+0x26e>
 80013e8:	4665      	mov	r5, ip
 80013ea:	2401      	movs	r4, #1
 80013ec:	e5ab      	b.n	8000f46 <__aeabi_dadd+0xaa>
 80013ee:	464b      	mov	r3, r9
 80013f0:	0777      	lsls	r7, r6, #29
 80013f2:	08d8      	lsrs	r0, r3, #3
 80013f4:	4307      	orrs	r7, r0
 80013f6:	08f0      	lsrs	r0, r6, #3
 80013f8:	e6b4      	b.n	8001164 <__aeabi_dadd+0x2c8>
 80013fa:	000f      	movs	r7, r1
 80013fc:	0018      	movs	r0, r3
 80013fe:	3f20      	subs	r7, #32
 8001400:	40f8      	lsrs	r0, r7
 8001402:	4684      	mov	ip, r0
 8001404:	2920      	cmp	r1, #32
 8001406:	d003      	beq.n	8001410 <__aeabi_dadd+0x574>
 8001408:	2740      	movs	r7, #64	@ 0x40
 800140a:	1a79      	subs	r1, r7, r1
 800140c:	408b      	lsls	r3, r1
 800140e:	431a      	orrs	r2, r3
 8001410:	1e53      	subs	r3, r2, #1
 8001412:	419a      	sbcs	r2, r3
 8001414:	4663      	mov	r3, ip
 8001416:	0017      	movs	r7, r2
 8001418:	431f      	orrs	r7, r3
 800141a:	e635      	b.n	8001088 <__aeabi_dadd+0x1ec>
 800141c:	2500      	movs	r5, #0
 800141e:	2400      	movs	r4, #0
 8001420:	2600      	movs	r6, #0
 8001422:	e684      	b.n	800112e <__aeabi_dadd+0x292>
 8001424:	000c      	movs	r4, r1
 8001426:	0035      	movs	r5, r6
 8001428:	3c20      	subs	r4, #32
 800142a:	40e5      	lsrs	r5, r4
 800142c:	2920      	cmp	r1, #32
 800142e:	d005      	beq.n	800143c <__aeabi_dadd+0x5a0>
 8001430:	2440      	movs	r4, #64	@ 0x40
 8001432:	1a61      	subs	r1, r4, r1
 8001434:	408e      	lsls	r6, r1
 8001436:	4649      	mov	r1, r9
 8001438:	4331      	orrs	r1, r6
 800143a:	4689      	mov	r9, r1
 800143c:	4648      	mov	r0, r9
 800143e:	1e41      	subs	r1, r0, #1
 8001440:	4188      	sbcs	r0, r1
 8001442:	0007      	movs	r7, r0
 8001444:	432f      	orrs	r7, r5
 8001446:	e5ef      	b.n	8001028 <__aeabi_dadd+0x18c>
 8001448:	08d2      	lsrs	r2, r2, #3
 800144a:	075f      	lsls	r7, r3, #29
 800144c:	4665      	mov	r5, ip
 800144e:	4317      	orrs	r7, r2
 8001450:	08d8      	lsrs	r0, r3, #3
 8001452:	e687      	b.n	8001164 <__aeabi_dadd+0x2c8>
 8001454:	1a17      	subs	r7, r2, r0
 8001456:	42ba      	cmp	r2, r7
 8001458:	4192      	sbcs	r2, r2
 800145a:	1b9e      	subs	r6, r3, r6
 800145c:	4252      	negs	r2, r2
 800145e:	1ab6      	subs	r6, r6, r2
 8001460:	0233      	lsls	r3, r6, #8
 8001462:	d4c1      	bmi.n	80013e8 <__aeabi_dadd+0x54c>
 8001464:	0773      	lsls	r3, r6, #29
 8001466:	08ff      	lsrs	r7, r7, #3
 8001468:	4665      	mov	r5, ip
 800146a:	2101      	movs	r1, #1
 800146c:	431f      	orrs	r7, r3
 800146e:	08f0      	lsrs	r0, r6, #3
 8001470:	e64b      	b.n	800110a <__aeabi_dadd+0x26e>
 8001472:	2f00      	cmp	r7, #0
 8001474:	d07b      	beq.n	800156e <__aeabi_dadd+0x6d2>
 8001476:	4665      	mov	r5, ip
 8001478:	001e      	movs	r6, r3
 800147a:	4691      	mov	r9, r2
 800147c:	e63f      	b.n	80010fe <__aeabi_dadd+0x262>
 800147e:	1a81      	subs	r1, r0, r2
 8001480:	4688      	mov	r8, r1
 8001482:	45c1      	cmp	r9, r8
 8001484:	41a4      	sbcs	r4, r4
 8001486:	1af1      	subs	r1, r6, r3
 8001488:	4264      	negs	r4, r4
 800148a:	1b09      	subs	r1, r1, r4
 800148c:	2480      	movs	r4, #128	@ 0x80
 800148e:	0424      	lsls	r4, r4, #16
 8001490:	4221      	tst	r1, r4
 8001492:	d077      	beq.n	8001584 <__aeabi_dadd+0x6e8>
 8001494:	1a10      	subs	r0, r2, r0
 8001496:	4282      	cmp	r2, r0
 8001498:	4192      	sbcs	r2, r2
 800149a:	0007      	movs	r7, r0
 800149c:	1b9e      	subs	r6, r3, r6
 800149e:	4252      	negs	r2, r2
 80014a0:	1ab6      	subs	r6, r6, r2
 80014a2:	4337      	orrs	r7, r6
 80014a4:	d000      	beq.n	80014a8 <__aeabi_dadd+0x60c>
 80014a6:	e0a0      	b.n	80015ea <__aeabi_dadd+0x74e>
 80014a8:	4665      	mov	r5, ip
 80014aa:	2400      	movs	r4, #0
 80014ac:	2600      	movs	r6, #0
 80014ae:	e63e      	b.n	800112e <__aeabi_dadd+0x292>
 80014b0:	075f      	lsls	r7, r3, #29
 80014b2:	08d2      	lsrs	r2, r2, #3
 80014b4:	4665      	mov	r5, ip
 80014b6:	4317      	orrs	r7, r2
 80014b8:	08d8      	lsrs	r0, r3, #3
 80014ba:	e653      	b.n	8001164 <__aeabi_dadd+0x2c8>
 80014bc:	1881      	adds	r1, r0, r2
 80014be:	4291      	cmp	r1, r2
 80014c0:	4192      	sbcs	r2, r2
 80014c2:	18f0      	adds	r0, r6, r3
 80014c4:	4252      	negs	r2, r2
 80014c6:	1880      	adds	r0, r0, r2
 80014c8:	0203      	lsls	r3, r0, #8
 80014ca:	d500      	bpl.n	80014ce <__aeabi_dadd+0x632>
 80014cc:	e768      	b.n	80013a0 <__aeabi_dadd+0x504>
 80014ce:	0747      	lsls	r7, r0, #29
 80014d0:	08c9      	lsrs	r1, r1, #3
 80014d2:	430f      	orrs	r7, r1
 80014d4:	08c0      	lsrs	r0, r0, #3
 80014d6:	2101      	movs	r1, #1
 80014d8:	e617      	b.n	800110a <__aeabi_dadd+0x26e>
 80014da:	08d2      	lsrs	r2, r2, #3
 80014dc:	075f      	lsls	r7, r3, #29
 80014de:	4317      	orrs	r7, r2
 80014e0:	08d8      	lsrs	r0, r3, #3
 80014e2:	e63f      	b.n	8001164 <__aeabi_dadd+0x2c8>
 80014e4:	000c      	movs	r4, r1
 80014e6:	2600      	movs	r6, #0
 80014e8:	2700      	movs	r7, #0
 80014ea:	e620      	b.n	800112e <__aeabi_dadd+0x292>
 80014ec:	2900      	cmp	r1, #0
 80014ee:	d156      	bne.n	800159e <__aeabi_dadd+0x702>
 80014f0:	075f      	lsls	r7, r3, #29
 80014f2:	08d2      	lsrs	r2, r2, #3
 80014f4:	4317      	orrs	r7, r2
 80014f6:	08d8      	lsrs	r0, r3, #3
 80014f8:	e634      	b.n	8001164 <__aeabi_dadd+0x2c8>
 80014fa:	000c      	movs	r4, r1
 80014fc:	001e      	movs	r6, r3
 80014fe:	08d0      	lsrs	r0, r2, #3
 8001500:	e629      	b.n	8001156 <__aeabi_dadd+0x2ba>
 8001502:	08c1      	lsrs	r1, r0, #3
 8001504:	0770      	lsls	r0, r6, #29
 8001506:	4301      	orrs	r1, r0
 8001508:	08f0      	lsrs	r0, r6, #3
 800150a:	2f00      	cmp	r7, #0
 800150c:	d062      	beq.n	80015d4 <__aeabi_dadd+0x738>
 800150e:	2480      	movs	r4, #128	@ 0x80
 8001510:	0324      	lsls	r4, r4, #12
 8001512:	4220      	tst	r0, r4
 8001514:	d007      	beq.n	8001526 <__aeabi_dadd+0x68a>
 8001516:	08de      	lsrs	r6, r3, #3
 8001518:	4226      	tst	r6, r4
 800151a:	d104      	bne.n	8001526 <__aeabi_dadd+0x68a>
 800151c:	4665      	mov	r5, ip
 800151e:	0030      	movs	r0, r6
 8001520:	08d1      	lsrs	r1, r2, #3
 8001522:	075b      	lsls	r3, r3, #29
 8001524:	4319      	orrs	r1, r3
 8001526:	0f4f      	lsrs	r7, r1, #29
 8001528:	00c9      	lsls	r1, r1, #3
 800152a:	08c9      	lsrs	r1, r1, #3
 800152c:	077f      	lsls	r7, r7, #29
 800152e:	430f      	orrs	r7, r1
 8001530:	e618      	b.n	8001164 <__aeabi_dadd+0x2c8>
 8001532:	000c      	movs	r4, r1
 8001534:	0030      	movs	r0, r6
 8001536:	3c20      	subs	r4, #32
 8001538:	40e0      	lsrs	r0, r4
 800153a:	4684      	mov	ip, r0
 800153c:	2920      	cmp	r1, #32
 800153e:	d005      	beq.n	800154c <__aeabi_dadd+0x6b0>
 8001540:	2440      	movs	r4, #64	@ 0x40
 8001542:	1a61      	subs	r1, r4, r1
 8001544:	408e      	lsls	r6, r1
 8001546:	4649      	mov	r1, r9
 8001548:	4331      	orrs	r1, r6
 800154a:	4689      	mov	r9, r1
 800154c:	4648      	mov	r0, r9
 800154e:	1e41      	subs	r1, r0, #1
 8001550:	4188      	sbcs	r0, r1
 8001552:	4661      	mov	r1, ip
 8001554:	0007      	movs	r7, r0
 8001556:	430f      	orrs	r7, r1
 8001558:	e630      	b.n	80011bc <__aeabi_dadd+0x320>
 800155a:	2120      	movs	r1, #32
 800155c:	2700      	movs	r7, #0
 800155e:	1a09      	subs	r1, r1, r0
 8001560:	e50e      	b.n	8000f80 <__aeabi_dadd+0xe4>
 8001562:	001e      	movs	r6, r3
 8001564:	2f00      	cmp	r7, #0
 8001566:	d000      	beq.n	800156a <__aeabi_dadd+0x6ce>
 8001568:	e522      	b.n	8000fb0 <__aeabi_dadd+0x114>
 800156a:	2400      	movs	r4, #0
 800156c:	e758      	b.n	8001420 <__aeabi_dadd+0x584>
 800156e:	2500      	movs	r5, #0
 8001570:	2400      	movs	r4, #0
 8001572:	2600      	movs	r6, #0
 8001574:	e5db      	b.n	800112e <__aeabi_dadd+0x292>
 8001576:	46c0      	nop			@ (mov r8, r8)
 8001578:	000007fe 	.word	0x000007fe
 800157c:	000007ff 	.word	0x000007ff
 8001580:	ff7fffff 	.word	0xff7fffff
 8001584:	4647      	mov	r7, r8
 8001586:	430f      	orrs	r7, r1
 8001588:	d100      	bne.n	800158c <__aeabi_dadd+0x6f0>
 800158a:	e747      	b.n	800141c <__aeabi_dadd+0x580>
 800158c:	000e      	movs	r6, r1
 800158e:	46c1      	mov	r9, r8
 8001590:	e5b5      	b.n	80010fe <__aeabi_dadd+0x262>
 8001592:	08df      	lsrs	r7, r3, #3
 8001594:	0764      	lsls	r4, r4, #29
 8001596:	2102      	movs	r1, #2
 8001598:	4327      	orrs	r7, r4
 800159a:	0900      	lsrs	r0, r0, #4
 800159c:	e5b5      	b.n	800110a <__aeabi_dadd+0x26e>
 800159e:	0019      	movs	r1, r3
 80015a0:	08c0      	lsrs	r0, r0, #3
 80015a2:	0777      	lsls	r7, r6, #29
 80015a4:	4307      	orrs	r7, r0
 80015a6:	4311      	orrs	r1, r2
 80015a8:	08f0      	lsrs	r0, r6, #3
 80015aa:	2900      	cmp	r1, #0
 80015ac:	d100      	bne.n	80015b0 <__aeabi_dadd+0x714>
 80015ae:	e5d9      	b.n	8001164 <__aeabi_dadd+0x2c8>
 80015b0:	2180      	movs	r1, #128	@ 0x80
 80015b2:	0309      	lsls	r1, r1, #12
 80015b4:	4208      	tst	r0, r1
 80015b6:	d007      	beq.n	80015c8 <__aeabi_dadd+0x72c>
 80015b8:	08dc      	lsrs	r4, r3, #3
 80015ba:	420c      	tst	r4, r1
 80015bc:	d104      	bne.n	80015c8 <__aeabi_dadd+0x72c>
 80015be:	08d2      	lsrs	r2, r2, #3
 80015c0:	075b      	lsls	r3, r3, #29
 80015c2:	431a      	orrs	r2, r3
 80015c4:	0017      	movs	r7, r2
 80015c6:	0020      	movs	r0, r4
 80015c8:	0f7b      	lsrs	r3, r7, #29
 80015ca:	00ff      	lsls	r7, r7, #3
 80015cc:	08ff      	lsrs	r7, r7, #3
 80015ce:	075b      	lsls	r3, r3, #29
 80015d0:	431f      	orrs	r7, r3
 80015d2:	e5c7      	b.n	8001164 <__aeabi_dadd+0x2c8>
 80015d4:	000f      	movs	r7, r1
 80015d6:	e5c5      	b.n	8001164 <__aeabi_dadd+0x2c8>
 80015d8:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <__aeabi_dadd+0x788>)
 80015da:	08d2      	lsrs	r2, r2, #3
 80015dc:	4033      	ands	r3, r6
 80015de:	075f      	lsls	r7, r3, #29
 80015e0:	025b      	lsls	r3, r3, #9
 80015e2:	2401      	movs	r4, #1
 80015e4:	4317      	orrs	r7, r2
 80015e6:	0b1e      	lsrs	r6, r3, #12
 80015e8:	e5a1      	b.n	800112e <__aeabi_dadd+0x292>
 80015ea:	4226      	tst	r6, r4
 80015ec:	d012      	beq.n	8001614 <__aeabi_dadd+0x778>
 80015ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001624 <__aeabi_dadd+0x788>)
 80015f0:	4665      	mov	r5, ip
 80015f2:	0002      	movs	r2, r0
 80015f4:	2401      	movs	r4, #1
 80015f6:	401e      	ands	r6, r3
 80015f8:	e4e6      	b.n	8000fc8 <__aeabi_dadd+0x12c>
 80015fa:	0021      	movs	r1, r4
 80015fc:	e585      	b.n	800110a <__aeabi_dadd+0x26e>
 80015fe:	0017      	movs	r7, r2
 8001600:	e5a8      	b.n	8001154 <__aeabi_dadd+0x2b8>
 8001602:	003a      	movs	r2, r7
 8001604:	e4d4      	b.n	8000fb0 <__aeabi_dadd+0x114>
 8001606:	08db      	lsrs	r3, r3, #3
 8001608:	0764      	lsls	r4, r4, #29
 800160a:	431c      	orrs	r4, r3
 800160c:	0027      	movs	r7, r4
 800160e:	2102      	movs	r1, #2
 8001610:	0900      	lsrs	r0, r0, #4
 8001612:	e57a      	b.n	800110a <__aeabi_dadd+0x26e>
 8001614:	08c0      	lsrs	r0, r0, #3
 8001616:	0777      	lsls	r7, r6, #29
 8001618:	4307      	orrs	r7, r0
 800161a:	4665      	mov	r5, ip
 800161c:	2100      	movs	r1, #0
 800161e:	08f0      	lsrs	r0, r6, #3
 8001620:	e573      	b.n	800110a <__aeabi_dadd+0x26e>
 8001622:	46c0      	nop			@ (mov r8, r8)
 8001624:	ff7fffff 	.word	0xff7fffff

08001628 <__aeabi_ddiv>:
 8001628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162a:	46de      	mov	lr, fp
 800162c:	4645      	mov	r5, r8
 800162e:	4657      	mov	r7, sl
 8001630:	464e      	mov	r6, r9
 8001632:	b5e0      	push	{r5, r6, r7, lr}
 8001634:	b087      	sub	sp, #28
 8001636:	9200      	str	r2, [sp, #0]
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	030b      	lsls	r3, r1, #12
 800163c:	0b1b      	lsrs	r3, r3, #12
 800163e:	469b      	mov	fp, r3
 8001640:	0fca      	lsrs	r2, r1, #31
 8001642:	004b      	lsls	r3, r1, #1
 8001644:	0004      	movs	r4, r0
 8001646:	4680      	mov	r8, r0
 8001648:	0d5b      	lsrs	r3, r3, #21
 800164a:	9202      	str	r2, [sp, #8]
 800164c:	d100      	bne.n	8001650 <__aeabi_ddiv+0x28>
 800164e:	e098      	b.n	8001782 <__aeabi_ddiv+0x15a>
 8001650:	4a7c      	ldr	r2, [pc, #496]	@ (8001844 <__aeabi_ddiv+0x21c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d037      	beq.n	80016c6 <__aeabi_ddiv+0x9e>
 8001656:	4659      	mov	r1, fp
 8001658:	0f42      	lsrs	r2, r0, #29
 800165a:	00c9      	lsls	r1, r1, #3
 800165c:	430a      	orrs	r2, r1
 800165e:	2180      	movs	r1, #128	@ 0x80
 8001660:	0409      	lsls	r1, r1, #16
 8001662:	4311      	orrs	r1, r2
 8001664:	00c2      	lsls	r2, r0, #3
 8001666:	4690      	mov	r8, r2
 8001668:	4a77      	ldr	r2, [pc, #476]	@ (8001848 <__aeabi_ddiv+0x220>)
 800166a:	4689      	mov	r9, r1
 800166c:	4692      	mov	sl, r2
 800166e:	449a      	add	sl, r3
 8001670:	2300      	movs	r3, #0
 8001672:	2400      	movs	r4, #0
 8001674:	9303      	str	r3, [sp, #12]
 8001676:	9e00      	ldr	r6, [sp, #0]
 8001678:	9f01      	ldr	r7, [sp, #4]
 800167a:	033b      	lsls	r3, r7, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	007b      	lsls	r3, r7, #1
 8001682:	0030      	movs	r0, r6
 8001684:	0d5b      	lsrs	r3, r3, #21
 8001686:	0ffd      	lsrs	r5, r7, #31
 8001688:	2b00      	cmp	r3, #0
 800168a:	d059      	beq.n	8001740 <__aeabi_ddiv+0x118>
 800168c:	4a6d      	ldr	r2, [pc, #436]	@ (8001844 <__aeabi_ddiv+0x21c>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d048      	beq.n	8001724 <__aeabi_ddiv+0xfc>
 8001692:	4659      	mov	r1, fp
 8001694:	0f72      	lsrs	r2, r6, #29
 8001696:	00c9      	lsls	r1, r1, #3
 8001698:	430a      	orrs	r2, r1
 800169a:	2180      	movs	r1, #128	@ 0x80
 800169c:	0409      	lsls	r1, r1, #16
 800169e:	4311      	orrs	r1, r2
 80016a0:	468b      	mov	fp, r1
 80016a2:	4969      	ldr	r1, [pc, #420]	@ (8001848 <__aeabi_ddiv+0x220>)
 80016a4:	00f2      	lsls	r2, r6, #3
 80016a6:	468c      	mov	ip, r1
 80016a8:	4651      	mov	r1, sl
 80016aa:	4463      	add	r3, ip
 80016ac:	1acb      	subs	r3, r1, r3
 80016ae:	469a      	mov	sl, r3
 80016b0:	2100      	movs	r1, #0
 80016b2:	9e02      	ldr	r6, [sp, #8]
 80016b4:	406e      	eors	r6, r5
 80016b6:	b2f6      	uxtb	r6, r6
 80016b8:	2c0f      	cmp	r4, #15
 80016ba:	d900      	bls.n	80016be <__aeabi_ddiv+0x96>
 80016bc:	e0ce      	b.n	800185c <__aeabi_ddiv+0x234>
 80016be:	4b63      	ldr	r3, [pc, #396]	@ (800184c <__aeabi_ddiv+0x224>)
 80016c0:	00a4      	lsls	r4, r4, #2
 80016c2:	591b      	ldr	r3, [r3, r4]
 80016c4:	469f      	mov	pc, r3
 80016c6:	465a      	mov	r2, fp
 80016c8:	4302      	orrs	r2, r0
 80016ca:	4691      	mov	r9, r2
 80016cc:	d000      	beq.n	80016d0 <__aeabi_ddiv+0xa8>
 80016ce:	e090      	b.n	80017f2 <__aeabi_ddiv+0x1ca>
 80016d0:	469a      	mov	sl, r3
 80016d2:	2302      	movs	r3, #2
 80016d4:	4690      	mov	r8, r2
 80016d6:	2408      	movs	r4, #8
 80016d8:	9303      	str	r3, [sp, #12]
 80016da:	e7cc      	b.n	8001676 <__aeabi_ddiv+0x4e>
 80016dc:	46cb      	mov	fp, r9
 80016de:	4642      	mov	r2, r8
 80016e0:	9d02      	ldr	r5, [sp, #8]
 80016e2:	9903      	ldr	r1, [sp, #12]
 80016e4:	2902      	cmp	r1, #2
 80016e6:	d100      	bne.n	80016ea <__aeabi_ddiv+0xc2>
 80016e8:	e1de      	b.n	8001aa8 <__aeabi_ddiv+0x480>
 80016ea:	2903      	cmp	r1, #3
 80016ec:	d100      	bne.n	80016f0 <__aeabi_ddiv+0xc8>
 80016ee:	e08d      	b.n	800180c <__aeabi_ddiv+0x1e4>
 80016f0:	2901      	cmp	r1, #1
 80016f2:	d000      	beq.n	80016f6 <__aeabi_ddiv+0xce>
 80016f4:	e179      	b.n	80019ea <__aeabi_ddiv+0x3c2>
 80016f6:	002e      	movs	r6, r5
 80016f8:	2200      	movs	r2, #0
 80016fa:	2300      	movs	r3, #0
 80016fc:	2400      	movs	r4, #0
 80016fe:	4690      	mov	r8, r2
 8001700:	051b      	lsls	r3, r3, #20
 8001702:	4323      	orrs	r3, r4
 8001704:	07f6      	lsls	r6, r6, #31
 8001706:	4333      	orrs	r3, r6
 8001708:	4640      	mov	r0, r8
 800170a:	0019      	movs	r1, r3
 800170c:	b007      	add	sp, #28
 800170e:	bcf0      	pop	{r4, r5, r6, r7}
 8001710:	46bb      	mov	fp, r7
 8001712:	46b2      	mov	sl, r6
 8001714:	46a9      	mov	r9, r5
 8001716:	46a0      	mov	r8, r4
 8001718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800171a:	2200      	movs	r2, #0
 800171c:	2400      	movs	r4, #0
 800171e:	4690      	mov	r8, r2
 8001720:	4b48      	ldr	r3, [pc, #288]	@ (8001844 <__aeabi_ddiv+0x21c>)
 8001722:	e7ed      	b.n	8001700 <__aeabi_ddiv+0xd8>
 8001724:	465a      	mov	r2, fp
 8001726:	9b00      	ldr	r3, [sp, #0]
 8001728:	431a      	orrs	r2, r3
 800172a:	4b49      	ldr	r3, [pc, #292]	@ (8001850 <__aeabi_ddiv+0x228>)
 800172c:	469c      	mov	ip, r3
 800172e:	44e2      	add	sl, ip
 8001730:	2a00      	cmp	r2, #0
 8001732:	d159      	bne.n	80017e8 <__aeabi_ddiv+0x1c0>
 8001734:	2302      	movs	r3, #2
 8001736:	431c      	orrs	r4, r3
 8001738:	2300      	movs	r3, #0
 800173a:	2102      	movs	r1, #2
 800173c:	469b      	mov	fp, r3
 800173e:	e7b8      	b.n	80016b2 <__aeabi_ddiv+0x8a>
 8001740:	465a      	mov	r2, fp
 8001742:	9b00      	ldr	r3, [sp, #0]
 8001744:	431a      	orrs	r2, r3
 8001746:	d049      	beq.n	80017dc <__aeabi_ddiv+0x1b4>
 8001748:	465b      	mov	r3, fp
 800174a:	2b00      	cmp	r3, #0
 800174c:	d100      	bne.n	8001750 <__aeabi_ddiv+0x128>
 800174e:	e19c      	b.n	8001a8a <__aeabi_ddiv+0x462>
 8001750:	4658      	mov	r0, fp
 8001752:	f001 fb8b 	bl	8002e6c <__clzsi2>
 8001756:	0002      	movs	r2, r0
 8001758:	0003      	movs	r3, r0
 800175a:	3a0b      	subs	r2, #11
 800175c:	271d      	movs	r7, #29
 800175e:	9e00      	ldr	r6, [sp, #0]
 8001760:	1aba      	subs	r2, r7, r2
 8001762:	0019      	movs	r1, r3
 8001764:	4658      	mov	r0, fp
 8001766:	40d6      	lsrs	r6, r2
 8001768:	3908      	subs	r1, #8
 800176a:	4088      	lsls	r0, r1
 800176c:	0032      	movs	r2, r6
 800176e:	4302      	orrs	r2, r0
 8001770:	4693      	mov	fp, r2
 8001772:	9a00      	ldr	r2, [sp, #0]
 8001774:	408a      	lsls	r2, r1
 8001776:	4937      	ldr	r1, [pc, #220]	@ (8001854 <__aeabi_ddiv+0x22c>)
 8001778:	4453      	add	r3, sl
 800177a:	468a      	mov	sl, r1
 800177c:	2100      	movs	r1, #0
 800177e:	449a      	add	sl, r3
 8001780:	e797      	b.n	80016b2 <__aeabi_ddiv+0x8a>
 8001782:	465b      	mov	r3, fp
 8001784:	4303      	orrs	r3, r0
 8001786:	4699      	mov	r9, r3
 8001788:	d021      	beq.n	80017ce <__aeabi_ddiv+0x1a6>
 800178a:	465b      	mov	r3, fp
 800178c:	2b00      	cmp	r3, #0
 800178e:	d100      	bne.n	8001792 <__aeabi_ddiv+0x16a>
 8001790:	e169      	b.n	8001a66 <__aeabi_ddiv+0x43e>
 8001792:	4658      	mov	r0, fp
 8001794:	f001 fb6a 	bl	8002e6c <__clzsi2>
 8001798:	230b      	movs	r3, #11
 800179a:	425b      	negs	r3, r3
 800179c:	469c      	mov	ip, r3
 800179e:	0002      	movs	r2, r0
 80017a0:	4484      	add	ip, r0
 80017a2:	4666      	mov	r6, ip
 80017a4:	231d      	movs	r3, #29
 80017a6:	1b9b      	subs	r3, r3, r6
 80017a8:	0026      	movs	r6, r4
 80017aa:	0011      	movs	r1, r2
 80017ac:	4658      	mov	r0, fp
 80017ae:	40de      	lsrs	r6, r3
 80017b0:	3908      	subs	r1, #8
 80017b2:	4088      	lsls	r0, r1
 80017b4:	0033      	movs	r3, r6
 80017b6:	4303      	orrs	r3, r0
 80017b8:	4699      	mov	r9, r3
 80017ba:	0023      	movs	r3, r4
 80017bc:	408b      	lsls	r3, r1
 80017be:	4698      	mov	r8, r3
 80017c0:	4b25      	ldr	r3, [pc, #148]	@ (8001858 <__aeabi_ddiv+0x230>)
 80017c2:	2400      	movs	r4, #0
 80017c4:	1a9b      	subs	r3, r3, r2
 80017c6:	469a      	mov	sl, r3
 80017c8:	2300      	movs	r3, #0
 80017ca:	9303      	str	r3, [sp, #12]
 80017cc:	e753      	b.n	8001676 <__aeabi_ddiv+0x4e>
 80017ce:	2300      	movs	r3, #0
 80017d0:	4698      	mov	r8, r3
 80017d2:	469a      	mov	sl, r3
 80017d4:	3301      	adds	r3, #1
 80017d6:	2404      	movs	r4, #4
 80017d8:	9303      	str	r3, [sp, #12]
 80017da:	e74c      	b.n	8001676 <__aeabi_ddiv+0x4e>
 80017dc:	2301      	movs	r3, #1
 80017de:	431c      	orrs	r4, r3
 80017e0:	2300      	movs	r3, #0
 80017e2:	2101      	movs	r1, #1
 80017e4:	469b      	mov	fp, r3
 80017e6:	e764      	b.n	80016b2 <__aeabi_ddiv+0x8a>
 80017e8:	2303      	movs	r3, #3
 80017ea:	0032      	movs	r2, r6
 80017ec:	2103      	movs	r1, #3
 80017ee:	431c      	orrs	r4, r3
 80017f0:	e75f      	b.n	80016b2 <__aeabi_ddiv+0x8a>
 80017f2:	469a      	mov	sl, r3
 80017f4:	2303      	movs	r3, #3
 80017f6:	46d9      	mov	r9, fp
 80017f8:	240c      	movs	r4, #12
 80017fa:	9303      	str	r3, [sp, #12]
 80017fc:	e73b      	b.n	8001676 <__aeabi_ddiv+0x4e>
 80017fe:	2300      	movs	r3, #0
 8001800:	2480      	movs	r4, #128	@ 0x80
 8001802:	4698      	mov	r8, r3
 8001804:	2600      	movs	r6, #0
 8001806:	4b0f      	ldr	r3, [pc, #60]	@ (8001844 <__aeabi_ddiv+0x21c>)
 8001808:	0324      	lsls	r4, r4, #12
 800180a:	e779      	b.n	8001700 <__aeabi_ddiv+0xd8>
 800180c:	2480      	movs	r4, #128	@ 0x80
 800180e:	465b      	mov	r3, fp
 8001810:	0324      	lsls	r4, r4, #12
 8001812:	431c      	orrs	r4, r3
 8001814:	0324      	lsls	r4, r4, #12
 8001816:	002e      	movs	r6, r5
 8001818:	4690      	mov	r8, r2
 800181a:	4b0a      	ldr	r3, [pc, #40]	@ (8001844 <__aeabi_ddiv+0x21c>)
 800181c:	0b24      	lsrs	r4, r4, #12
 800181e:	e76f      	b.n	8001700 <__aeabi_ddiv+0xd8>
 8001820:	2480      	movs	r4, #128	@ 0x80
 8001822:	464b      	mov	r3, r9
 8001824:	0324      	lsls	r4, r4, #12
 8001826:	4223      	tst	r3, r4
 8001828:	d002      	beq.n	8001830 <__aeabi_ddiv+0x208>
 800182a:	465b      	mov	r3, fp
 800182c:	4223      	tst	r3, r4
 800182e:	d0f0      	beq.n	8001812 <__aeabi_ddiv+0x1ea>
 8001830:	2480      	movs	r4, #128	@ 0x80
 8001832:	464b      	mov	r3, r9
 8001834:	0324      	lsls	r4, r4, #12
 8001836:	431c      	orrs	r4, r3
 8001838:	0324      	lsls	r4, r4, #12
 800183a:	9e02      	ldr	r6, [sp, #8]
 800183c:	4b01      	ldr	r3, [pc, #4]	@ (8001844 <__aeabi_ddiv+0x21c>)
 800183e:	0b24      	lsrs	r4, r4, #12
 8001840:	e75e      	b.n	8001700 <__aeabi_ddiv+0xd8>
 8001842:	46c0      	nop			@ (mov r8, r8)
 8001844:	000007ff 	.word	0x000007ff
 8001848:	fffffc01 	.word	0xfffffc01
 800184c:	0800a8e4 	.word	0x0800a8e4
 8001850:	fffff801 	.word	0xfffff801
 8001854:	000003f3 	.word	0x000003f3
 8001858:	fffffc0d 	.word	0xfffffc0d
 800185c:	45cb      	cmp	fp, r9
 800185e:	d200      	bcs.n	8001862 <__aeabi_ddiv+0x23a>
 8001860:	e0f8      	b.n	8001a54 <__aeabi_ddiv+0x42c>
 8001862:	d100      	bne.n	8001866 <__aeabi_ddiv+0x23e>
 8001864:	e0f3      	b.n	8001a4e <__aeabi_ddiv+0x426>
 8001866:	2301      	movs	r3, #1
 8001868:	425b      	negs	r3, r3
 800186a:	469c      	mov	ip, r3
 800186c:	4644      	mov	r4, r8
 800186e:	4648      	mov	r0, r9
 8001870:	2500      	movs	r5, #0
 8001872:	44e2      	add	sl, ip
 8001874:	465b      	mov	r3, fp
 8001876:	0e17      	lsrs	r7, r2, #24
 8001878:	021b      	lsls	r3, r3, #8
 800187a:	431f      	orrs	r7, r3
 800187c:	0c19      	lsrs	r1, r3, #16
 800187e:	043b      	lsls	r3, r7, #16
 8001880:	0212      	lsls	r2, r2, #8
 8001882:	9700      	str	r7, [sp, #0]
 8001884:	0c1f      	lsrs	r7, r3, #16
 8001886:	4691      	mov	r9, r2
 8001888:	9102      	str	r1, [sp, #8]
 800188a:	9703      	str	r7, [sp, #12]
 800188c:	f7fe fcde 	bl	800024c <__aeabi_uidivmod>
 8001890:	0002      	movs	r2, r0
 8001892:	437a      	muls	r2, r7
 8001894:	040b      	lsls	r3, r1, #16
 8001896:	0c21      	lsrs	r1, r4, #16
 8001898:	4680      	mov	r8, r0
 800189a:	4319      	orrs	r1, r3
 800189c:	428a      	cmp	r2, r1
 800189e:	d909      	bls.n	80018b4 <__aeabi_ddiv+0x28c>
 80018a0:	9f00      	ldr	r7, [sp, #0]
 80018a2:	2301      	movs	r3, #1
 80018a4:	46bc      	mov	ip, r7
 80018a6:	425b      	negs	r3, r3
 80018a8:	4461      	add	r1, ip
 80018aa:	469c      	mov	ip, r3
 80018ac:	44e0      	add	r8, ip
 80018ae:	428f      	cmp	r7, r1
 80018b0:	d800      	bhi.n	80018b4 <__aeabi_ddiv+0x28c>
 80018b2:	e15c      	b.n	8001b6e <__aeabi_ddiv+0x546>
 80018b4:	1a88      	subs	r0, r1, r2
 80018b6:	9902      	ldr	r1, [sp, #8]
 80018b8:	f7fe fcc8 	bl	800024c <__aeabi_uidivmod>
 80018bc:	9a03      	ldr	r2, [sp, #12]
 80018be:	0424      	lsls	r4, r4, #16
 80018c0:	4342      	muls	r2, r0
 80018c2:	0409      	lsls	r1, r1, #16
 80018c4:	0c24      	lsrs	r4, r4, #16
 80018c6:	0003      	movs	r3, r0
 80018c8:	430c      	orrs	r4, r1
 80018ca:	42a2      	cmp	r2, r4
 80018cc:	d906      	bls.n	80018dc <__aeabi_ddiv+0x2b4>
 80018ce:	9900      	ldr	r1, [sp, #0]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	468c      	mov	ip, r1
 80018d4:	4464      	add	r4, ip
 80018d6:	42a1      	cmp	r1, r4
 80018d8:	d800      	bhi.n	80018dc <__aeabi_ddiv+0x2b4>
 80018da:	e142      	b.n	8001b62 <__aeabi_ddiv+0x53a>
 80018dc:	1aa0      	subs	r0, r4, r2
 80018de:	4642      	mov	r2, r8
 80018e0:	0412      	lsls	r2, r2, #16
 80018e2:	431a      	orrs	r2, r3
 80018e4:	4693      	mov	fp, r2
 80018e6:	464b      	mov	r3, r9
 80018e8:	4659      	mov	r1, fp
 80018ea:	0c1b      	lsrs	r3, r3, #16
 80018ec:	001f      	movs	r7, r3
 80018ee:	9304      	str	r3, [sp, #16]
 80018f0:	040b      	lsls	r3, r1, #16
 80018f2:	4649      	mov	r1, r9
 80018f4:	0409      	lsls	r1, r1, #16
 80018f6:	0c09      	lsrs	r1, r1, #16
 80018f8:	000c      	movs	r4, r1
 80018fa:	0c1b      	lsrs	r3, r3, #16
 80018fc:	435c      	muls	r4, r3
 80018fe:	0c12      	lsrs	r2, r2, #16
 8001900:	437b      	muls	r3, r7
 8001902:	4688      	mov	r8, r1
 8001904:	4351      	muls	r1, r2
 8001906:	437a      	muls	r2, r7
 8001908:	0c27      	lsrs	r7, r4, #16
 800190a:	46bc      	mov	ip, r7
 800190c:	185b      	adds	r3, r3, r1
 800190e:	4463      	add	r3, ip
 8001910:	4299      	cmp	r1, r3
 8001912:	d903      	bls.n	800191c <__aeabi_ddiv+0x2f4>
 8001914:	2180      	movs	r1, #128	@ 0x80
 8001916:	0249      	lsls	r1, r1, #9
 8001918:	468c      	mov	ip, r1
 800191a:	4462      	add	r2, ip
 800191c:	0c19      	lsrs	r1, r3, #16
 800191e:	0424      	lsls	r4, r4, #16
 8001920:	041b      	lsls	r3, r3, #16
 8001922:	0c24      	lsrs	r4, r4, #16
 8001924:	188a      	adds	r2, r1, r2
 8001926:	191c      	adds	r4, r3, r4
 8001928:	4290      	cmp	r0, r2
 800192a:	d302      	bcc.n	8001932 <__aeabi_ddiv+0x30a>
 800192c:	d116      	bne.n	800195c <__aeabi_ddiv+0x334>
 800192e:	42a5      	cmp	r5, r4
 8001930:	d214      	bcs.n	800195c <__aeabi_ddiv+0x334>
 8001932:	465b      	mov	r3, fp
 8001934:	9f00      	ldr	r7, [sp, #0]
 8001936:	3b01      	subs	r3, #1
 8001938:	444d      	add	r5, r9
 800193a:	9305      	str	r3, [sp, #20]
 800193c:	454d      	cmp	r5, r9
 800193e:	419b      	sbcs	r3, r3
 8001940:	46bc      	mov	ip, r7
 8001942:	425b      	negs	r3, r3
 8001944:	4463      	add	r3, ip
 8001946:	18c0      	adds	r0, r0, r3
 8001948:	4287      	cmp	r7, r0
 800194a:	d300      	bcc.n	800194e <__aeabi_ddiv+0x326>
 800194c:	e102      	b.n	8001b54 <__aeabi_ddiv+0x52c>
 800194e:	4282      	cmp	r2, r0
 8001950:	d900      	bls.n	8001954 <__aeabi_ddiv+0x32c>
 8001952:	e129      	b.n	8001ba8 <__aeabi_ddiv+0x580>
 8001954:	d100      	bne.n	8001958 <__aeabi_ddiv+0x330>
 8001956:	e124      	b.n	8001ba2 <__aeabi_ddiv+0x57a>
 8001958:	9b05      	ldr	r3, [sp, #20]
 800195a:	469b      	mov	fp, r3
 800195c:	1b2c      	subs	r4, r5, r4
 800195e:	42a5      	cmp	r5, r4
 8001960:	41ad      	sbcs	r5, r5
 8001962:	9b00      	ldr	r3, [sp, #0]
 8001964:	1a80      	subs	r0, r0, r2
 8001966:	426d      	negs	r5, r5
 8001968:	1b40      	subs	r0, r0, r5
 800196a:	4283      	cmp	r3, r0
 800196c:	d100      	bne.n	8001970 <__aeabi_ddiv+0x348>
 800196e:	e10f      	b.n	8001b90 <__aeabi_ddiv+0x568>
 8001970:	9902      	ldr	r1, [sp, #8]
 8001972:	f7fe fc6b 	bl	800024c <__aeabi_uidivmod>
 8001976:	9a03      	ldr	r2, [sp, #12]
 8001978:	040b      	lsls	r3, r1, #16
 800197a:	4342      	muls	r2, r0
 800197c:	0c21      	lsrs	r1, r4, #16
 800197e:	0005      	movs	r5, r0
 8001980:	4319      	orrs	r1, r3
 8001982:	428a      	cmp	r2, r1
 8001984:	d900      	bls.n	8001988 <__aeabi_ddiv+0x360>
 8001986:	e0cb      	b.n	8001b20 <__aeabi_ddiv+0x4f8>
 8001988:	1a88      	subs	r0, r1, r2
 800198a:	9902      	ldr	r1, [sp, #8]
 800198c:	f7fe fc5e 	bl	800024c <__aeabi_uidivmod>
 8001990:	9a03      	ldr	r2, [sp, #12]
 8001992:	0424      	lsls	r4, r4, #16
 8001994:	4342      	muls	r2, r0
 8001996:	0409      	lsls	r1, r1, #16
 8001998:	0c24      	lsrs	r4, r4, #16
 800199a:	0003      	movs	r3, r0
 800199c:	430c      	orrs	r4, r1
 800199e:	42a2      	cmp	r2, r4
 80019a0:	d900      	bls.n	80019a4 <__aeabi_ddiv+0x37c>
 80019a2:	e0ca      	b.n	8001b3a <__aeabi_ddiv+0x512>
 80019a4:	4641      	mov	r1, r8
 80019a6:	1aa4      	subs	r4, r4, r2
 80019a8:	042a      	lsls	r2, r5, #16
 80019aa:	431a      	orrs	r2, r3
 80019ac:	9f04      	ldr	r7, [sp, #16]
 80019ae:	0413      	lsls	r3, r2, #16
 80019b0:	0c1b      	lsrs	r3, r3, #16
 80019b2:	4359      	muls	r1, r3
 80019b4:	4640      	mov	r0, r8
 80019b6:	437b      	muls	r3, r7
 80019b8:	469c      	mov	ip, r3
 80019ba:	0c15      	lsrs	r5, r2, #16
 80019bc:	4368      	muls	r0, r5
 80019be:	0c0b      	lsrs	r3, r1, #16
 80019c0:	4484      	add	ip, r0
 80019c2:	4463      	add	r3, ip
 80019c4:	437d      	muls	r5, r7
 80019c6:	4298      	cmp	r0, r3
 80019c8:	d903      	bls.n	80019d2 <__aeabi_ddiv+0x3aa>
 80019ca:	2080      	movs	r0, #128	@ 0x80
 80019cc:	0240      	lsls	r0, r0, #9
 80019ce:	4684      	mov	ip, r0
 80019d0:	4465      	add	r5, ip
 80019d2:	0c18      	lsrs	r0, r3, #16
 80019d4:	0409      	lsls	r1, r1, #16
 80019d6:	041b      	lsls	r3, r3, #16
 80019d8:	0c09      	lsrs	r1, r1, #16
 80019da:	1940      	adds	r0, r0, r5
 80019dc:	185b      	adds	r3, r3, r1
 80019de:	4284      	cmp	r4, r0
 80019e0:	d327      	bcc.n	8001a32 <__aeabi_ddiv+0x40a>
 80019e2:	d023      	beq.n	8001a2c <__aeabi_ddiv+0x404>
 80019e4:	2301      	movs	r3, #1
 80019e6:	0035      	movs	r5, r6
 80019e8:	431a      	orrs	r2, r3
 80019ea:	4b94      	ldr	r3, [pc, #592]	@ (8001c3c <__aeabi_ddiv+0x614>)
 80019ec:	4453      	add	r3, sl
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	dd60      	ble.n	8001ab4 <__aeabi_ddiv+0x48c>
 80019f2:	0751      	lsls	r1, r2, #29
 80019f4:	d000      	beq.n	80019f8 <__aeabi_ddiv+0x3d0>
 80019f6:	e086      	b.n	8001b06 <__aeabi_ddiv+0x4de>
 80019f8:	002e      	movs	r6, r5
 80019fa:	08d1      	lsrs	r1, r2, #3
 80019fc:	465a      	mov	r2, fp
 80019fe:	01d2      	lsls	r2, r2, #7
 8001a00:	d506      	bpl.n	8001a10 <__aeabi_ddiv+0x3e8>
 8001a02:	465a      	mov	r2, fp
 8001a04:	4b8e      	ldr	r3, [pc, #568]	@ (8001c40 <__aeabi_ddiv+0x618>)
 8001a06:	401a      	ands	r2, r3
 8001a08:	2380      	movs	r3, #128	@ 0x80
 8001a0a:	4693      	mov	fp, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4453      	add	r3, sl
 8001a10:	4a8c      	ldr	r2, [pc, #560]	@ (8001c44 <__aeabi_ddiv+0x61c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	dd00      	ble.n	8001a18 <__aeabi_ddiv+0x3f0>
 8001a16:	e680      	b.n	800171a <__aeabi_ddiv+0xf2>
 8001a18:	465a      	mov	r2, fp
 8001a1a:	0752      	lsls	r2, r2, #29
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	4690      	mov	r8, r2
 8001a20:	465a      	mov	r2, fp
 8001a22:	055b      	lsls	r3, r3, #21
 8001a24:	0254      	lsls	r4, r2, #9
 8001a26:	0b24      	lsrs	r4, r4, #12
 8001a28:	0d5b      	lsrs	r3, r3, #21
 8001a2a:	e669      	b.n	8001700 <__aeabi_ddiv+0xd8>
 8001a2c:	0035      	movs	r5, r6
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0db      	beq.n	80019ea <__aeabi_ddiv+0x3c2>
 8001a32:	9d00      	ldr	r5, [sp, #0]
 8001a34:	1e51      	subs	r1, r2, #1
 8001a36:	46ac      	mov	ip, r5
 8001a38:	4464      	add	r4, ip
 8001a3a:	42ac      	cmp	r4, r5
 8001a3c:	d200      	bcs.n	8001a40 <__aeabi_ddiv+0x418>
 8001a3e:	e09e      	b.n	8001b7e <__aeabi_ddiv+0x556>
 8001a40:	4284      	cmp	r4, r0
 8001a42:	d200      	bcs.n	8001a46 <__aeabi_ddiv+0x41e>
 8001a44:	e0e1      	b.n	8001c0a <__aeabi_ddiv+0x5e2>
 8001a46:	d100      	bne.n	8001a4a <__aeabi_ddiv+0x422>
 8001a48:	e0ee      	b.n	8001c28 <__aeabi_ddiv+0x600>
 8001a4a:	000a      	movs	r2, r1
 8001a4c:	e7ca      	b.n	80019e4 <__aeabi_ddiv+0x3bc>
 8001a4e:	4542      	cmp	r2, r8
 8001a50:	d900      	bls.n	8001a54 <__aeabi_ddiv+0x42c>
 8001a52:	e708      	b.n	8001866 <__aeabi_ddiv+0x23e>
 8001a54:	464b      	mov	r3, r9
 8001a56:	07dc      	lsls	r4, r3, #31
 8001a58:	0858      	lsrs	r0, r3, #1
 8001a5a:	4643      	mov	r3, r8
 8001a5c:	085b      	lsrs	r3, r3, #1
 8001a5e:	431c      	orrs	r4, r3
 8001a60:	4643      	mov	r3, r8
 8001a62:	07dd      	lsls	r5, r3, #31
 8001a64:	e706      	b.n	8001874 <__aeabi_ddiv+0x24c>
 8001a66:	f001 fa01 	bl	8002e6c <__clzsi2>
 8001a6a:	2315      	movs	r3, #21
 8001a6c:	469c      	mov	ip, r3
 8001a6e:	4484      	add	ip, r0
 8001a70:	0002      	movs	r2, r0
 8001a72:	4663      	mov	r3, ip
 8001a74:	3220      	adds	r2, #32
 8001a76:	2b1c      	cmp	r3, #28
 8001a78:	dc00      	bgt.n	8001a7c <__aeabi_ddiv+0x454>
 8001a7a:	e692      	b.n	80017a2 <__aeabi_ddiv+0x17a>
 8001a7c:	0023      	movs	r3, r4
 8001a7e:	3808      	subs	r0, #8
 8001a80:	4083      	lsls	r3, r0
 8001a82:	4699      	mov	r9, r3
 8001a84:	2300      	movs	r3, #0
 8001a86:	4698      	mov	r8, r3
 8001a88:	e69a      	b.n	80017c0 <__aeabi_ddiv+0x198>
 8001a8a:	f001 f9ef 	bl	8002e6c <__clzsi2>
 8001a8e:	0002      	movs	r2, r0
 8001a90:	0003      	movs	r3, r0
 8001a92:	3215      	adds	r2, #21
 8001a94:	3320      	adds	r3, #32
 8001a96:	2a1c      	cmp	r2, #28
 8001a98:	dc00      	bgt.n	8001a9c <__aeabi_ddiv+0x474>
 8001a9a:	e65f      	b.n	800175c <__aeabi_ddiv+0x134>
 8001a9c:	9900      	ldr	r1, [sp, #0]
 8001a9e:	3808      	subs	r0, #8
 8001aa0:	4081      	lsls	r1, r0
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	468b      	mov	fp, r1
 8001aa6:	e666      	b.n	8001776 <__aeabi_ddiv+0x14e>
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	002e      	movs	r6, r5
 8001aac:	2400      	movs	r4, #0
 8001aae:	4690      	mov	r8, r2
 8001ab0:	4b65      	ldr	r3, [pc, #404]	@ (8001c48 <__aeabi_ddiv+0x620>)
 8001ab2:	e625      	b.n	8001700 <__aeabi_ddiv+0xd8>
 8001ab4:	002e      	movs	r6, r5
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	1ac9      	subs	r1, r1, r3
 8001aba:	2938      	cmp	r1, #56	@ 0x38
 8001abc:	dd00      	ble.n	8001ac0 <__aeabi_ddiv+0x498>
 8001abe:	e61b      	b.n	80016f8 <__aeabi_ddiv+0xd0>
 8001ac0:	291f      	cmp	r1, #31
 8001ac2:	dc7e      	bgt.n	8001bc2 <__aeabi_ddiv+0x59a>
 8001ac4:	4861      	ldr	r0, [pc, #388]	@ (8001c4c <__aeabi_ddiv+0x624>)
 8001ac6:	0014      	movs	r4, r2
 8001ac8:	4450      	add	r0, sl
 8001aca:	465b      	mov	r3, fp
 8001acc:	4082      	lsls	r2, r0
 8001ace:	4083      	lsls	r3, r0
 8001ad0:	40cc      	lsrs	r4, r1
 8001ad2:	1e50      	subs	r0, r2, #1
 8001ad4:	4182      	sbcs	r2, r0
 8001ad6:	4323      	orrs	r3, r4
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	465b      	mov	r3, fp
 8001adc:	40cb      	lsrs	r3, r1
 8001ade:	0751      	lsls	r1, r2, #29
 8001ae0:	d009      	beq.n	8001af6 <__aeabi_ddiv+0x4ce>
 8001ae2:	210f      	movs	r1, #15
 8001ae4:	4011      	ands	r1, r2
 8001ae6:	2904      	cmp	r1, #4
 8001ae8:	d005      	beq.n	8001af6 <__aeabi_ddiv+0x4ce>
 8001aea:	1d11      	adds	r1, r2, #4
 8001aec:	4291      	cmp	r1, r2
 8001aee:	4192      	sbcs	r2, r2
 8001af0:	4252      	negs	r2, r2
 8001af2:	189b      	adds	r3, r3, r2
 8001af4:	000a      	movs	r2, r1
 8001af6:	0219      	lsls	r1, r3, #8
 8001af8:	d400      	bmi.n	8001afc <__aeabi_ddiv+0x4d4>
 8001afa:	e09b      	b.n	8001c34 <__aeabi_ddiv+0x60c>
 8001afc:	2200      	movs	r2, #0
 8001afe:	2301      	movs	r3, #1
 8001b00:	2400      	movs	r4, #0
 8001b02:	4690      	mov	r8, r2
 8001b04:	e5fc      	b.n	8001700 <__aeabi_ddiv+0xd8>
 8001b06:	210f      	movs	r1, #15
 8001b08:	4011      	ands	r1, r2
 8001b0a:	2904      	cmp	r1, #4
 8001b0c:	d100      	bne.n	8001b10 <__aeabi_ddiv+0x4e8>
 8001b0e:	e773      	b.n	80019f8 <__aeabi_ddiv+0x3d0>
 8001b10:	1d11      	adds	r1, r2, #4
 8001b12:	4291      	cmp	r1, r2
 8001b14:	4192      	sbcs	r2, r2
 8001b16:	4252      	negs	r2, r2
 8001b18:	002e      	movs	r6, r5
 8001b1a:	08c9      	lsrs	r1, r1, #3
 8001b1c:	4493      	add	fp, r2
 8001b1e:	e76d      	b.n	80019fc <__aeabi_ddiv+0x3d4>
 8001b20:	9b00      	ldr	r3, [sp, #0]
 8001b22:	3d01      	subs	r5, #1
 8001b24:	469c      	mov	ip, r3
 8001b26:	4461      	add	r1, ip
 8001b28:	428b      	cmp	r3, r1
 8001b2a:	d900      	bls.n	8001b2e <__aeabi_ddiv+0x506>
 8001b2c:	e72c      	b.n	8001988 <__aeabi_ddiv+0x360>
 8001b2e:	428a      	cmp	r2, r1
 8001b30:	d800      	bhi.n	8001b34 <__aeabi_ddiv+0x50c>
 8001b32:	e729      	b.n	8001988 <__aeabi_ddiv+0x360>
 8001b34:	1e85      	subs	r5, r0, #2
 8001b36:	4461      	add	r1, ip
 8001b38:	e726      	b.n	8001988 <__aeabi_ddiv+0x360>
 8001b3a:	9900      	ldr	r1, [sp, #0]
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	468c      	mov	ip, r1
 8001b40:	4464      	add	r4, ip
 8001b42:	42a1      	cmp	r1, r4
 8001b44:	d900      	bls.n	8001b48 <__aeabi_ddiv+0x520>
 8001b46:	e72d      	b.n	80019a4 <__aeabi_ddiv+0x37c>
 8001b48:	42a2      	cmp	r2, r4
 8001b4a:	d800      	bhi.n	8001b4e <__aeabi_ddiv+0x526>
 8001b4c:	e72a      	b.n	80019a4 <__aeabi_ddiv+0x37c>
 8001b4e:	1e83      	subs	r3, r0, #2
 8001b50:	4464      	add	r4, ip
 8001b52:	e727      	b.n	80019a4 <__aeabi_ddiv+0x37c>
 8001b54:	4287      	cmp	r7, r0
 8001b56:	d000      	beq.n	8001b5a <__aeabi_ddiv+0x532>
 8001b58:	e6fe      	b.n	8001958 <__aeabi_ddiv+0x330>
 8001b5a:	45a9      	cmp	r9, r5
 8001b5c:	d900      	bls.n	8001b60 <__aeabi_ddiv+0x538>
 8001b5e:	e6fb      	b.n	8001958 <__aeabi_ddiv+0x330>
 8001b60:	e6f5      	b.n	800194e <__aeabi_ddiv+0x326>
 8001b62:	42a2      	cmp	r2, r4
 8001b64:	d800      	bhi.n	8001b68 <__aeabi_ddiv+0x540>
 8001b66:	e6b9      	b.n	80018dc <__aeabi_ddiv+0x2b4>
 8001b68:	1e83      	subs	r3, r0, #2
 8001b6a:	4464      	add	r4, ip
 8001b6c:	e6b6      	b.n	80018dc <__aeabi_ddiv+0x2b4>
 8001b6e:	428a      	cmp	r2, r1
 8001b70:	d800      	bhi.n	8001b74 <__aeabi_ddiv+0x54c>
 8001b72:	e69f      	b.n	80018b4 <__aeabi_ddiv+0x28c>
 8001b74:	46bc      	mov	ip, r7
 8001b76:	1e83      	subs	r3, r0, #2
 8001b78:	4698      	mov	r8, r3
 8001b7a:	4461      	add	r1, ip
 8001b7c:	e69a      	b.n	80018b4 <__aeabi_ddiv+0x28c>
 8001b7e:	000a      	movs	r2, r1
 8001b80:	4284      	cmp	r4, r0
 8001b82:	d000      	beq.n	8001b86 <__aeabi_ddiv+0x55e>
 8001b84:	e72e      	b.n	80019e4 <__aeabi_ddiv+0x3bc>
 8001b86:	454b      	cmp	r3, r9
 8001b88:	d000      	beq.n	8001b8c <__aeabi_ddiv+0x564>
 8001b8a:	e72b      	b.n	80019e4 <__aeabi_ddiv+0x3bc>
 8001b8c:	0035      	movs	r5, r6
 8001b8e:	e72c      	b.n	80019ea <__aeabi_ddiv+0x3c2>
 8001b90:	4b2a      	ldr	r3, [pc, #168]	@ (8001c3c <__aeabi_ddiv+0x614>)
 8001b92:	4a2f      	ldr	r2, [pc, #188]	@ (8001c50 <__aeabi_ddiv+0x628>)
 8001b94:	4453      	add	r3, sl
 8001b96:	4592      	cmp	sl, r2
 8001b98:	db43      	blt.n	8001c22 <__aeabi_ddiv+0x5fa>
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4493      	add	fp, r2
 8001ba0:	e72c      	b.n	80019fc <__aeabi_ddiv+0x3d4>
 8001ba2:	42ac      	cmp	r4, r5
 8001ba4:	d800      	bhi.n	8001ba8 <__aeabi_ddiv+0x580>
 8001ba6:	e6d7      	b.n	8001958 <__aeabi_ddiv+0x330>
 8001ba8:	2302      	movs	r3, #2
 8001baa:	425b      	negs	r3, r3
 8001bac:	469c      	mov	ip, r3
 8001bae:	9900      	ldr	r1, [sp, #0]
 8001bb0:	444d      	add	r5, r9
 8001bb2:	454d      	cmp	r5, r9
 8001bb4:	419b      	sbcs	r3, r3
 8001bb6:	44e3      	add	fp, ip
 8001bb8:	468c      	mov	ip, r1
 8001bba:	425b      	negs	r3, r3
 8001bbc:	4463      	add	r3, ip
 8001bbe:	18c0      	adds	r0, r0, r3
 8001bc0:	e6cc      	b.n	800195c <__aeabi_ddiv+0x334>
 8001bc2:	201f      	movs	r0, #31
 8001bc4:	4240      	negs	r0, r0
 8001bc6:	1ac3      	subs	r3, r0, r3
 8001bc8:	4658      	mov	r0, fp
 8001bca:	40d8      	lsrs	r0, r3
 8001bcc:	2920      	cmp	r1, #32
 8001bce:	d004      	beq.n	8001bda <__aeabi_ddiv+0x5b2>
 8001bd0:	4659      	mov	r1, fp
 8001bd2:	4b20      	ldr	r3, [pc, #128]	@ (8001c54 <__aeabi_ddiv+0x62c>)
 8001bd4:	4453      	add	r3, sl
 8001bd6:	4099      	lsls	r1, r3
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	1e53      	subs	r3, r2, #1
 8001bdc:	419a      	sbcs	r2, r3
 8001bde:	2307      	movs	r3, #7
 8001be0:	0019      	movs	r1, r3
 8001be2:	4302      	orrs	r2, r0
 8001be4:	2400      	movs	r4, #0
 8001be6:	4011      	ands	r1, r2
 8001be8:	4213      	tst	r3, r2
 8001bea:	d009      	beq.n	8001c00 <__aeabi_ddiv+0x5d8>
 8001bec:	3308      	adds	r3, #8
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d01d      	beq.n	8001c30 <__aeabi_ddiv+0x608>
 8001bf4:	1d13      	adds	r3, r2, #4
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	4189      	sbcs	r1, r1
 8001bfa:	001a      	movs	r2, r3
 8001bfc:	4249      	negs	r1, r1
 8001bfe:	0749      	lsls	r1, r1, #29
 8001c00:	08d2      	lsrs	r2, r2, #3
 8001c02:	430a      	orrs	r2, r1
 8001c04:	4690      	mov	r8, r2
 8001c06:	2300      	movs	r3, #0
 8001c08:	e57a      	b.n	8001700 <__aeabi_ddiv+0xd8>
 8001c0a:	4649      	mov	r1, r9
 8001c0c:	9f00      	ldr	r7, [sp, #0]
 8001c0e:	004d      	lsls	r5, r1, #1
 8001c10:	454d      	cmp	r5, r9
 8001c12:	4189      	sbcs	r1, r1
 8001c14:	46bc      	mov	ip, r7
 8001c16:	4249      	negs	r1, r1
 8001c18:	4461      	add	r1, ip
 8001c1a:	46a9      	mov	r9, r5
 8001c1c:	3a02      	subs	r2, #2
 8001c1e:	1864      	adds	r4, r4, r1
 8001c20:	e7ae      	b.n	8001b80 <__aeabi_ddiv+0x558>
 8001c22:	2201      	movs	r2, #1
 8001c24:	4252      	negs	r2, r2
 8001c26:	e746      	b.n	8001ab6 <__aeabi_ddiv+0x48e>
 8001c28:	4599      	cmp	r9, r3
 8001c2a:	d3ee      	bcc.n	8001c0a <__aeabi_ddiv+0x5e2>
 8001c2c:	000a      	movs	r2, r1
 8001c2e:	e7aa      	b.n	8001b86 <__aeabi_ddiv+0x55e>
 8001c30:	2100      	movs	r1, #0
 8001c32:	e7e5      	b.n	8001c00 <__aeabi_ddiv+0x5d8>
 8001c34:	0759      	lsls	r1, r3, #29
 8001c36:	025b      	lsls	r3, r3, #9
 8001c38:	0b1c      	lsrs	r4, r3, #12
 8001c3a:	e7e1      	b.n	8001c00 <__aeabi_ddiv+0x5d8>
 8001c3c:	000003ff 	.word	0x000003ff
 8001c40:	feffffff 	.word	0xfeffffff
 8001c44:	000007fe 	.word	0x000007fe
 8001c48:	000007ff 	.word	0x000007ff
 8001c4c:	0000041e 	.word	0x0000041e
 8001c50:	fffffc02 	.word	0xfffffc02
 8001c54:	0000043e 	.word	0x0000043e

08001c58 <__eqdf2>:
 8001c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c5a:	4657      	mov	r7, sl
 8001c5c:	46de      	mov	lr, fp
 8001c5e:	464e      	mov	r6, r9
 8001c60:	4645      	mov	r5, r8
 8001c62:	b5e0      	push	{r5, r6, r7, lr}
 8001c64:	000d      	movs	r5, r1
 8001c66:	0004      	movs	r4, r0
 8001c68:	0fe8      	lsrs	r0, r5, #31
 8001c6a:	4683      	mov	fp, r0
 8001c6c:	0309      	lsls	r1, r1, #12
 8001c6e:	0fd8      	lsrs	r0, r3, #31
 8001c70:	0b09      	lsrs	r1, r1, #12
 8001c72:	4682      	mov	sl, r0
 8001c74:	4819      	ldr	r0, [pc, #100]	@ (8001cdc <__eqdf2+0x84>)
 8001c76:	468c      	mov	ip, r1
 8001c78:	031f      	lsls	r7, r3, #12
 8001c7a:	0069      	lsls	r1, r5, #1
 8001c7c:	005e      	lsls	r6, r3, #1
 8001c7e:	0d49      	lsrs	r1, r1, #21
 8001c80:	0b3f      	lsrs	r7, r7, #12
 8001c82:	0d76      	lsrs	r6, r6, #21
 8001c84:	4281      	cmp	r1, r0
 8001c86:	d018      	beq.n	8001cba <__eqdf2+0x62>
 8001c88:	4286      	cmp	r6, r0
 8001c8a:	d00f      	beq.n	8001cac <__eqdf2+0x54>
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	42b1      	cmp	r1, r6
 8001c90:	d10d      	bne.n	8001cae <__eqdf2+0x56>
 8001c92:	45bc      	cmp	ip, r7
 8001c94:	d10b      	bne.n	8001cae <__eqdf2+0x56>
 8001c96:	4294      	cmp	r4, r2
 8001c98:	d109      	bne.n	8001cae <__eqdf2+0x56>
 8001c9a:	45d3      	cmp	fp, sl
 8001c9c:	d01c      	beq.n	8001cd8 <__eqdf2+0x80>
 8001c9e:	2900      	cmp	r1, #0
 8001ca0:	d105      	bne.n	8001cae <__eqdf2+0x56>
 8001ca2:	4660      	mov	r0, ip
 8001ca4:	4320      	orrs	r0, r4
 8001ca6:	1e43      	subs	r3, r0, #1
 8001ca8:	4198      	sbcs	r0, r3
 8001caa:	e000      	b.n	8001cae <__eqdf2+0x56>
 8001cac:	2001      	movs	r0, #1
 8001cae:	bcf0      	pop	{r4, r5, r6, r7}
 8001cb0:	46bb      	mov	fp, r7
 8001cb2:	46b2      	mov	sl, r6
 8001cb4:	46a9      	mov	r9, r5
 8001cb6:	46a0      	mov	r8, r4
 8001cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cba:	2001      	movs	r0, #1
 8001cbc:	428e      	cmp	r6, r1
 8001cbe:	d1f6      	bne.n	8001cae <__eqdf2+0x56>
 8001cc0:	4661      	mov	r1, ip
 8001cc2:	4339      	orrs	r1, r7
 8001cc4:	000f      	movs	r7, r1
 8001cc6:	4317      	orrs	r7, r2
 8001cc8:	4327      	orrs	r7, r4
 8001cca:	d1f0      	bne.n	8001cae <__eqdf2+0x56>
 8001ccc:	465b      	mov	r3, fp
 8001cce:	4652      	mov	r2, sl
 8001cd0:	1a98      	subs	r0, r3, r2
 8001cd2:	1e43      	subs	r3, r0, #1
 8001cd4:	4198      	sbcs	r0, r3
 8001cd6:	e7ea      	b.n	8001cae <__eqdf2+0x56>
 8001cd8:	2000      	movs	r0, #0
 8001cda:	e7e8      	b.n	8001cae <__eqdf2+0x56>
 8001cdc:	000007ff 	.word	0x000007ff

08001ce0 <__gedf2>:
 8001ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ce2:	4657      	mov	r7, sl
 8001ce4:	464e      	mov	r6, r9
 8001ce6:	4645      	mov	r5, r8
 8001ce8:	46de      	mov	lr, fp
 8001cea:	b5e0      	push	{r5, r6, r7, lr}
 8001cec:	000d      	movs	r5, r1
 8001cee:	030e      	lsls	r6, r1, #12
 8001cf0:	0049      	lsls	r1, r1, #1
 8001cf2:	0d49      	lsrs	r1, r1, #21
 8001cf4:	468a      	mov	sl, r1
 8001cf6:	0fdf      	lsrs	r7, r3, #31
 8001cf8:	0fe9      	lsrs	r1, r5, #31
 8001cfa:	46bc      	mov	ip, r7
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	4f2f      	ldr	r7, [pc, #188]	@ (8001dbc <__gedf2+0xdc>)
 8001d00:	0004      	movs	r4, r0
 8001d02:	4680      	mov	r8, r0
 8001d04:	9101      	str	r1, [sp, #4]
 8001d06:	0058      	lsls	r0, r3, #1
 8001d08:	0319      	lsls	r1, r3, #12
 8001d0a:	4691      	mov	r9, r2
 8001d0c:	0b36      	lsrs	r6, r6, #12
 8001d0e:	0b09      	lsrs	r1, r1, #12
 8001d10:	0d40      	lsrs	r0, r0, #21
 8001d12:	45ba      	cmp	sl, r7
 8001d14:	d01d      	beq.n	8001d52 <__gedf2+0x72>
 8001d16:	42b8      	cmp	r0, r7
 8001d18:	d00d      	beq.n	8001d36 <__gedf2+0x56>
 8001d1a:	4657      	mov	r7, sl
 8001d1c:	2f00      	cmp	r7, #0
 8001d1e:	d12a      	bne.n	8001d76 <__gedf2+0x96>
 8001d20:	4334      	orrs	r4, r6
 8001d22:	2800      	cmp	r0, #0
 8001d24:	d124      	bne.n	8001d70 <__gedf2+0x90>
 8001d26:	430a      	orrs	r2, r1
 8001d28:	d036      	beq.n	8001d98 <__gedf2+0xb8>
 8001d2a:	2c00      	cmp	r4, #0
 8001d2c:	d141      	bne.n	8001db2 <__gedf2+0xd2>
 8001d2e:	4663      	mov	r3, ip
 8001d30:	0058      	lsls	r0, r3, #1
 8001d32:	3801      	subs	r0, #1
 8001d34:	e015      	b.n	8001d62 <__gedf2+0x82>
 8001d36:	4311      	orrs	r1, r2
 8001d38:	d138      	bne.n	8001dac <__gedf2+0xcc>
 8001d3a:	4653      	mov	r3, sl
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <__gedf2+0x64>
 8001d40:	4326      	orrs	r6, r4
 8001d42:	d0f4      	beq.n	8001d2e <__gedf2+0x4e>
 8001d44:	9b01      	ldr	r3, [sp, #4]
 8001d46:	4563      	cmp	r3, ip
 8001d48:	d107      	bne.n	8001d5a <__gedf2+0x7a>
 8001d4a:	9b01      	ldr	r3, [sp, #4]
 8001d4c:	0058      	lsls	r0, r3, #1
 8001d4e:	3801      	subs	r0, #1
 8001d50:	e007      	b.n	8001d62 <__gedf2+0x82>
 8001d52:	4326      	orrs	r6, r4
 8001d54:	d12a      	bne.n	8001dac <__gedf2+0xcc>
 8001d56:	4550      	cmp	r0, sl
 8001d58:	d021      	beq.n	8001d9e <__gedf2+0xbe>
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	9b01      	ldr	r3, [sp, #4]
 8001d5e:	425f      	negs	r7, r3
 8001d60:	4338      	orrs	r0, r7
 8001d62:	b003      	add	sp, #12
 8001d64:	bcf0      	pop	{r4, r5, r6, r7}
 8001d66:	46bb      	mov	fp, r7
 8001d68:	46b2      	mov	sl, r6
 8001d6a:	46a9      	mov	r9, r5
 8001d6c:	46a0      	mov	r8, r4
 8001d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d70:	2c00      	cmp	r4, #0
 8001d72:	d0dc      	beq.n	8001d2e <__gedf2+0x4e>
 8001d74:	e7e6      	b.n	8001d44 <__gedf2+0x64>
 8001d76:	2800      	cmp	r0, #0
 8001d78:	d0ef      	beq.n	8001d5a <__gedf2+0x7a>
 8001d7a:	9b01      	ldr	r3, [sp, #4]
 8001d7c:	4563      	cmp	r3, ip
 8001d7e:	d1ec      	bne.n	8001d5a <__gedf2+0x7a>
 8001d80:	4582      	cmp	sl, r0
 8001d82:	dcea      	bgt.n	8001d5a <__gedf2+0x7a>
 8001d84:	dbe1      	blt.n	8001d4a <__gedf2+0x6a>
 8001d86:	428e      	cmp	r6, r1
 8001d88:	d8e7      	bhi.n	8001d5a <__gedf2+0x7a>
 8001d8a:	d1de      	bne.n	8001d4a <__gedf2+0x6a>
 8001d8c:	45c8      	cmp	r8, r9
 8001d8e:	d8e4      	bhi.n	8001d5a <__gedf2+0x7a>
 8001d90:	2000      	movs	r0, #0
 8001d92:	45c8      	cmp	r8, r9
 8001d94:	d2e5      	bcs.n	8001d62 <__gedf2+0x82>
 8001d96:	e7d8      	b.n	8001d4a <__gedf2+0x6a>
 8001d98:	2c00      	cmp	r4, #0
 8001d9a:	d0e2      	beq.n	8001d62 <__gedf2+0x82>
 8001d9c:	e7dd      	b.n	8001d5a <__gedf2+0x7a>
 8001d9e:	4311      	orrs	r1, r2
 8001da0:	d104      	bne.n	8001dac <__gedf2+0xcc>
 8001da2:	9b01      	ldr	r3, [sp, #4]
 8001da4:	4563      	cmp	r3, ip
 8001da6:	d1d8      	bne.n	8001d5a <__gedf2+0x7a>
 8001da8:	2000      	movs	r0, #0
 8001daa:	e7da      	b.n	8001d62 <__gedf2+0x82>
 8001dac:	2002      	movs	r0, #2
 8001dae:	4240      	negs	r0, r0
 8001db0:	e7d7      	b.n	8001d62 <__gedf2+0x82>
 8001db2:	9b01      	ldr	r3, [sp, #4]
 8001db4:	4563      	cmp	r3, ip
 8001db6:	d0e6      	beq.n	8001d86 <__gedf2+0xa6>
 8001db8:	e7cf      	b.n	8001d5a <__gedf2+0x7a>
 8001dba:	46c0      	nop			@ (mov r8, r8)
 8001dbc:	000007ff 	.word	0x000007ff

08001dc0 <__ledf2>:
 8001dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc2:	4657      	mov	r7, sl
 8001dc4:	464e      	mov	r6, r9
 8001dc6:	4645      	mov	r5, r8
 8001dc8:	46de      	mov	lr, fp
 8001dca:	b5e0      	push	{r5, r6, r7, lr}
 8001dcc:	000d      	movs	r5, r1
 8001dce:	030e      	lsls	r6, r1, #12
 8001dd0:	0049      	lsls	r1, r1, #1
 8001dd2:	0d49      	lsrs	r1, r1, #21
 8001dd4:	468a      	mov	sl, r1
 8001dd6:	0fdf      	lsrs	r7, r3, #31
 8001dd8:	0fe9      	lsrs	r1, r5, #31
 8001dda:	46bc      	mov	ip, r7
 8001ddc:	b083      	sub	sp, #12
 8001dde:	4f2e      	ldr	r7, [pc, #184]	@ (8001e98 <__ledf2+0xd8>)
 8001de0:	0004      	movs	r4, r0
 8001de2:	4680      	mov	r8, r0
 8001de4:	9101      	str	r1, [sp, #4]
 8001de6:	0058      	lsls	r0, r3, #1
 8001de8:	0319      	lsls	r1, r3, #12
 8001dea:	4691      	mov	r9, r2
 8001dec:	0b36      	lsrs	r6, r6, #12
 8001dee:	0b09      	lsrs	r1, r1, #12
 8001df0:	0d40      	lsrs	r0, r0, #21
 8001df2:	45ba      	cmp	sl, r7
 8001df4:	d01e      	beq.n	8001e34 <__ledf2+0x74>
 8001df6:	42b8      	cmp	r0, r7
 8001df8:	d00d      	beq.n	8001e16 <__ledf2+0x56>
 8001dfa:	4657      	mov	r7, sl
 8001dfc:	2f00      	cmp	r7, #0
 8001dfe:	d127      	bne.n	8001e50 <__ledf2+0x90>
 8001e00:	4334      	orrs	r4, r6
 8001e02:	2800      	cmp	r0, #0
 8001e04:	d133      	bne.n	8001e6e <__ledf2+0xae>
 8001e06:	430a      	orrs	r2, r1
 8001e08:	d034      	beq.n	8001e74 <__ledf2+0xb4>
 8001e0a:	2c00      	cmp	r4, #0
 8001e0c:	d140      	bne.n	8001e90 <__ledf2+0xd0>
 8001e0e:	4663      	mov	r3, ip
 8001e10:	0058      	lsls	r0, r3, #1
 8001e12:	3801      	subs	r0, #1
 8001e14:	e015      	b.n	8001e42 <__ledf2+0x82>
 8001e16:	4311      	orrs	r1, r2
 8001e18:	d112      	bne.n	8001e40 <__ledf2+0x80>
 8001e1a:	4653      	mov	r3, sl
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <__ledf2+0x64>
 8001e20:	4326      	orrs	r6, r4
 8001e22:	d0f4      	beq.n	8001e0e <__ledf2+0x4e>
 8001e24:	9b01      	ldr	r3, [sp, #4]
 8001e26:	4563      	cmp	r3, ip
 8001e28:	d01d      	beq.n	8001e66 <__ledf2+0xa6>
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	9b01      	ldr	r3, [sp, #4]
 8001e2e:	425f      	negs	r7, r3
 8001e30:	4338      	orrs	r0, r7
 8001e32:	e006      	b.n	8001e42 <__ledf2+0x82>
 8001e34:	4326      	orrs	r6, r4
 8001e36:	d103      	bne.n	8001e40 <__ledf2+0x80>
 8001e38:	4550      	cmp	r0, sl
 8001e3a:	d1f6      	bne.n	8001e2a <__ledf2+0x6a>
 8001e3c:	4311      	orrs	r1, r2
 8001e3e:	d01c      	beq.n	8001e7a <__ledf2+0xba>
 8001e40:	2002      	movs	r0, #2
 8001e42:	b003      	add	sp, #12
 8001e44:	bcf0      	pop	{r4, r5, r6, r7}
 8001e46:	46bb      	mov	fp, r7
 8001e48:	46b2      	mov	sl, r6
 8001e4a:	46a9      	mov	r9, r5
 8001e4c:	46a0      	mov	r8, r4
 8001e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e50:	2800      	cmp	r0, #0
 8001e52:	d0ea      	beq.n	8001e2a <__ledf2+0x6a>
 8001e54:	9b01      	ldr	r3, [sp, #4]
 8001e56:	4563      	cmp	r3, ip
 8001e58:	d1e7      	bne.n	8001e2a <__ledf2+0x6a>
 8001e5a:	4582      	cmp	sl, r0
 8001e5c:	dce5      	bgt.n	8001e2a <__ledf2+0x6a>
 8001e5e:	db02      	blt.n	8001e66 <__ledf2+0xa6>
 8001e60:	428e      	cmp	r6, r1
 8001e62:	d8e2      	bhi.n	8001e2a <__ledf2+0x6a>
 8001e64:	d00e      	beq.n	8001e84 <__ledf2+0xc4>
 8001e66:	9b01      	ldr	r3, [sp, #4]
 8001e68:	0058      	lsls	r0, r3, #1
 8001e6a:	3801      	subs	r0, #1
 8001e6c:	e7e9      	b.n	8001e42 <__ledf2+0x82>
 8001e6e:	2c00      	cmp	r4, #0
 8001e70:	d0cd      	beq.n	8001e0e <__ledf2+0x4e>
 8001e72:	e7d7      	b.n	8001e24 <__ledf2+0x64>
 8001e74:	2c00      	cmp	r4, #0
 8001e76:	d0e4      	beq.n	8001e42 <__ledf2+0x82>
 8001e78:	e7d7      	b.n	8001e2a <__ledf2+0x6a>
 8001e7a:	9b01      	ldr	r3, [sp, #4]
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	4563      	cmp	r3, ip
 8001e80:	d0df      	beq.n	8001e42 <__ledf2+0x82>
 8001e82:	e7d2      	b.n	8001e2a <__ledf2+0x6a>
 8001e84:	45c8      	cmp	r8, r9
 8001e86:	d8d0      	bhi.n	8001e2a <__ledf2+0x6a>
 8001e88:	2000      	movs	r0, #0
 8001e8a:	45c8      	cmp	r8, r9
 8001e8c:	d2d9      	bcs.n	8001e42 <__ledf2+0x82>
 8001e8e:	e7ea      	b.n	8001e66 <__ledf2+0xa6>
 8001e90:	9b01      	ldr	r3, [sp, #4]
 8001e92:	4563      	cmp	r3, ip
 8001e94:	d0e4      	beq.n	8001e60 <__ledf2+0xa0>
 8001e96:	e7c8      	b.n	8001e2a <__ledf2+0x6a>
 8001e98:	000007ff 	.word	0x000007ff

08001e9c <__aeabi_dmul>:
 8001e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e9e:	4657      	mov	r7, sl
 8001ea0:	464e      	mov	r6, r9
 8001ea2:	46de      	mov	lr, fp
 8001ea4:	4645      	mov	r5, r8
 8001ea6:	b5e0      	push	{r5, r6, r7, lr}
 8001ea8:	001f      	movs	r7, r3
 8001eaa:	030b      	lsls	r3, r1, #12
 8001eac:	0b1b      	lsrs	r3, r3, #12
 8001eae:	0016      	movs	r6, r2
 8001eb0:	469a      	mov	sl, r3
 8001eb2:	0fca      	lsrs	r2, r1, #31
 8001eb4:	004b      	lsls	r3, r1, #1
 8001eb6:	0004      	movs	r4, r0
 8001eb8:	4691      	mov	r9, r2
 8001eba:	b085      	sub	sp, #20
 8001ebc:	0d5b      	lsrs	r3, r3, #21
 8001ebe:	d100      	bne.n	8001ec2 <__aeabi_dmul+0x26>
 8001ec0:	e1cf      	b.n	8002262 <__aeabi_dmul+0x3c6>
 8001ec2:	4acd      	ldr	r2, [pc, #820]	@ (80021f8 <__aeabi_dmul+0x35c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d055      	beq.n	8001f74 <__aeabi_dmul+0xd8>
 8001ec8:	4651      	mov	r1, sl
 8001eca:	0f42      	lsrs	r2, r0, #29
 8001ecc:	00c9      	lsls	r1, r1, #3
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	2180      	movs	r1, #128	@ 0x80
 8001ed2:	0409      	lsls	r1, r1, #16
 8001ed4:	4311      	orrs	r1, r2
 8001ed6:	00c2      	lsls	r2, r0, #3
 8001ed8:	4690      	mov	r8, r2
 8001eda:	4ac8      	ldr	r2, [pc, #800]	@ (80021fc <__aeabi_dmul+0x360>)
 8001edc:	468a      	mov	sl, r1
 8001ede:	4693      	mov	fp, r2
 8001ee0:	449b      	add	fp, r3
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	2500      	movs	r5, #0
 8001ee6:	9302      	str	r3, [sp, #8]
 8001ee8:	033c      	lsls	r4, r7, #12
 8001eea:	007b      	lsls	r3, r7, #1
 8001eec:	0ffa      	lsrs	r2, r7, #31
 8001eee:	9601      	str	r6, [sp, #4]
 8001ef0:	0b24      	lsrs	r4, r4, #12
 8001ef2:	0d5b      	lsrs	r3, r3, #21
 8001ef4:	9200      	str	r2, [sp, #0]
 8001ef6:	d100      	bne.n	8001efa <__aeabi_dmul+0x5e>
 8001ef8:	e188      	b.n	800220c <__aeabi_dmul+0x370>
 8001efa:	4abf      	ldr	r2, [pc, #764]	@ (80021f8 <__aeabi_dmul+0x35c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d100      	bne.n	8001f02 <__aeabi_dmul+0x66>
 8001f00:	e092      	b.n	8002028 <__aeabi_dmul+0x18c>
 8001f02:	4abe      	ldr	r2, [pc, #760]	@ (80021fc <__aeabi_dmul+0x360>)
 8001f04:	4694      	mov	ip, r2
 8001f06:	4463      	add	r3, ip
 8001f08:	449b      	add	fp, r3
 8001f0a:	2d0a      	cmp	r5, #10
 8001f0c:	dc42      	bgt.n	8001f94 <__aeabi_dmul+0xf8>
 8001f0e:	00e4      	lsls	r4, r4, #3
 8001f10:	0f73      	lsrs	r3, r6, #29
 8001f12:	4323      	orrs	r3, r4
 8001f14:	2480      	movs	r4, #128	@ 0x80
 8001f16:	4649      	mov	r1, r9
 8001f18:	0424      	lsls	r4, r4, #16
 8001f1a:	431c      	orrs	r4, r3
 8001f1c:	00f3      	lsls	r3, r6, #3
 8001f1e:	9301      	str	r3, [sp, #4]
 8001f20:	9b00      	ldr	r3, [sp, #0]
 8001f22:	2000      	movs	r0, #0
 8001f24:	4059      	eors	r1, r3
 8001f26:	b2cb      	uxtb	r3, r1
 8001f28:	9303      	str	r3, [sp, #12]
 8001f2a:	2d02      	cmp	r5, #2
 8001f2c:	dc00      	bgt.n	8001f30 <__aeabi_dmul+0x94>
 8001f2e:	e094      	b.n	800205a <__aeabi_dmul+0x1be>
 8001f30:	2301      	movs	r3, #1
 8001f32:	40ab      	lsls	r3, r5
 8001f34:	001d      	movs	r5, r3
 8001f36:	23a6      	movs	r3, #166	@ 0xa6
 8001f38:	002a      	movs	r2, r5
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	401a      	ands	r2, r3
 8001f3e:	421d      	tst	r5, r3
 8001f40:	d000      	beq.n	8001f44 <__aeabi_dmul+0xa8>
 8001f42:	e229      	b.n	8002398 <__aeabi_dmul+0x4fc>
 8001f44:	2390      	movs	r3, #144	@ 0x90
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	421d      	tst	r5, r3
 8001f4a:	d100      	bne.n	8001f4e <__aeabi_dmul+0xb2>
 8001f4c:	e24d      	b.n	80023ea <__aeabi_dmul+0x54e>
 8001f4e:	2300      	movs	r3, #0
 8001f50:	2480      	movs	r4, #128	@ 0x80
 8001f52:	4699      	mov	r9, r3
 8001f54:	0324      	lsls	r4, r4, #12
 8001f56:	4ba8      	ldr	r3, [pc, #672]	@ (80021f8 <__aeabi_dmul+0x35c>)
 8001f58:	0010      	movs	r0, r2
 8001f5a:	464a      	mov	r2, r9
 8001f5c:	051b      	lsls	r3, r3, #20
 8001f5e:	4323      	orrs	r3, r4
 8001f60:	07d2      	lsls	r2, r2, #31
 8001f62:	4313      	orrs	r3, r2
 8001f64:	0019      	movs	r1, r3
 8001f66:	b005      	add	sp, #20
 8001f68:	bcf0      	pop	{r4, r5, r6, r7}
 8001f6a:	46bb      	mov	fp, r7
 8001f6c:	46b2      	mov	sl, r6
 8001f6e:	46a9      	mov	r9, r5
 8001f70:	46a0      	mov	r8, r4
 8001f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f74:	4652      	mov	r2, sl
 8001f76:	4302      	orrs	r2, r0
 8001f78:	4690      	mov	r8, r2
 8001f7a:	d000      	beq.n	8001f7e <__aeabi_dmul+0xe2>
 8001f7c:	e1ac      	b.n	80022d8 <__aeabi_dmul+0x43c>
 8001f7e:	469b      	mov	fp, r3
 8001f80:	2302      	movs	r3, #2
 8001f82:	4692      	mov	sl, r2
 8001f84:	2508      	movs	r5, #8
 8001f86:	9302      	str	r3, [sp, #8]
 8001f88:	e7ae      	b.n	8001ee8 <__aeabi_dmul+0x4c>
 8001f8a:	9b00      	ldr	r3, [sp, #0]
 8001f8c:	46a2      	mov	sl, r4
 8001f8e:	4699      	mov	r9, r3
 8001f90:	9b01      	ldr	r3, [sp, #4]
 8001f92:	4698      	mov	r8, r3
 8001f94:	9b02      	ldr	r3, [sp, #8]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d100      	bne.n	8001f9c <__aeabi_dmul+0x100>
 8001f9a:	e1ca      	b.n	8002332 <__aeabi_dmul+0x496>
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d100      	bne.n	8001fa2 <__aeabi_dmul+0x106>
 8001fa0:	e192      	b.n	80022c8 <__aeabi_dmul+0x42c>
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d110      	bne.n	8001fc8 <__aeabi_dmul+0x12c>
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	2400      	movs	r4, #0
 8001faa:	2200      	movs	r2, #0
 8001fac:	e7d4      	b.n	8001f58 <__aeabi_dmul+0xbc>
 8001fae:	2201      	movs	r2, #1
 8001fb0:	087b      	lsrs	r3, r7, #1
 8001fb2:	403a      	ands	r2, r7
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	4652      	mov	r2, sl
 8001fb8:	07d2      	lsls	r2, r2, #31
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	4698      	mov	r8, r3
 8001fbe:	4653      	mov	r3, sl
 8001fc0:	085b      	lsrs	r3, r3, #1
 8001fc2:	469a      	mov	sl, r3
 8001fc4:	9b03      	ldr	r3, [sp, #12]
 8001fc6:	4699      	mov	r9, r3
 8001fc8:	465b      	mov	r3, fp
 8001fca:	1c58      	adds	r0, r3, #1
 8001fcc:	2380      	movs	r3, #128	@ 0x80
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	445b      	add	r3, fp
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	dc00      	bgt.n	8001fd8 <__aeabi_dmul+0x13c>
 8001fd6:	e1b1      	b.n	800233c <__aeabi_dmul+0x4a0>
 8001fd8:	4642      	mov	r2, r8
 8001fda:	0752      	lsls	r2, r2, #29
 8001fdc:	d00b      	beq.n	8001ff6 <__aeabi_dmul+0x15a>
 8001fde:	220f      	movs	r2, #15
 8001fe0:	4641      	mov	r1, r8
 8001fe2:	400a      	ands	r2, r1
 8001fe4:	2a04      	cmp	r2, #4
 8001fe6:	d006      	beq.n	8001ff6 <__aeabi_dmul+0x15a>
 8001fe8:	4642      	mov	r2, r8
 8001fea:	1d11      	adds	r1, r2, #4
 8001fec:	4541      	cmp	r1, r8
 8001fee:	4192      	sbcs	r2, r2
 8001ff0:	4688      	mov	r8, r1
 8001ff2:	4252      	negs	r2, r2
 8001ff4:	4492      	add	sl, r2
 8001ff6:	4652      	mov	r2, sl
 8001ff8:	01d2      	lsls	r2, r2, #7
 8001ffa:	d506      	bpl.n	800200a <__aeabi_dmul+0x16e>
 8001ffc:	4652      	mov	r2, sl
 8001ffe:	4b80      	ldr	r3, [pc, #512]	@ (8002200 <__aeabi_dmul+0x364>)
 8002000:	401a      	ands	r2, r3
 8002002:	2380      	movs	r3, #128	@ 0x80
 8002004:	4692      	mov	sl, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	18c3      	adds	r3, r0, r3
 800200a:	4a7e      	ldr	r2, [pc, #504]	@ (8002204 <__aeabi_dmul+0x368>)
 800200c:	4293      	cmp	r3, r2
 800200e:	dd00      	ble.n	8002012 <__aeabi_dmul+0x176>
 8002010:	e18f      	b.n	8002332 <__aeabi_dmul+0x496>
 8002012:	4642      	mov	r2, r8
 8002014:	08d1      	lsrs	r1, r2, #3
 8002016:	4652      	mov	r2, sl
 8002018:	0752      	lsls	r2, r2, #29
 800201a:	430a      	orrs	r2, r1
 800201c:	4651      	mov	r1, sl
 800201e:	055b      	lsls	r3, r3, #21
 8002020:	024c      	lsls	r4, r1, #9
 8002022:	0b24      	lsrs	r4, r4, #12
 8002024:	0d5b      	lsrs	r3, r3, #21
 8002026:	e797      	b.n	8001f58 <__aeabi_dmul+0xbc>
 8002028:	4b73      	ldr	r3, [pc, #460]	@ (80021f8 <__aeabi_dmul+0x35c>)
 800202a:	4326      	orrs	r6, r4
 800202c:	469c      	mov	ip, r3
 800202e:	44e3      	add	fp, ip
 8002030:	2e00      	cmp	r6, #0
 8002032:	d100      	bne.n	8002036 <__aeabi_dmul+0x19a>
 8002034:	e16f      	b.n	8002316 <__aeabi_dmul+0x47a>
 8002036:	2303      	movs	r3, #3
 8002038:	4649      	mov	r1, r9
 800203a:	431d      	orrs	r5, r3
 800203c:	9b00      	ldr	r3, [sp, #0]
 800203e:	4059      	eors	r1, r3
 8002040:	b2cb      	uxtb	r3, r1
 8002042:	9303      	str	r3, [sp, #12]
 8002044:	2d0a      	cmp	r5, #10
 8002046:	dd00      	ble.n	800204a <__aeabi_dmul+0x1ae>
 8002048:	e133      	b.n	80022b2 <__aeabi_dmul+0x416>
 800204a:	2301      	movs	r3, #1
 800204c:	40ab      	lsls	r3, r5
 800204e:	001d      	movs	r5, r3
 8002050:	2303      	movs	r3, #3
 8002052:	9302      	str	r3, [sp, #8]
 8002054:	2288      	movs	r2, #136	@ 0x88
 8002056:	422a      	tst	r2, r5
 8002058:	d197      	bne.n	8001f8a <__aeabi_dmul+0xee>
 800205a:	4642      	mov	r2, r8
 800205c:	4643      	mov	r3, r8
 800205e:	0412      	lsls	r2, r2, #16
 8002060:	0c12      	lsrs	r2, r2, #16
 8002062:	0016      	movs	r6, r2
 8002064:	9801      	ldr	r0, [sp, #4]
 8002066:	0c1d      	lsrs	r5, r3, #16
 8002068:	0c03      	lsrs	r3, r0, #16
 800206a:	0400      	lsls	r0, r0, #16
 800206c:	0c00      	lsrs	r0, r0, #16
 800206e:	4346      	muls	r6, r0
 8002070:	46b4      	mov	ip, r6
 8002072:	001e      	movs	r6, r3
 8002074:	436e      	muls	r6, r5
 8002076:	9600      	str	r6, [sp, #0]
 8002078:	0016      	movs	r6, r2
 800207a:	0007      	movs	r7, r0
 800207c:	435e      	muls	r6, r3
 800207e:	4661      	mov	r1, ip
 8002080:	46b0      	mov	r8, r6
 8002082:	436f      	muls	r7, r5
 8002084:	0c0e      	lsrs	r6, r1, #16
 8002086:	44b8      	add	r8, r7
 8002088:	4446      	add	r6, r8
 800208a:	42b7      	cmp	r7, r6
 800208c:	d905      	bls.n	800209a <__aeabi_dmul+0x1fe>
 800208e:	2180      	movs	r1, #128	@ 0x80
 8002090:	0249      	lsls	r1, r1, #9
 8002092:	4688      	mov	r8, r1
 8002094:	9f00      	ldr	r7, [sp, #0]
 8002096:	4447      	add	r7, r8
 8002098:	9700      	str	r7, [sp, #0]
 800209a:	4661      	mov	r1, ip
 800209c:	0409      	lsls	r1, r1, #16
 800209e:	0c09      	lsrs	r1, r1, #16
 80020a0:	0c37      	lsrs	r7, r6, #16
 80020a2:	0436      	lsls	r6, r6, #16
 80020a4:	468c      	mov	ip, r1
 80020a6:	0031      	movs	r1, r6
 80020a8:	4461      	add	r1, ip
 80020aa:	9101      	str	r1, [sp, #4]
 80020ac:	0011      	movs	r1, r2
 80020ae:	0c26      	lsrs	r6, r4, #16
 80020b0:	0424      	lsls	r4, r4, #16
 80020b2:	0c24      	lsrs	r4, r4, #16
 80020b4:	4361      	muls	r1, r4
 80020b6:	468c      	mov	ip, r1
 80020b8:	0021      	movs	r1, r4
 80020ba:	4369      	muls	r1, r5
 80020bc:	4689      	mov	r9, r1
 80020be:	4661      	mov	r1, ip
 80020c0:	0c09      	lsrs	r1, r1, #16
 80020c2:	4688      	mov	r8, r1
 80020c4:	4372      	muls	r2, r6
 80020c6:	444a      	add	r2, r9
 80020c8:	4442      	add	r2, r8
 80020ca:	4375      	muls	r5, r6
 80020cc:	4591      	cmp	r9, r2
 80020ce:	d903      	bls.n	80020d8 <__aeabi_dmul+0x23c>
 80020d0:	2180      	movs	r1, #128	@ 0x80
 80020d2:	0249      	lsls	r1, r1, #9
 80020d4:	4688      	mov	r8, r1
 80020d6:	4445      	add	r5, r8
 80020d8:	0c11      	lsrs	r1, r2, #16
 80020da:	4688      	mov	r8, r1
 80020dc:	4661      	mov	r1, ip
 80020de:	0409      	lsls	r1, r1, #16
 80020e0:	0c09      	lsrs	r1, r1, #16
 80020e2:	468c      	mov	ip, r1
 80020e4:	0412      	lsls	r2, r2, #16
 80020e6:	4462      	add	r2, ip
 80020e8:	18b9      	adds	r1, r7, r2
 80020ea:	9102      	str	r1, [sp, #8]
 80020ec:	4651      	mov	r1, sl
 80020ee:	0c09      	lsrs	r1, r1, #16
 80020f0:	468c      	mov	ip, r1
 80020f2:	4651      	mov	r1, sl
 80020f4:	040f      	lsls	r7, r1, #16
 80020f6:	0c3f      	lsrs	r7, r7, #16
 80020f8:	0039      	movs	r1, r7
 80020fa:	4341      	muls	r1, r0
 80020fc:	4445      	add	r5, r8
 80020fe:	4688      	mov	r8, r1
 8002100:	4661      	mov	r1, ip
 8002102:	4341      	muls	r1, r0
 8002104:	468a      	mov	sl, r1
 8002106:	4641      	mov	r1, r8
 8002108:	4660      	mov	r0, ip
 800210a:	0c09      	lsrs	r1, r1, #16
 800210c:	4689      	mov	r9, r1
 800210e:	4358      	muls	r0, r3
 8002110:	437b      	muls	r3, r7
 8002112:	4453      	add	r3, sl
 8002114:	444b      	add	r3, r9
 8002116:	459a      	cmp	sl, r3
 8002118:	d903      	bls.n	8002122 <__aeabi_dmul+0x286>
 800211a:	2180      	movs	r1, #128	@ 0x80
 800211c:	0249      	lsls	r1, r1, #9
 800211e:	4689      	mov	r9, r1
 8002120:	4448      	add	r0, r9
 8002122:	0c19      	lsrs	r1, r3, #16
 8002124:	4689      	mov	r9, r1
 8002126:	4641      	mov	r1, r8
 8002128:	0409      	lsls	r1, r1, #16
 800212a:	0c09      	lsrs	r1, r1, #16
 800212c:	4688      	mov	r8, r1
 800212e:	0039      	movs	r1, r7
 8002130:	4361      	muls	r1, r4
 8002132:	041b      	lsls	r3, r3, #16
 8002134:	4443      	add	r3, r8
 8002136:	4688      	mov	r8, r1
 8002138:	4661      	mov	r1, ip
 800213a:	434c      	muls	r4, r1
 800213c:	4371      	muls	r1, r6
 800213e:	468c      	mov	ip, r1
 8002140:	4641      	mov	r1, r8
 8002142:	4377      	muls	r7, r6
 8002144:	0c0e      	lsrs	r6, r1, #16
 8002146:	193f      	adds	r7, r7, r4
 8002148:	19f6      	adds	r6, r6, r7
 800214a:	4448      	add	r0, r9
 800214c:	42b4      	cmp	r4, r6
 800214e:	d903      	bls.n	8002158 <__aeabi_dmul+0x2bc>
 8002150:	2180      	movs	r1, #128	@ 0x80
 8002152:	0249      	lsls	r1, r1, #9
 8002154:	4689      	mov	r9, r1
 8002156:	44cc      	add	ip, r9
 8002158:	9902      	ldr	r1, [sp, #8]
 800215a:	9f00      	ldr	r7, [sp, #0]
 800215c:	4689      	mov	r9, r1
 800215e:	0431      	lsls	r1, r6, #16
 8002160:	444f      	add	r7, r9
 8002162:	4689      	mov	r9, r1
 8002164:	4641      	mov	r1, r8
 8002166:	4297      	cmp	r7, r2
 8002168:	4192      	sbcs	r2, r2
 800216a:	040c      	lsls	r4, r1, #16
 800216c:	0c24      	lsrs	r4, r4, #16
 800216e:	444c      	add	r4, r9
 8002170:	18ff      	adds	r7, r7, r3
 8002172:	4252      	negs	r2, r2
 8002174:	1964      	adds	r4, r4, r5
 8002176:	18a1      	adds	r1, r4, r2
 8002178:	429f      	cmp	r7, r3
 800217a:	419b      	sbcs	r3, r3
 800217c:	4688      	mov	r8, r1
 800217e:	4682      	mov	sl, r0
 8002180:	425b      	negs	r3, r3
 8002182:	4699      	mov	r9, r3
 8002184:	4590      	cmp	r8, r2
 8002186:	4192      	sbcs	r2, r2
 8002188:	42ac      	cmp	r4, r5
 800218a:	41a4      	sbcs	r4, r4
 800218c:	44c2      	add	sl, r8
 800218e:	44d1      	add	r9, sl
 8002190:	4252      	negs	r2, r2
 8002192:	4264      	negs	r4, r4
 8002194:	4314      	orrs	r4, r2
 8002196:	4599      	cmp	r9, r3
 8002198:	419b      	sbcs	r3, r3
 800219a:	4582      	cmp	sl, r0
 800219c:	4192      	sbcs	r2, r2
 800219e:	425b      	negs	r3, r3
 80021a0:	4252      	negs	r2, r2
 80021a2:	4313      	orrs	r3, r2
 80021a4:	464a      	mov	r2, r9
 80021a6:	0c36      	lsrs	r6, r6, #16
 80021a8:	19a4      	adds	r4, r4, r6
 80021aa:	18e3      	adds	r3, r4, r3
 80021ac:	4463      	add	r3, ip
 80021ae:	025b      	lsls	r3, r3, #9
 80021b0:	0dd2      	lsrs	r2, r2, #23
 80021b2:	431a      	orrs	r2, r3
 80021b4:	9901      	ldr	r1, [sp, #4]
 80021b6:	4692      	mov	sl, r2
 80021b8:	027a      	lsls	r2, r7, #9
 80021ba:	430a      	orrs	r2, r1
 80021bc:	1e50      	subs	r0, r2, #1
 80021be:	4182      	sbcs	r2, r0
 80021c0:	0dff      	lsrs	r7, r7, #23
 80021c2:	4317      	orrs	r7, r2
 80021c4:	464a      	mov	r2, r9
 80021c6:	0252      	lsls	r2, r2, #9
 80021c8:	4317      	orrs	r7, r2
 80021ca:	46b8      	mov	r8, r7
 80021cc:	01db      	lsls	r3, r3, #7
 80021ce:	d500      	bpl.n	80021d2 <__aeabi_dmul+0x336>
 80021d0:	e6ed      	b.n	8001fae <__aeabi_dmul+0x112>
 80021d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002208 <__aeabi_dmul+0x36c>)
 80021d4:	9a03      	ldr	r2, [sp, #12]
 80021d6:	445b      	add	r3, fp
 80021d8:	4691      	mov	r9, r2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	dc00      	bgt.n	80021e0 <__aeabi_dmul+0x344>
 80021de:	e0ac      	b.n	800233a <__aeabi_dmul+0x49e>
 80021e0:	003a      	movs	r2, r7
 80021e2:	0752      	lsls	r2, r2, #29
 80021e4:	d100      	bne.n	80021e8 <__aeabi_dmul+0x34c>
 80021e6:	e710      	b.n	800200a <__aeabi_dmul+0x16e>
 80021e8:	220f      	movs	r2, #15
 80021ea:	4658      	mov	r0, fp
 80021ec:	403a      	ands	r2, r7
 80021ee:	2a04      	cmp	r2, #4
 80021f0:	d000      	beq.n	80021f4 <__aeabi_dmul+0x358>
 80021f2:	e6f9      	b.n	8001fe8 <__aeabi_dmul+0x14c>
 80021f4:	e709      	b.n	800200a <__aeabi_dmul+0x16e>
 80021f6:	46c0      	nop			@ (mov r8, r8)
 80021f8:	000007ff 	.word	0x000007ff
 80021fc:	fffffc01 	.word	0xfffffc01
 8002200:	feffffff 	.word	0xfeffffff
 8002204:	000007fe 	.word	0x000007fe
 8002208:	000003ff 	.word	0x000003ff
 800220c:	0022      	movs	r2, r4
 800220e:	4332      	orrs	r2, r6
 8002210:	d06f      	beq.n	80022f2 <__aeabi_dmul+0x456>
 8002212:	2c00      	cmp	r4, #0
 8002214:	d100      	bne.n	8002218 <__aeabi_dmul+0x37c>
 8002216:	e0c2      	b.n	800239e <__aeabi_dmul+0x502>
 8002218:	0020      	movs	r0, r4
 800221a:	f000 fe27 	bl	8002e6c <__clzsi2>
 800221e:	0002      	movs	r2, r0
 8002220:	0003      	movs	r3, r0
 8002222:	3a0b      	subs	r2, #11
 8002224:	201d      	movs	r0, #29
 8002226:	1a82      	subs	r2, r0, r2
 8002228:	0030      	movs	r0, r6
 800222a:	0019      	movs	r1, r3
 800222c:	40d0      	lsrs	r0, r2
 800222e:	3908      	subs	r1, #8
 8002230:	408c      	lsls	r4, r1
 8002232:	0002      	movs	r2, r0
 8002234:	4322      	orrs	r2, r4
 8002236:	0034      	movs	r4, r6
 8002238:	408c      	lsls	r4, r1
 800223a:	4659      	mov	r1, fp
 800223c:	1acb      	subs	r3, r1, r3
 800223e:	4986      	ldr	r1, [pc, #536]	@ (8002458 <__aeabi_dmul+0x5bc>)
 8002240:	468b      	mov	fp, r1
 8002242:	449b      	add	fp, r3
 8002244:	2d0a      	cmp	r5, #10
 8002246:	dd00      	ble.n	800224a <__aeabi_dmul+0x3ae>
 8002248:	e6a4      	b.n	8001f94 <__aeabi_dmul+0xf8>
 800224a:	4649      	mov	r1, r9
 800224c:	9b00      	ldr	r3, [sp, #0]
 800224e:	9401      	str	r4, [sp, #4]
 8002250:	4059      	eors	r1, r3
 8002252:	b2cb      	uxtb	r3, r1
 8002254:	0014      	movs	r4, r2
 8002256:	2000      	movs	r0, #0
 8002258:	9303      	str	r3, [sp, #12]
 800225a:	2d02      	cmp	r5, #2
 800225c:	dd00      	ble.n	8002260 <__aeabi_dmul+0x3c4>
 800225e:	e667      	b.n	8001f30 <__aeabi_dmul+0x94>
 8002260:	e6fb      	b.n	800205a <__aeabi_dmul+0x1be>
 8002262:	4653      	mov	r3, sl
 8002264:	4303      	orrs	r3, r0
 8002266:	4698      	mov	r8, r3
 8002268:	d03c      	beq.n	80022e4 <__aeabi_dmul+0x448>
 800226a:	4653      	mov	r3, sl
 800226c:	2b00      	cmp	r3, #0
 800226e:	d100      	bne.n	8002272 <__aeabi_dmul+0x3d6>
 8002270:	e0a3      	b.n	80023ba <__aeabi_dmul+0x51e>
 8002272:	4650      	mov	r0, sl
 8002274:	f000 fdfa 	bl	8002e6c <__clzsi2>
 8002278:	230b      	movs	r3, #11
 800227a:	425b      	negs	r3, r3
 800227c:	469c      	mov	ip, r3
 800227e:	0002      	movs	r2, r0
 8002280:	4484      	add	ip, r0
 8002282:	0011      	movs	r1, r2
 8002284:	4650      	mov	r0, sl
 8002286:	3908      	subs	r1, #8
 8002288:	4088      	lsls	r0, r1
 800228a:	231d      	movs	r3, #29
 800228c:	4680      	mov	r8, r0
 800228e:	4660      	mov	r0, ip
 8002290:	1a1b      	subs	r3, r3, r0
 8002292:	0020      	movs	r0, r4
 8002294:	40d8      	lsrs	r0, r3
 8002296:	0003      	movs	r3, r0
 8002298:	4640      	mov	r0, r8
 800229a:	4303      	orrs	r3, r0
 800229c:	469a      	mov	sl, r3
 800229e:	0023      	movs	r3, r4
 80022a0:	408b      	lsls	r3, r1
 80022a2:	4698      	mov	r8, r3
 80022a4:	4b6c      	ldr	r3, [pc, #432]	@ (8002458 <__aeabi_dmul+0x5bc>)
 80022a6:	2500      	movs	r5, #0
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	469b      	mov	fp, r3
 80022ac:	2300      	movs	r3, #0
 80022ae:	9302      	str	r3, [sp, #8]
 80022b0:	e61a      	b.n	8001ee8 <__aeabi_dmul+0x4c>
 80022b2:	2d0f      	cmp	r5, #15
 80022b4:	d000      	beq.n	80022b8 <__aeabi_dmul+0x41c>
 80022b6:	e0c9      	b.n	800244c <__aeabi_dmul+0x5b0>
 80022b8:	2380      	movs	r3, #128	@ 0x80
 80022ba:	4652      	mov	r2, sl
 80022bc:	031b      	lsls	r3, r3, #12
 80022be:	421a      	tst	r2, r3
 80022c0:	d002      	beq.n	80022c8 <__aeabi_dmul+0x42c>
 80022c2:	421c      	tst	r4, r3
 80022c4:	d100      	bne.n	80022c8 <__aeabi_dmul+0x42c>
 80022c6:	e092      	b.n	80023ee <__aeabi_dmul+0x552>
 80022c8:	2480      	movs	r4, #128	@ 0x80
 80022ca:	4653      	mov	r3, sl
 80022cc:	0324      	lsls	r4, r4, #12
 80022ce:	431c      	orrs	r4, r3
 80022d0:	0324      	lsls	r4, r4, #12
 80022d2:	4642      	mov	r2, r8
 80022d4:	0b24      	lsrs	r4, r4, #12
 80022d6:	e63e      	b.n	8001f56 <__aeabi_dmul+0xba>
 80022d8:	469b      	mov	fp, r3
 80022da:	2303      	movs	r3, #3
 80022dc:	4680      	mov	r8, r0
 80022de:	250c      	movs	r5, #12
 80022e0:	9302      	str	r3, [sp, #8]
 80022e2:	e601      	b.n	8001ee8 <__aeabi_dmul+0x4c>
 80022e4:	2300      	movs	r3, #0
 80022e6:	469a      	mov	sl, r3
 80022e8:	469b      	mov	fp, r3
 80022ea:	3301      	adds	r3, #1
 80022ec:	2504      	movs	r5, #4
 80022ee:	9302      	str	r3, [sp, #8]
 80022f0:	e5fa      	b.n	8001ee8 <__aeabi_dmul+0x4c>
 80022f2:	2101      	movs	r1, #1
 80022f4:	430d      	orrs	r5, r1
 80022f6:	2d0a      	cmp	r5, #10
 80022f8:	dd00      	ble.n	80022fc <__aeabi_dmul+0x460>
 80022fa:	e64b      	b.n	8001f94 <__aeabi_dmul+0xf8>
 80022fc:	4649      	mov	r1, r9
 80022fe:	9800      	ldr	r0, [sp, #0]
 8002300:	4041      	eors	r1, r0
 8002302:	b2c9      	uxtb	r1, r1
 8002304:	9103      	str	r1, [sp, #12]
 8002306:	2d02      	cmp	r5, #2
 8002308:	dc00      	bgt.n	800230c <__aeabi_dmul+0x470>
 800230a:	e096      	b.n	800243a <__aeabi_dmul+0x59e>
 800230c:	2300      	movs	r3, #0
 800230e:	2400      	movs	r4, #0
 8002310:	2001      	movs	r0, #1
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	e60c      	b.n	8001f30 <__aeabi_dmul+0x94>
 8002316:	4649      	mov	r1, r9
 8002318:	2302      	movs	r3, #2
 800231a:	9a00      	ldr	r2, [sp, #0]
 800231c:	432b      	orrs	r3, r5
 800231e:	4051      	eors	r1, r2
 8002320:	b2ca      	uxtb	r2, r1
 8002322:	9203      	str	r2, [sp, #12]
 8002324:	2b0a      	cmp	r3, #10
 8002326:	dd00      	ble.n	800232a <__aeabi_dmul+0x48e>
 8002328:	e634      	b.n	8001f94 <__aeabi_dmul+0xf8>
 800232a:	2d00      	cmp	r5, #0
 800232c:	d157      	bne.n	80023de <__aeabi_dmul+0x542>
 800232e:	9b03      	ldr	r3, [sp, #12]
 8002330:	4699      	mov	r9, r3
 8002332:	2400      	movs	r4, #0
 8002334:	2200      	movs	r2, #0
 8002336:	4b49      	ldr	r3, [pc, #292]	@ (800245c <__aeabi_dmul+0x5c0>)
 8002338:	e60e      	b.n	8001f58 <__aeabi_dmul+0xbc>
 800233a:	4658      	mov	r0, fp
 800233c:	2101      	movs	r1, #1
 800233e:	1ac9      	subs	r1, r1, r3
 8002340:	2938      	cmp	r1, #56	@ 0x38
 8002342:	dd00      	ble.n	8002346 <__aeabi_dmul+0x4aa>
 8002344:	e62f      	b.n	8001fa6 <__aeabi_dmul+0x10a>
 8002346:	291f      	cmp	r1, #31
 8002348:	dd56      	ble.n	80023f8 <__aeabi_dmul+0x55c>
 800234a:	221f      	movs	r2, #31
 800234c:	4654      	mov	r4, sl
 800234e:	4252      	negs	r2, r2
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	40dc      	lsrs	r4, r3
 8002354:	2920      	cmp	r1, #32
 8002356:	d007      	beq.n	8002368 <__aeabi_dmul+0x4cc>
 8002358:	4b41      	ldr	r3, [pc, #260]	@ (8002460 <__aeabi_dmul+0x5c4>)
 800235a:	4642      	mov	r2, r8
 800235c:	469c      	mov	ip, r3
 800235e:	4653      	mov	r3, sl
 8002360:	4460      	add	r0, ip
 8002362:	4083      	lsls	r3, r0
 8002364:	431a      	orrs	r2, r3
 8002366:	4690      	mov	r8, r2
 8002368:	4642      	mov	r2, r8
 800236a:	2107      	movs	r1, #7
 800236c:	1e53      	subs	r3, r2, #1
 800236e:	419a      	sbcs	r2, r3
 8002370:	000b      	movs	r3, r1
 8002372:	4322      	orrs	r2, r4
 8002374:	4013      	ands	r3, r2
 8002376:	2400      	movs	r4, #0
 8002378:	4211      	tst	r1, r2
 800237a:	d009      	beq.n	8002390 <__aeabi_dmul+0x4f4>
 800237c:	230f      	movs	r3, #15
 800237e:	4013      	ands	r3, r2
 8002380:	2b04      	cmp	r3, #4
 8002382:	d05d      	beq.n	8002440 <__aeabi_dmul+0x5a4>
 8002384:	1d11      	adds	r1, r2, #4
 8002386:	4291      	cmp	r1, r2
 8002388:	419b      	sbcs	r3, r3
 800238a:	000a      	movs	r2, r1
 800238c:	425b      	negs	r3, r3
 800238e:	075b      	lsls	r3, r3, #29
 8002390:	08d2      	lsrs	r2, r2, #3
 8002392:	431a      	orrs	r2, r3
 8002394:	2300      	movs	r3, #0
 8002396:	e5df      	b.n	8001f58 <__aeabi_dmul+0xbc>
 8002398:	9b03      	ldr	r3, [sp, #12]
 800239a:	4699      	mov	r9, r3
 800239c:	e5fa      	b.n	8001f94 <__aeabi_dmul+0xf8>
 800239e:	9801      	ldr	r0, [sp, #4]
 80023a0:	f000 fd64 	bl	8002e6c <__clzsi2>
 80023a4:	0002      	movs	r2, r0
 80023a6:	0003      	movs	r3, r0
 80023a8:	3215      	adds	r2, #21
 80023aa:	3320      	adds	r3, #32
 80023ac:	2a1c      	cmp	r2, #28
 80023ae:	dc00      	bgt.n	80023b2 <__aeabi_dmul+0x516>
 80023b0:	e738      	b.n	8002224 <__aeabi_dmul+0x388>
 80023b2:	9a01      	ldr	r2, [sp, #4]
 80023b4:	3808      	subs	r0, #8
 80023b6:	4082      	lsls	r2, r0
 80023b8:	e73f      	b.n	800223a <__aeabi_dmul+0x39e>
 80023ba:	f000 fd57 	bl	8002e6c <__clzsi2>
 80023be:	2315      	movs	r3, #21
 80023c0:	469c      	mov	ip, r3
 80023c2:	4484      	add	ip, r0
 80023c4:	0002      	movs	r2, r0
 80023c6:	4663      	mov	r3, ip
 80023c8:	3220      	adds	r2, #32
 80023ca:	2b1c      	cmp	r3, #28
 80023cc:	dc00      	bgt.n	80023d0 <__aeabi_dmul+0x534>
 80023ce:	e758      	b.n	8002282 <__aeabi_dmul+0x3e6>
 80023d0:	2300      	movs	r3, #0
 80023d2:	4698      	mov	r8, r3
 80023d4:	0023      	movs	r3, r4
 80023d6:	3808      	subs	r0, #8
 80023d8:	4083      	lsls	r3, r0
 80023da:	469a      	mov	sl, r3
 80023dc:	e762      	b.n	80022a4 <__aeabi_dmul+0x408>
 80023de:	001d      	movs	r5, r3
 80023e0:	2300      	movs	r3, #0
 80023e2:	2400      	movs	r4, #0
 80023e4:	2002      	movs	r0, #2
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	e5a2      	b.n	8001f30 <__aeabi_dmul+0x94>
 80023ea:	9002      	str	r0, [sp, #8]
 80023ec:	e632      	b.n	8002054 <__aeabi_dmul+0x1b8>
 80023ee:	431c      	orrs	r4, r3
 80023f0:	9b00      	ldr	r3, [sp, #0]
 80023f2:	9a01      	ldr	r2, [sp, #4]
 80023f4:	4699      	mov	r9, r3
 80023f6:	e5ae      	b.n	8001f56 <__aeabi_dmul+0xba>
 80023f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002464 <__aeabi_dmul+0x5c8>)
 80023fa:	4652      	mov	r2, sl
 80023fc:	18c3      	adds	r3, r0, r3
 80023fe:	4640      	mov	r0, r8
 8002400:	409a      	lsls	r2, r3
 8002402:	40c8      	lsrs	r0, r1
 8002404:	4302      	orrs	r2, r0
 8002406:	4640      	mov	r0, r8
 8002408:	4098      	lsls	r0, r3
 800240a:	0003      	movs	r3, r0
 800240c:	1e58      	subs	r0, r3, #1
 800240e:	4183      	sbcs	r3, r0
 8002410:	4654      	mov	r4, sl
 8002412:	431a      	orrs	r2, r3
 8002414:	40cc      	lsrs	r4, r1
 8002416:	0753      	lsls	r3, r2, #29
 8002418:	d009      	beq.n	800242e <__aeabi_dmul+0x592>
 800241a:	230f      	movs	r3, #15
 800241c:	4013      	ands	r3, r2
 800241e:	2b04      	cmp	r3, #4
 8002420:	d005      	beq.n	800242e <__aeabi_dmul+0x592>
 8002422:	1d13      	adds	r3, r2, #4
 8002424:	4293      	cmp	r3, r2
 8002426:	4192      	sbcs	r2, r2
 8002428:	4252      	negs	r2, r2
 800242a:	18a4      	adds	r4, r4, r2
 800242c:	001a      	movs	r2, r3
 800242e:	0223      	lsls	r3, r4, #8
 8002430:	d508      	bpl.n	8002444 <__aeabi_dmul+0x5a8>
 8002432:	2301      	movs	r3, #1
 8002434:	2400      	movs	r4, #0
 8002436:	2200      	movs	r2, #0
 8002438:	e58e      	b.n	8001f58 <__aeabi_dmul+0xbc>
 800243a:	4689      	mov	r9, r1
 800243c:	2400      	movs	r4, #0
 800243e:	e58b      	b.n	8001f58 <__aeabi_dmul+0xbc>
 8002440:	2300      	movs	r3, #0
 8002442:	e7a5      	b.n	8002390 <__aeabi_dmul+0x4f4>
 8002444:	0763      	lsls	r3, r4, #29
 8002446:	0264      	lsls	r4, r4, #9
 8002448:	0b24      	lsrs	r4, r4, #12
 800244a:	e7a1      	b.n	8002390 <__aeabi_dmul+0x4f4>
 800244c:	9b00      	ldr	r3, [sp, #0]
 800244e:	46a2      	mov	sl, r4
 8002450:	4699      	mov	r9, r3
 8002452:	9b01      	ldr	r3, [sp, #4]
 8002454:	4698      	mov	r8, r3
 8002456:	e737      	b.n	80022c8 <__aeabi_dmul+0x42c>
 8002458:	fffffc0d 	.word	0xfffffc0d
 800245c:	000007ff 	.word	0x000007ff
 8002460:	0000043e 	.word	0x0000043e
 8002464:	0000041e 	.word	0x0000041e

08002468 <__aeabi_dsub>:
 8002468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800246a:	4657      	mov	r7, sl
 800246c:	464e      	mov	r6, r9
 800246e:	4645      	mov	r5, r8
 8002470:	46de      	mov	lr, fp
 8002472:	b5e0      	push	{r5, r6, r7, lr}
 8002474:	b083      	sub	sp, #12
 8002476:	9000      	str	r0, [sp, #0]
 8002478:	9101      	str	r1, [sp, #4]
 800247a:	030c      	lsls	r4, r1, #12
 800247c:	004d      	lsls	r5, r1, #1
 800247e:	0fce      	lsrs	r6, r1, #31
 8002480:	0a61      	lsrs	r1, r4, #9
 8002482:	9c00      	ldr	r4, [sp, #0]
 8002484:	005f      	lsls	r7, r3, #1
 8002486:	0f64      	lsrs	r4, r4, #29
 8002488:	430c      	orrs	r4, r1
 800248a:	9900      	ldr	r1, [sp, #0]
 800248c:	9200      	str	r2, [sp, #0]
 800248e:	9301      	str	r3, [sp, #4]
 8002490:	00c8      	lsls	r0, r1, #3
 8002492:	0319      	lsls	r1, r3, #12
 8002494:	0d7b      	lsrs	r3, r7, #21
 8002496:	4699      	mov	r9, r3
 8002498:	9b01      	ldr	r3, [sp, #4]
 800249a:	4fcc      	ldr	r7, [pc, #816]	@ (80027cc <__aeabi_dsub+0x364>)
 800249c:	0fdb      	lsrs	r3, r3, #31
 800249e:	469c      	mov	ip, r3
 80024a0:	0a4b      	lsrs	r3, r1, #9
 80024a2:	9900      	ldr	r1, [sp, #0]
 80024a4:	4680      	mov	r8, r0
 80024a6:	0f49      	lsrs	r1, r1, #29
 80024a8:	4319      	orrs	r1, r3
 80024aa:	9b00      	ldr	r3, [sp, #0]
 80024ac:	468b      	mov	fp, r1
 80024ae:	00da      	lsls	r2, r3, #3
 80024b0:	4692      	mov	sl, r2
 80024b2:	0d6d      	lsrs	r5, r5, #21
 80024b4:	45b9      	cmp	r9, r7
 80024b6:	d100      	bne.n	80024ba <__aeabi_dsub+0x52>
 80024b8:	e0bf      	b.n	800263a <__aeabi_dsub+0x1d2>
 80024ba:	2301      	movs	r3, #1
 80024bc:	4661      	mov	r1, ip
 80024be:	4059      	eors	r1, r3
 80024c0:	464b      	mov	r3, r9
 80024c2:	468c      	mov	ip, r1
 80024c4:	1aeb      	subs	r3, r5, r3
 80024c6:	428e      	cmp	r6, r1
 80024c8:	d075      	beq.n	80025b6 <__aeabi_dsub+0x14e>
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	dc00      	bgt.n	80024d0 <__aeabi_dsub+0x68>
 80024ce:	e2a3      	b.n	8002a18 <__aeabi_dsub+0x5b0>
 80024d0:	4649      	mov	r1, r9
 80024d2:	2900      	cmp	r1, #0
 80024d4:	d100      	bne.n	80024d8 <__aeabi_dsub+0x70>
 80024d6:	e0ce      	b.n	8002676 <__aeabi_dsub+0x20e>
 80024d8:	42bd      	cmp	r5, r7
 80024da:	d100      	bne.n	80024de <__aeabi_dsub+0x76>
 80024dc:	e200      	b.n	80028e0 <__aeabi_dsub+0x478>
 80024de:	2701      	movs	r7, #1
 80024e0:	2b38      	cmp	r3, #56	@ 0x38
 80024e2:	dc19      	bgt.n	8002518 <__aeabi_dsub+0xb0>
 80024e4:	2780      	movs	r7, #128	@ 0x80
 80024e6:	4659      	mov	r1, fp
 80024e8:	043f      	lsls	r7, r7, #16
 80024ea:	4339      	orrs	r1, r7
 80024ec:	468b      	mov	fp, r1
 80024ee:	2b1f      	cmp	r3, #31
 80024f0:	dd00      	ble.n	80024f4 <__aeabi_dsub+0x8c>
 80024f2:	e1fa      	b.n	80028ea <__aeabi_dsub+0x482>
 80024f4:	2720      	movs	r7, #32
 80024f6:	1af9      	subs	r1, r7, r3
 80024f8:	468c      	mov	ip, r1
 80024fa:	4659      	mov	r1, fp
 80024fc:	4667      	mov	r7, ip
 80024fe:	40b9      	lsls	r1, r7
 8002500:	000f      	movs	r7, r1
 8002502:	0011      	movs	r1, r2
 8002504:	40d9      	lsrs	r1, r3
 8002506:	430f      	orrs	r7, r1
 8002508:	4661      	mov	r1, ip
 800250a:	408a      	lsls	r2, r1
 800250c:	1e51      	subs	r1, r2, #1
 800250e:	418a      	sbcs	r2, r1
 8002510:	4659      	mov	r1, fp
 8002512:	40d9      	lsrs	r1, r3
 8002514:	4317      	orrs	r7, r2
 8002516:	1a64      	subs	r4, r4, r1
 8002518:	1bc7      	subs	r7, r0, r7
 800251a:	42b8      	cmp	r0, r7
 800251c:	4180      	sbcs	r0, r0
 800251e:	4240      	negs	r0, r0
 8002520:	1a24      	subs	r4, r4, r0
 8002522:	0223      	lsls	r3, r4, #8
 8002524:	d400      	bmi.n	8002528 <__aeabi_dsub+0xc0>
 8002526:	e140      	b.n	80027aa <__aeabi_dsub+0x342>
 8002528:	0264      	lsls	r4, r4, #9
 800252a:	0a64      	lsrs	r4, r4, #9
 800252c:	2c00      	cmp	r4, #0
 800252e:	d100      	bne.n	8002532 <__aeabi_dsub+0xca>
 8002530:	e154      	b.n	80027dc <__aeabi_dsub+0x374>
 8002532:	0020      	movs	r0, r4
 8002534:	f000 fc9a 	bl	8002e6c <__clzsi2>
 8002538:	0003      	movs	r3, r0
 800253a:	3b08      	subs	r3, #8
 800253c:	2120      	movs	r1, #32
 800253e:	0038      	movs	r0, r7
 8002540:	1aca      	subs	r2, r1, r3
 8002542:	40d0      	lsrs	r0, r2
 8002544:	409c      	lsls	r4, r3
 8002546:	0002      	movs	r2, r0
 8002548:	409f      	lsls	r7, r3
 800254a:	4322      	orrs	r2, r4
 800254c:	429d      	cmp	r5, r3
 800254e:	dd00      	ble.n	8002552 <__aeabi_dsub+0xea>
 8002550:	e1a6      	b.n	80028a0 <__aeabi_dsub+0x438>
 8002552:	1b58      	subs	r0, r3, r5
 8002554:	3001      	adds	r0, #1
 8002556:	1a09      	subs	r1, r1, r0
 8002558:	003c      	movs	r4, r7
 800255a:	408f      	lsls	r7, r1
 800255c:	40c4      	lsrs	r4, r0
 800255e:	1e7b      	subs	r3, r7, #1
 8002560:	419f      	sbcs	r7, r3
 8002562:	0013      	movs	r3, r2
 8002564:	408b      	lsls	r3, r1
 8002566:	4327      	orrs	r7, r4
 8002568:	431f      	orrs	r7, r3
 800256a:	40c2      	lsrs	r2, r0
 800256c:	003b      	movs	r3, r7
 800256e:	0014      	movs	r4, r2
 8002570:	2500      	movs	r5, #0
 8002572:	4313      	orrs	r3, r2
 8002574:	d100      	bne.n	8002578 <__aeabi_dsub+0x110>
 8002576:	e1f7      	b.n	8002968 <__aeabi_dsub+0x500>
 8002578:	077b      	lsls	r3, r7, #29
 800257a:	d100      	bne.n	800257e <__aeabi_dsub+0x116>
 800257c:	e377      	b.n	8002c6e <__aeabi_dsub+0x806>
 800257e:	230f      	movs	r3, #15
 8002580:	0038      	movs	r0, r7
 8002582:	403b      	ands	r3, r7
 8002584:	2b04      	cmp	r3, #4
 8002586:	d004      	beq.n	8002592 <__aeabi_dsub+0x12a>
 8002588:	1d38      	adds	r0, r7, #4
 800258a:	42b8      	cmp	r0, r7
 800258c:	41bf      	sbcs	r7, r7
 800258e:	427f      	negs	r7, r7
 8002590:	19e4      	adds	r4, r4, r7
 8002592:	0223      	lsls	r3, r4, #8
 8002594:	d400      	bmi.n	8002598 <__aeabi_dsub+0x130>
 8002596:	e368      	b.n	8002c6a <__aeabi_dsub+0x802>
 8002598:	4b8c      	ldr	r3, [pc, #560]	@ (80027cc <__aeabi_dsub+0x364>)
 800259a:	3501      	adds	r5, #1
 800259c:	429d      	cmp	r5, r3
 800259e:	d100      	bne.n	80025a2 <__aeabi_dsub+0x13a>
 80025a0:	e0f4      	b.n	800278c <__aeabi_dsub+0x324>
 80025a2:	4b8b      	ldr	r3, [pc, #556]	@ (80027d0 <__aeabi_dsub+0x368>)
 80025a4:	056d      	lsls	r5, r5, #21
 80025a6:	401c      	ands	r4, r3
 80025a8:	0d6d      	lsrs	r5, r5, #21
 80025aa:	0767      	lsls	r7, r4, #29
 80025ac:	08c0      	lsrs	r0, r0, #3
 80025ae:	0264      	lsls	r4, r4, #9
 80025b0:	4307      	orrs	r7, r0
 80025b2:	0b24      	lsrs	r4, r4, #12
 80025b4:	e0ec      	b.n	8002790 <__aeabi_dsub+0x328>
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	dc00      	bgt.n	80025bc <__aeabi_dsub+0x154>
 80025ba:	e329      	b.n	8002c10 <__aeabi_dsub+0x7a8>
 80025bc:	4649      	mov	r1, r9
 80025be:	2900      	cmp	r1, #0
 80025c0:	d000      	beq.n	80025c4 <__aeabi_dsub+0x15c>
 80025c2:	e0d6      	b.n	8002772 <__aeabi_dsub+0x30a>
 80025c4:	4659      	mov	r1, fp
 80025c6:	4311      	orrs	r1, r2
 80025c8:	d100      	bne.n	80025cc <__aeabi_dsub+0x164>
 80025ca:	e12e      	b.n	800282a <__aeabi_dsub+0x3c2>
 80025cc:	1e59      	subs	r1, r3, #1
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d100      	bne.n	80025d4 <__aeabi_dsub+0x16c>
 80025d2:	e1e6      	b.n	80029a2 <__aeabi_dsub+0x53a>
 80025d4:	42bb      	cmp	r3, r7
 80025d6:	d100      	bne.n	80025da <__aeabi_dsub+0x172>
 80025d8:	e182      	b.n	80028e0 <__aeabi_dsub+0x478>
 80025da:	2701      	movs	r7, #1
 80025dc:	000b      	movs	r3, r1
 80025de:	2938      	cmp	r1, #56	@ 0x38
 80025e0:	dc14      	bgt.n	800260c <__aeabi_dsub+0x1a4>
 80025e2:	2b1f      	cmp	r3, #31
 80025e4:	dd00      	ble.n	80025e8 <__aeabi_dsub+0x180>
 80025e6:	e23c      	b.n	8002a62 <__aeabi_dsub+0x5fa>
 80025e8:	2720      	movs	r7, #32
 80025ea:	1af9      	subs	r1, r7, r3
 80025ec:	468c      	mov	ip, r1
 80025ee:	4659      	mov	r1, fp
 80025f0:	4667      	mov	r7, ip
 80025f2:	40b9      	lsls	r1, r7
 80025f4:	000f      	movs	r7, r1
 80025f6:	0011      	movs	r1, r2
 80025f8:	40d9      	lsrs	r1, r3
 80025fa:	430f      	orrs	r7, r1
 80025fc:	4661      	mov	r1, ip
 80025fe:	408a      	lsls	r2, r1
 8002600:	1e51      	subs	r1, r2, #1
 8002602:	418a      	sbcs	r2, r1
 8002604:	4659      	mov	r1, fp
 8002606:	40d9      	lsrs	r1, r3
 8002608:	4317      	orrs	r7, r2
 800260a:	1864      	adds	r4, r4, r1
 800260c:	183f      	adds	r7, r7, r0
 800260e:	4287      	cmp	r7, r0
 8002610:	4180      	sbcs	r0, r0
 8002612:	4240      	negs	r0, r0
 8002614:	1824      	adds	r4, r4, r0
 8002616:	0223      	lsls	r3, r4, #8
 8002618:	d400      	bmi.n	800261c <__aeabi_dsub+0x1b4>
 800261a:	e0c6      	b.n	80027aa <__aeabi_dsub+0x342>
 800261c:	4b6b      	ldr	r3, [pc, #428]	@ (80027cc <__aeabi_dsub+0x364>)
 800261e:	3501      	adds	r5, #1
 8002620:	429d      	cmp	r5, r3
 8002622:	d100      	bne.n	8002626 <__aeabi_dsub+0x1be>
 8002624:	e0b2      	b.n	800278c <__aeabi_dsub+0x324>
 8002626:	2101      	movs	r1, #1
 8002628:	4b69      	ldr	r3, [pc, #420]	@ (80027d0 <__aeabi_dsub+0x368>)
 800262a:	087a      	lsrs	r2, r7, #1
 800262c:	401c      	ands	r4, r3
 800262e:	4039      	ands	r1, r7
 8002630:	430a      	orrs	r2, r1
 8002632:	07e7      	lsls	r7, r4, #31
 8002634:	4317      	orrs	r7, r2
 8002636:	0864      	lsrs	r4, r4, #1
 8002638:	e79e      	b.n	8002578 <__aeabi_dsub+0x110>
 800263a:	4b66      	ldr	r3, [pc, #408]	@ (80027d4 <__aeabi_dsub+0x36c>)
 800263c:	4311      	orrs	r1, r2
 800263e:	468a      	mov	sl, r1
 8002640:	18eb      	adds	r3, r5, r3
 8002642:	2900      	cmp	r1, #0
 8002644:	d028      	beq.n	8002698 <__aeabi_dsub+0x230>
 8002646:	4566      	cmp	r6, ip
 8002648:	d02c      	beq.n	80026a4 <__aeabi_dsub+0x23c>
 800264a:	2b00      	cmp	r3, #0
 800264c:	d05b      	beq.n	8002706 <__aeabi_dsub+0x29e>
 800264e:	2d00      	cmp	r5, #0
 8002650:	d100      	bne.n	8002654 <__aeabi_dsub+0x1ec>
 8002652:	e12c      	b.n	80028ae <__aeabi_dsub+0x446>
 8002654:	465b      	mov	r3, fp
 8002656:	4666      	mov	r6, ip
 8002658:	075f      	lsls	r7, r3, #29
 800265a:	08d2      	lsrs	r2, r2, #3
 800265c:	4317      	orrs	r7, r2
 800265e:	08dd      	lsrs	r5, r3, #3
 8002660:	003b      	movs	r3, r7
 8002662:	432b      	orrs	r3, r5
 8002664:	d100      	bne.n	8002668 <__aeabi_dsub+0x200>
 8002666:	e0e2      	b.n	800282e <__aeabi_dsub+0x3c6>
 8002668:	2480      	movs	r4, #128	@ 0x80
 800266a:	0324      	lsls	r4, r4, #12
 800266c:	432c      	orrs	r4, r5
 800266e:	0324      	lsls	r4, r4, #12
 8002670:	4d56      	ldr	r5, [pc, #344]	@ (80027cc <__aeabi_dsub+0x364>)
 8002672:	0b24      	lsrs	r4, r4, #12
 8002674:	e08c      	b.n	8002790 <__aeabi_dsub+0x328>
 8002676:	4659      	mov	r1, fp
 8002678:	4311      	orrs	r1, r2
 800267a:	d100      	bne.n	800267e <__aeabi_dsub+0x216>
 800267c:	e0d5      	b.n	800282a <__aeabi_dsub+0x3c2>
 800267e:	1e59      	subs	r1, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d100      	bne.n	8002686 <__aeabi_dsub+0x21e>
 8002684:	e1b9      	b.n	80029fa <__aeabi_dsub+0x592>
 8002686:	42bb      	cmp	r3, r7
 8002688:	d100      	bne.n	800268c <__aeabi_dsub+0x224>
 800268a:	e1b1      	b.n	80029f0 <__aeabi_dsub+0x588>
 800268c:	2701      	movs	r7, #1
 800268e:	000b      	movs	r3, r1
 8002690:	2938      	cmp	r1, #56	@ 0x38
 8002692:	dd00      	ble.n	8002696 <__aeabi_dsub+0x22e>
 8002694:	e740      	b.n	8002518 <__aeabi_dsub+0xb0>
 8002696:	e72a      	b.n	80024ee <__aeabi_dsub+0x86>
 8002698:	4661      	mov	r1, ip
 800269a:	2701      	movs	r7, #1
 800269c:	4079      	eors	r1, r7
 800269e:	468c      	mov	ip, r1
 80026a0:	4566      	cmp	r6, ip
 80026a2:	d1d2      	bne.n	800264a <__aeabi_dsub+0x1e2>
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d100      	bne.n	80026aa <__aeabi_dsub+0x242>
 80026a8:	e0c5      	b.n	8002836 <__aeabi_dsub+0x3ce>
 80026aa:	2d00      	cmp	r5, #0
 80026ac:	d000      	beq.n	80026b0 <__aeabi_dsub+0x248>
 80026ae:	e155      	b.n	800295c <__aeabi_dsub+0x4f4>
 80026b0:	464b      	mov	r3, r9
 80026b2:	0025      	movs	r5, r4
 80026b4:	4305      	orrs	r5, r0
 80026b6:	d100      	bne.n	80026ba <__aeabi_dsub+0x252>
 80026b8:	e212      	b.n	8002ae0 <__aeabi_dsub+0x678>
 80026ba:	1e59      	subs	r1, r3, #1
 80026bc:	468c      	mov	ip, r1
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d100      	bne.n	80026c4 <__aeabi_dsub+0x25c>
 80026c2:	e249      	b.n	8002b58 <__aeabi_dsub+0x6f0>
 80026c4:	4d41      	ldr	r5, [pc, #260]	@ (80027cc <__aeabi_dsub+0x364>)
 80026c6:	42ab      	cmp	r3, r5
 80026c8:	d100      	bne.n	80026cc <__aeabi_dsub+0x264>
 80026ca:	e28f      	b.n	8002bec <__aeabi_dsub+0x784>
 80026cc:	2701      	movs	r7, #1
 80026ce:	2938      	cmp	r1, #56	@ 0x38
 80026d0:	dc11      	bgt.n	80026f6 <__aeabi_dsub+0x28e>
 80026d2:	4663      	mov	r3, ip
 80026d4:	2b1f      	cmp	r3, #31
 80026d6:	dd00      	ble.n	80026da <__aeabi_dsub+0x272>
 80026d8:	e25b      	b.n	8002b92 <__aeabi_dsub+0x72a>
 80026da:	4661      	mov	r1, ip
 80026dc:	2320      	movs	r3, #32
 80026de:	0027      	movs	r7, r4
 80026e0:	1a5b      	subs	r3, r3, r1
 80026e2:	0005      	movs	r5, r0
 80026e4:	4098      	lsls	r0, r3
 80026e6:	409f      	lsls	r7, r3
 80026e8:	40cd      	lsrs	r5, r1
 80026ea:	1e43      	subs	r3, r0, #1
 80026ec:	4198      	sbcs	r0, r3
 80026ee:	40cc      	lsrs	r4, r1
 80026f0:	432f      	orrs	r7, r5
 80026f2:	4307      	orrs	r7, r0
 80026f4:	44a3      	add	fp, r4
 80026f6:	18bf      	adds	r7, r7, r2
 80026f8:	4297      	cmp	r7, r2
 80026fa:	4192      	sbcs	r2, r2
 80026fc:	4252      	negs	r2, r2
 80026fe:	445a      	add	r2, fp
 8002700:	0014      	movs	r4, r2
 8002702:	464d      	mov	r5, r9
 8002704:	e787      	b.n	8002616 <__aeabi_dsub+0x1ae>
 8002706:	4f34      	ldr	r7, [pc, #208]	@ (80027d8 <__aeabi_dsub+0x370>)
 8002708:	1c6b      	adds	r3, r5, #1
 800270a:	423b      	tst	r3, r7
 800270c:	d000      	beq.n	8002710 <__aeabi_dsub+0x2a8>
 800270e:	e0b6      	b.n	800287e <__aeabi_dsub+0x416>
 8002710:	4659      	mov	r1, fp
 8002712:	0023      	movs	r3, r4
 8002714:	4311      	orrs	r1, r2
 8002716:	000f      	movs	r7, r1
 8002718:	4303      	orrs	r3, r0
 800271a:	2d00      	cmp	r5, #0
 800271c:	d000      	beq.n	8002720 <__aeabi_dsub+0x2b8>
 800271e:	e126      	b.n	800296e <__aeabi_dsub+0x506>
 8002720:	2b00      	cmp	r3, #0
 8002722:	d100      	bne.n	8002726 <__aeabi_dsub+0x2be>
 8002724:	e1c0      	b.n	8002aa8 <__aeabi_dsub+0x640>
 8002726:	2900      	cmp	r1, #0
 8002728:	d100      	bne.n	800272c <__aeabi_dsub+0x2c4>
 800272a:	e0a1      	b.n	8002870 <__aeabi_dsub+0x408>
 800272c:	1a83      	subs	r3, r0, r2
 800272e:	4698      	mov	r8, r3
 8002730:	465b      	mov	r3, fp
 8002732:	4540      	cmp	r0, r8
 8002734:	41ad      	sbcs	r5, r5
 8002736:	1ae3      	subs	r3, r4, r3
 8002738:	426d      	negs	r5, r5
 800273a:	1b5b      	subs	r3, r3, r5
 800273c:	2580      	movs	r5, #128	@ 0x80
 800273e:	042d      	lsls	r5, r5, #16
 8002740:	422b      	tst	r3, r5
 8002742:	d100      	bne.n	8002746 <__aeabi_dsub+0x2de>
 8002744:	e14b      	b.n	80029de <__aeabi_dsub+0x576>
 8002746:	465b      	mov	r3, fp
 8002748:	1a10      	subs	r0, r2, r0
 800274a:	4282      	cmp	r2, r0
 800274c:	4192      	sbcs	r2, r2
 800274e:	1b1c      	subs	r4, r3, r4
 8002750:	0007      	movs	r7, r0
 8002752:	2601      	movs	r6, #1
 8002754:	4663      	mov	r3, ip
 8002756:	4252      	negs	r2, r2
 8002758:	1aa4      	subs	r4, r4, r2
 800275a:	4327      	orrs	r7, r4
 800275c:	401e      	ands	r6, r3
 800275e:	2f00      	cmp	r7, #0
 8002760:	d100      	bne.n	8002764 <__aeabi_dsub+0x2fc>
 8002762:	e142      	b.n	80029ea <__aeabi_dsub+0x582>
 8002764:	422c      	tst	r4, r5
 8002766:	d100      	bne.n	800276a <__aeabi_dsub+0x302>
 8002768:	e26d      	b.n	8002c46 <__aeabi_dsub+0x7de>
 800276a:	4b19      	ldr	r3, [pc, #100]	@ (80027d0 <__aeabi_dsub+0x368>)
 800276c:	2501      	movs	r5, #1
 800276e:	401c      	ands	r4, r3
 8002770:	e71b      	b.n	80025aa <__aeabi_dsub+0x142>
 8002772:	42bd      	cmp	r5, r7
 8002774:	d100      	bne.n	8002778 <__aeabi_dsub+0x310>
 8002776:	e13b      	b.n	80029f0 <__aeabi_dsub+0x588>
 8002778:	2701      	movs	r7, #1
 800277a:	2b38      	cmp	r3, #56	@ 0x38
 800277c:	dd00      	ble.n	8002780 <__aeabi_dsub+0x318>
 800277e:	e745      	b.n	800260c <__aeabi_dsub+0x1a4>
 8002780:	2780      	movs	r7, #128	@ 0x80
 8002782:	4659      	mov	r1, fp
 8002784:	043f      	lsls	r7, r7, #16
 8002786:	4339      	orrs	r1, r7
 8002788:	468b      	mov	fp, r1
 800278a:	e72a      	b.n	80025e2 <__aeabi_dsub+0x17a>
 800278c:	2400      	movs	r4, #0
 800278e:	2700      	movs	r7, #0
 8002790:	052d      	lsls	r5, r5, #20
 8002792:	4325      	orrs	r5, r4
 8002794:	07f6      	lsls	r6, r6, #31
 8002796:	4335      	orrs	r5, r6
 8002798:	0038      	movs	r0, r7
 800279a:	0029      	movs	r1, r5
 800279c:	b003      	add	sp, #12
 800279e:	bcf0      	pop	{r4, r5, r6, r7}
 80027a0:	46bb      	mov	fp, r7
 80027a2:	46b2      	mov	sl, r6
 80027a4:	46a9      	mov	r9, r5
 80027a6:	46a0      	mov	r8, r4
 80027a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027aa:	077b      	lsls	r3, r7, #29
 80027ac:	d004      	beq.n	80027b8 <__aeabi_dsub+0x350>
 80027ae:	230f      	movs	r3, #15
 80027b0:	403b      	ands	r3, r7
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d000      	beq.n	80027b8 <__aeabi_dsub+0x350>
 80027b6:	e6e7      	b.n	8002588 <__aeabi_dsub+0x120>
 80027b8:	002b      	movs	r3, r5
 80027ba:	08f8      	lsrs	r0, r7, #3
 80027bc:	4a03      	ldr	r2, [pc, #12]	@ (80027cc <__aeabi_dsub+0x364>)
 80027be:	0767      	lsls	r7, r4, #29
 80027c0:	4307      	orrs	r7, r0
 80027c2:	08e5      	lsrs	r5, r4, #3
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d100      	bne.n	80027ca <__aeabi_dsub+0x362>
 80027c8:	e74a      	b.n	8002660 <__aeabi_dsub+0x1f8>
 80027ca:	e0a5      	b.n	8002918 <__aeabi_dsub+0x4b0>
 80027cc:	000007ff 	.word	0x000007ff
 80027d0:	ff7fffff 	.word	0xff7fffff
 80027d4:	fffff801 	.word	0xfffff801
 80027d8:	000007fe 	.word	0x000007fe
 80027dc:	0038      	movs	r0, r7
 80027de:	f000 fb45 	bl	8002e6c <__clzsi2>
 80027e2:	0003      	movs	r3, r0
 80027e4:	3318      	adds	r3, #24
 80027e6:	2b1f      	cmp	r3, #31
 80027e8:	dc00      	bgt.n	80027ec <__aeabi_dsub+0x384>
 80027ea:	e6a7      	b.n	800253c <__aeabi_dsub+0xd4>
 80027ec:	003a      	movs	r2, r7
 80027ee:	3808      	subs	r0, #8
 80027f0:	4082      	lsls	r2, r0
 80027f2:	429d      	cmp	r5, r3
 80027f4:	dd00      	ble.n	80027f8 <__aeabi_dsub+0x390>
 80027f6:	e08a      	b.n	800290e <__aeabi_dsub+0x4a6>
 80027f8:	1b5b      	subs	r3, r3, r5
 80027fa:	1c58      	adds	r0, r3, #1
 80027fc:	281f      	cmp	r0, #31
 80027fe:	dc00      	bgt.n	8002802 <__aeabi_dsub+0x39a>
 8002800:	e1d8      	b.n	8002bb4 <__aeabi_dsub+0x74c>
 8002802:	0017      	movs	r7, r2
 8002804:	3b1f      	subs	r3, #31
 8002806:	40df      	lsrs	r7, r3
 8002808:	2820      	cmp	r0, #32
 800280a:	d005      	beq.n	8002818 <__aeabi_dsub+0x3b0>
 800280c:	2340      	movs	r3, #64	@ 0x40
 800280e:	1a1b      	subs	r3, r3, r0
 8002810:	409a      	lsls	r2, r3
 8002812:	1e53      	subs	r3, r2, #1
 8002814:	419a      	sbcs	r2, r3
 8002816:	4317      	orrs	r7, r2
 8002818:	2500      	movs	r5, #0
 800281a:	2f00      	cmp	r7, #0
 800281c:	d100      	bne.n	8002820 <__aeabi_dsub+0x3b8>
 800281e:	e0e5      	b.n	80029ec <__aeabi_dsub+0x584>
 8002820:	077b      	lsls	r3, r7, #29
 8002822:	d000      	beq.n	8002826 <__aeabi_dsub+0x3be>
 8002824:	e6ab      	b.n	800257e <__aeabi_dsub+0x116>
 8002826:	002c      	movs	r4, r5
 8002828:	e7c6      	b.n	80027b8 <__aeabi_dsub+0x350>
 800282a:	08c0      	lsrs	r0, r0, #3
 800282c:	e7c6      	b.n	80027bc <__aeabi_dsub+0x354>
 800282e:	2700      	movs	r7, #0
 8002830:	2400      	movs	r4, #0
 8002832:	4dd1      	ldr	r5, [pc, #836]	@ (8002b78 <__aeabi_dsub+0x710>)
 8002834:	e7ac      	b.n	8002790 <__aeabi_dsub+0x328>
 8002836:	4fd1      	ldr	r7, [pc, #836]	@ (8002b7c <__aeabi_dsub+0x714>)
 8002838:	1c6b      	adds	r3, r5, #1
 800283a:	423b      	tst	r3, r7
 800283c:	d171      	bne.n	8002922 <__aeabi_dsub+0x4ba>
 800283e:	0023      	movs	r3, r4
 8002840:	4303      	orrs	r3, r0
 8002842:	2d00      	cmp	r5, #0
 8002844:	d000      	beq.n	8002848 <__aeabi_dsub+0x3e0>
 8002846:	e14e      	b.n	8002ae6 <__aeabi_dsub+0x67e>
 8002848:	4657      	mov	r7, sl
 800284a:	2b00      	cmp	r3, #0
 800284c:	d100      	bne.n	8002850 <__aeabi_dsub+0x3e8>
 800284e:	e1b5      	b.n	8002bbc <__aeabi_dsub+0x754>
 8002850:	2f00      	cmp	r7, #0
 8002852:	d00d      	beq.n	8002870 <__aeabi_dsub+0x408>
 8002854:	1883      	adds	r3, r0, r2
 8002856:	4283      	cmp	r3, r0
 8002858:	4180      	sbcs	r0, r0
 800285a:	445c      	add	r4, fp
 800285c:	4240      	negs	r0, r0
 800285e:	1824      	adds	r4, r4, r0
 8002860:	0222      	lsls	r2, r4, #8
 8002862:	d500      	bpl.n	8002866 <__aeabi_dsub+0x3fe>
 8002864:	e1c8      	b.n	8002bf8 <__aeabi_dsub+0x790>
 8002866:	001f      	movs	r7, r3
 8002868:	4698      	mov	r8, r3
 800286a:	4327      	orrs	r7, r4
 800286c:	d100      	bne.n	8002870 <__aeabi_dsub+0x408>
 800286e:	e0bc      	b.n	80029ea <__aeabi_dsub+0x582>
 8002870:	4643      	mov	r3, r8
 8002872:	0767      	lsls	r7, r4, #29
 8002874:	08db      	lsrs	r3, r3, #3
 8002876:	431f      	orrs	r7, r3
 8002878:	08e5      	lsrs	r5, r4, #3
 800287a:	2300      	movs	r3, #0
 800287c:	e04c      	b.n	8002918 <__aeabi_dsub+0x4b0>
 800287e:	1a83      	subs	r3, r0, r2
 8002880:	4698      	mov	r8, r3
 8002882:	465b      	mov	r3, fp
 8002884:	4540      	cmp	r0, r8
 8002886:	41bf      	sbcs	r7, r7
 8002888:	1ae3      	subs	r3, r4, r3
 800288a:	427f      	negs	r7, r7
 800288c:	1bdb      	subs	r3, r3, r7
 800288e:	021f      	lsls	r7, r3, #8
 8002890:	d47c      	bmi.n	800298c <__aeabi_dsub+0x524>
 8002892:	4647      	mov	r7, r8
 8002894:	431f      	orrs	r7, r3
 8002896:	d100      	bne.n	800289a <__aeabi_dsub+0x432>
 8002898:	e0a6      	b.n	80029e8 <__aeabi_dsub+0x580>
 800289a:	001c      	movs	r4, r3
 800289c:	4647      	mov	r7, r8
 800289e:	e645      	b.n	800252c <__aeabi_dsub+0xc4>
 80028a0:	4cb7      	ldr	r4, [pc, #732]	@ (8002b80 <__aeabi_dsub+0x718>)
 80028a2:	1aed      	subs	r5, r5, r3
 80028a4:	4014      	ands	r4, r2
 80028a6:	077b      	lsls	r3, r7, #29
 80028a8:	d000      	beq.n	80028ac <__aeabi_dsub+0x444>
 80028aa:	e780      	b.n	80027ae <__aeabi_dsub+0x346>
 80028ac:	e784      	b.n	80027b8 <__aeabi_dsub+0x350>
 80028ae:	464b      	mov	r3, r9
 80028b0:	0025      	movs	r5, r4
 80028b2:	4305      	orrs	r5, r0
 80028b4:	d066      	beq.n	8002984 <__aeabi_dsub+0x51c>
 80028b6:	1e5f      	subs	r7, r3, #1
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d100      	bne.n	80028be <__aeabi_dsub+0x456>
 80028bc:	e0fc      	b.n	8002ab8 <__aeabi_dsub+0x650>
 80028be:	4dae      	ldr	r5, [pc, #696]	@ (8002b78 <__aeabi_dsub+0x710>)
 80028c0:	42ab      	cmp	r3, r5
 80028c2:	d100      	bne.n	80028c6 <__aeabi_dsub+0x45e>
 80028c4:	e15e      	b.n	8002b84 <__aeabi_dsub+0x71c>
 80028c6:	4666      	mov	r6, ip
 80028c8:	2f38      	cmp	r7, #56	@ 0x38
 80028ca:	dc00      	bgt.n	80028ce <__aeabi_dsub+0x466>
 80028cc:	e0b4      	b.n	8002a38 <__aeabi_dsub+0x5d0>
 80028ce:	2001      	movs	r0, #1
 80028d0:	1a17      	subs	r7, r2, r0
 80028d2:	42ba      	cmp	r2, r7
 80028d4:	4192      	sbcs	r2, r2
 80028d6:	465b      	mov	r3, fp
 80028d8:	4252      	negs	r2, r2
 80028da:	464d      	mov	r5, r9
 80028dc:	1a9c      	subs	r4, r3, r2
 80028de:	e620      	b.n	8002522 <__aeabi_dsub+0xba>
 80028e0:	0767      	lsls	r7, r4, #29
 80028e2:	08c0      	lsrs	r0, r0, #3
 80028e4:	4307      	orrs	r7, r0
 80028e6:	08e5      	lsrs	r5, r4, #3
 80028e8:	e6ba      	b.n	8002660 <__aeabi_dsub+0x1f8>
 80028ea:	001f      	movs	r7, r3
 80028ec:	4659      	mov	r1, fp
 80028ee:	3f20      	subs	r7, #32
 80028f0:	40f9      	lsrs	r1, r7
 80028f2:	000f      	movs	r7, r1
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	d005      	beq.n	8002904 <__aeabi_dsub+0x49c>
 80028f8:	2140      	movs	r1, #64	@ 0x40
 80028fa:	1acb      	subs	r3, r1, r3
 80028fc:	4659      	mov	r1, fp
 80028fe:	4099      	lsls	r1, r3
 8002900:	430a      	orrs	r2, r1
 8002902:	4692      	mov	sl, r2
 8002904:	4653      	mov	r3, sl
 8002906:	1e5a      	subs	r2, r3, #1
 8002908:	4193      	sbcs	r3, r2
 800290a:	431f      	orrs	r7, r3
 800290c:	e604      	b.n	8002518 <__aeabi_dsub+0xb0>
 800290e:	1aeb      	subs	r3, r5, r3
 8002910:	4d9b      	ldr	r5, [pc, #620]	@ (8002b80 <__aeabi_dsub+0x718>)
 8002912:	4015      	ands	r5, r2
 8002914:	076f      	lsls	r7, r5, #29
 8002916:	08ed      	lsrs	r5, r5, #3
 8002918:	032c      	lsls	r4, r5, #12
 800291a:	055d      	lsls	r5, r3, #21
 800291c:	0b24      	lsrs	r4, r4, #12
 800291e:	0d6d      	lsrs	r5, r5, #21
 8002920:	e736      	b.n	8002790 <__aeabi_dsub+0x328>
 8002922:	4d95      	ldr	r5, [pc, #596]	@ (8002b78 <__aeabi_dsub+0x710>)
 8002924:	42ab      	cmp	r3, r5
 8002926:	d100      	bne.n	800292a <__aeabi_dsub+0x4c2>
 8002928:	e0d6      	b.n	8002ad8 <__aeabi_dsub+0x670>
 800292a:	1882      	adds	r2, r0, r2
 800292c:	0021      	movs	r1, r4
 800292e:	4282      	cmp	r2, r0
 8002930:	4180      	sbcs	r0, r0
 8002932:	4459      	add	r1, fp
 8002934:	4240      	negs	r0, r0
 8002936:	1808      	adds	r0, r1, r0
 8002938:	07c7      	lsls	r7, r0, #31
 800293a:	0852      	lsrs	r2, r2, #1
 800293c:	4317      	orrs	r7, r2
 800293e:	0844      	lsrs	r4, r0, #1
 8002940:	0752      	lsls	r2, r2, #29
 8002942:	d400      	bmi.n	8002946 <__aeabi_dsub+0x4de>
 8002944:	e185      	b.n	8002c52 <__aeabi_dsub+0x7ea>
 8002946:	220f      	movs	r2, #15
 8002948:	001d      	movs	r5, r3
 800294a:	403a      	ands	r2, r7
 800294c:	2a04      	cmp	r2, #4
 800294e:	d000      	beq.n	8002952 <__aeabi_dsub+0x4ea>
 8002950:	e61a      	b.n	8002588 <__aeabi_dsub+0x120>
 8002952:	08ff      	lsrs	r7, r7, #3
 8002954:	0764      	lsls	r4, r4, #29
 8002956:	4327      	orrs	r7, r4
 8002958:	0905      	lsrs	r5, r0, #4
 800295a:	e7dd      	b.n	8002918 <__aeabi_dsub+0x4b0>
 800295c:	465b      	mov	r3, fp
 800295e:	08d2      	lsrs	r2, r2, #3
 8002960:	075f      	lsls	r7, r3, #29
 8002962:	4317      	orrs	r7, r2
 8002964:	08dd      	lsrs	r5, r3, #3
 8002966:	e67b      	b.n	8002660 <__aeabi_dsub+0x1f8>
 8002968:	2700      	movs	r7, #0
 800296a:	2400      	movs	r4, #0
 800296c:	e710      	b.n	8002790 <__aeabi_dsub+0x328>
 800296e:	2b00      	cmp	r3, #0
 8002970:	d000      	beq.n	8002974 <__aeabi_dsub+0x50c>
 8002972:	e0d6      	b.n	8002b22 <__aeabi_dsub+0x6ba>
 8002974:	2900      	cmp	r1, #0
 8002976:	d000      	beq.n	800297a <__aeabi_dsub+0x512>
 8002978:	e12f      	b.n	8002bda <__aeabi_dsub+0x772>
 800297a:	2480      	movs	r4, #128	@ 0x80
 800297c:	2600      	movs	r6, #0
 800297e:	4d7e      	ldr	r5, [pc, #504]	@ (8002b78 <__aeabi_dsub+0x710>)
 8002980:	0324      	lsls	r4, r4, #12
 8002982:	e705      	b.n	8002790 <__aeabi_dsub+0x328>
 8002984:	4666      	mov	r6, ip
 8002986:	465c      	mov	r4, fp
 8002988:	08d0      	lsrs	r0, r2, #3
 800298a:	e717      	b.n	80027bc <__aeabi_dsub+0x354>
 800298c:	465b      	mov	r3, fp
 800298e:	1a17      	subs	r7, r2, r0
 8002990:	42ba      	cmp	r2, r7
 8002992:	4192      	sbcs	r2, r2
 8002994:	1b1c      	subs	r4, r3, r4
 8002996:	2601      	movs	r6, #1
 8002998:	4663      	mov	r3, ip
 800299a:	4252      	negs	r2, r2
 800299c:	1aa4      	subs	r4, r4, r2
 800299e:	401e      	ands	r6, r3
 80029a0:	e5c4      	b.n	800252c <__aeabi_dsub+0xc4>
 80029a2:	1883      	adds	r3, r0, r2
 80029a4:	4283      	cmp	r3, r0
 80029a6:	4180      	sbcs	r0, r0
 80029a8:	445c      	add	r4, fp
 80029aa:	4240      	negs	r0, r0
 80029ac:	1825      	adds	r5, r4, r0
 80029ae:	022a      	lsls	r2, r5, #8
 80029b0:	d400      	bmi.n	80029b4 <__aeabi_dsub+0x54c>
 80029b2:	e0da      	b.n	8002b6a <__aeabi_dsub+0x702>
 80029b4:	4a72      	ldr	r2, [pc, #456]	@ (8002b80 <__aeabi_dsub+0x718>)
 80029b6:	085b      	lsrs	r3, r3, #1
 80029b8:	4015      	ands	r5, r2
 80029ba:	07ea      	lsls	r2, r5, #31
 80029bc:	431a      	orrs	r2, r3
 80029be:	0869      	lsrs	r1, r5, #1
 80029c0:	075b      	lsls	r3, r3, #29
 80029c2:	d400      	bmi.n	80029c6 <__aeabi_dsub+0x55e>
 80029c4:	e14a      	b.n	8002c5c <__aeabi_dsub+0x7f4>
 80029c6:	230f      	movs	r3, #15
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d100      	bne.n	80029d0 <__aeabi_dsub+0x568>
 80029ce:	e0fc      	b.n	8002bca <__aeabi_dsub+0x762>
 80029d0:	1d17      	adds	r7, r2, #4
 80029d2:	4297      	cmp	r7, r2
 80029d4:	41a4      	sbcs	r4, r4
 80029d6:	4264      	negs	r4, r4
 80029d8:	2502      	movs	r5, #2
 80029da:	1864      	adds	r4, r4, r1
 80029dc:	e6ec      	b.n	80027b8 <__aeabi_dsub+0x350>
 80029de:	4647      	mov	r7, r8
 80029e0:	001c      	movs	r4, r3
 80029e2:	431f      	orrs	r7, r3
 80029e4:	d000      	beq.n	80029e8 <__aeabi_dsub+0x580>
 80029e6:	e743      	b.n	8002870 <__aeabi_dsub+0x408>
 80029e8:	2600      	movs	r6, #0
 80029ea:	2500      	movs	r5, #0
 80029ec:	2400      	movs	r4, #0
 80029ee:	e6cf      	b.n	8002790 <__aeabi_dsub+0x328>
 80029f0:	08c0      	lsrs	r0, r0, #3
 80029f2:	0767      	lsls	r7, r4, #29
 80029f4:	4307      	orrs	r7, r0
 80029f6:	08e5      	lsrs	r5, r4, #3
 80029f8:	e632      	b.n	8002660 <__aeabi_dsub+0x1f8>
 80029fa:	1a87      	subs	r7, r0, r2
 80029fc:	465b      	mov	r3, fp
 80029fe:	42b8      	cmp	r0, r7
 8002a00:	4180      	sbcs	r0, r0
 8002a02:	1ae4      	subs	r4, r4, r3
 8002a04:	4240      	negs	r0, r0
 8002a06:	1a24      	subs	r4, r4, r0
 8002a08:	0223      	lsls	r3, r4, #8
 8002a0a:	d428      	bmi.n	8002a5e <__aeabi_dsub+0x5f6>
 8002a0c:	0763      	lsls	r3, r4, #29
 8002a0e:	08ff      	lsrs	r7, r7, #3
 8002a10:	431f      	orrs	r7, r3
 8002a12:	08e5      	lsrs	r5, r4, #3
 8002a14:	2301      	movs	r3, #1
 8002a16:	e77f      	b.n	8002918 <__aeabi_dsub+0x4b0>
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d100      	bne.n	8002a1e <__aeabi_dsub+0x5b6>
 8002a1c:	e673      	b.n	8002706 <__aeabi_dsub+0x29e>
 8002a1e:	464b      	mov	r3, r9
 8002a20:	1b5f      	subs	r7, r3, r5
 8002a22:	003b      	movs	r3, r7
 8002a24:	2d00      	cmp	r5, #0
 8002a26:	d100      	bne.n	8002a2a <__aeabi_dsub+0x5c2>
 8002a28:	e742      	b.n	80028b0 <__aeabi_dsub+0x448>
 8002a2a:	2f38      	cmp	r7, #56	@ 0x38
 8002a2c:	dd00      	ble.n	8002a30 <__aeabi_dsub+0x5c8>
 8002a2e:	e0ec      	b.n	8002c0a <__aeabi_dsub+0x7a2>
 8002a30:	2380      	movs	r3, #128	@ 0x80
 8002a32:	000e      	movs	r6, r1
 8002a34:	041b      	lsls	r3, r3, #16
 8002a36:	431c      	orrs	r4, r3
 8002a38:	2f1f      	cmp	r7, #31
 8002a3a:	dc25      	bgt.n	8002a88 <__aeabi_dsub+0x620>
 8002a3c:	2520      	movs	r5, #32
 8002a3e:	0023      	movs	r3, r4
 8002a40:	1bed      	subs	r5, r5, r7
 8002a42:	0001      	movs	r1, r0
 8002a44:	40a8      	lsls	r0, r5
 8002a46:	40ab      	lsls	r3, r5
 8002a48:	40f9      	lsrs	r1, r7
 8002a4a:	1e45      	subs	r5, r0, #1
 8002a4c:	41a8      	sbcs	r0, r5
 8002a4e:	430b      	orrs	r3, r1
 8002a50:	40fc      	lsrs	r4, r7
 8002a52:	4318      	orrs	r0, r3
 8002a54:	465b      	mov	r3, fp
 8002a56:	1b1b      	subs	r3, r3, r4
 8002a58:	469b      	mov	fp, r3
 8002a5a:	e739      	b.n	80028d0 <__aeabi_dsub+0x468>
 8002a5c:	4666      	mov	r6, ip
 8002a5e:	2501      	movs	r5, #1
 8002a60:	e562      	b.n	8002528 <__aeabi_dsub+0xc0>
 8002a62:	001f      	movs	r7, r3
 8002a64:	4659      	mov	r1, fp
 8002a66:	3f20      	subs	r7, #32
 8002a68:	40f9      	lsrs	r1, r7
 8002a6a:	468c      	mov	ip, r1
 8002a6c:	2b20      	cmp	r3, #32
 8002a6e:	d005      	beq.n	8002a7c <__aeabi_dsub+0x614>
 8002a70:	2740      	movs	r7, #64	@ 0x40
 8002a72:	4659      	mov	r1, fp
 8002a74:	1afb      	subs	r3, r7, r3
 8002a76:	4099      	lsls	r1, r3
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	4692      	mov	sl, r2
 8002a7c:	4657      	mov	r7, sl
 8002a7e:	1e7b      	subs	r3, r7, #1
 8002a80:	419f      	sbcs	r7, r3
 8002a82:	4663      	mov	r3, ip
 8002a84:	431f      	orrs	r7, r3
 8002a86:	e5c1      	b.n	800260c <__aeabi_dsub+0x1a4>
 8002a88:	003b      	movs	r3, r7
 8002a8a:	0025      	movs	r5, r4
 8002a8c:	3b20      	subs	r3, #32
 8002a8e:	40dd      	lsrs	r5, r3
 8002a90:	2f20      	cmp	r7, #32
 8002a92:	d004      	beq.n	8002a9e <__aeabi_dsub+0x636>
 8002a94:	2340      	movs	r3, #64	@ 0x40
 8002a96:	1bdb      	subs	r3, r3, r7
 8002a98:	409c      	lsls	r4, r3
 8002a9a:	4320      	orrs	r0, r4
 8002a9c:	4680      	mov	r8, r0
 8002a9e:	4640      	mov	r0, r8
 8002aa0:	1e43      	subs	r3, r0, #1
 8002aa2:	4198      	sbcs	r0, r3
 8002aa4:	4328      	orrs	r0, r5
 8002aa6:	e713      	b.n	80028d0 <__aeabi_dsub+0x468>
 8002aa8:	2900      	cmp	r1, #0
 8002aaa:	d09d      	beq.n	80029e8 <__aeabi_dsub+0x580>
 8002aac:	2601      	movs	r6, #1
 8002aae:	4663      	mov	r3, ip
 8002ab0:	465c      	mov	r4, fp
 8002ab2:	4690      	mov	r8, r2
 8002ab4:	401e      	ands	r6, r3
 8002ab6:	e6db      	b.n	8002870 <__aeabi_dsub+0x408>
 8002ab8:	1a17      	subs	r7, r2, r0
 8002aba:	465b      	mov	r3, fp
 8002abc:	42ba      	cmp	r2, r7
 8002abe:	4192      	sbcs	r2, r2
 8002ac0:	1b1c      	subs	r4, r3, r4
 8002ac2:	4252      	negs	r2, r2
 8002ac4:	1aa4      	subs	r4, r4, r2
 8002ac6:	0223      	lsls	r3, r4, #8
 8002ac8:	d4c8      	bmi.n	8002a5c <__aeabi_dsub+0x5f4>
 8002aca:	0763      	lsls	r3, r4, #29
 8002acc:	08ff      	lsrs	r7, r7, #3
 8002ace:	431f      	orrs	r7, r3
 8002ad0:	4666      	mov	r6, ip
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	08e5      	lsrs	r5, r4, #3
 8002ad6:	e71f      	b.n	8002918 <__aeabi_dsub+0x4b0>
 8002ad8:	001d      	movs	r5, r3
 8002ada:	2400      	movs	r4, #0
 8002adc:	2700      	movs	r7, #0
 8002ade:	e657      	b.n	8002790 <__aeabi_dsub+0x328>
 8002ae0:	465c      	mov	r4, fp
 8002ae2:	08d0      	lsrs	r0, r2, #3
 8002ae4:	e66a      	b.n	80027bc <__aeabi_dsub+0x354>
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d100      	bne.n	8002aec <__aeabi_dsub+0x684>
 8002aea:	e737      	b.n	800295c <__aeabi_dsub+0x4f4>
 8002aec:	4653      	mov	r3, sl
 8002aee:	08c0      	lsrs	r0, r0, #3
 8002af0:	0767      	lsls	r7, r4, #29
 8002af2:	4307      	orrs	r7, r0
 8002af4:	08e5      	lsrs	r5, r4, #3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d100      	bne.n	8002afc <__aeabi_dsub+0x694>
 8002afa:	e5b1      	b.n	8002660 <__aeabi_dsub+0x1f8>
 8002afc:	2380      	movs	r3, #128	@ 0x80
 8002afe:	031b      	lsls	r3, r3, #12
 8002b00:	421d      	tst	r5, r3
 8002b02:	d008      	beq.n	8002b16 <__aeabi_dsub+0x6ae>
 8002b04:	4659      	mov	r1, fp
 8002b06:	08c8      	lsrs	r0, r1, #3
 8002b08:	4218      	tst	r0, r3
 8002b0a:	d104      	bne.n	8002b16 <__aeabi_dsub+0x6ae>
 8002b0c:	08d2      	lsrs	r2, r2, #3
 8002b0e:	0749      	lsls	r1, r1, #29
 8002b10:	430a      	orrs	r2, r1
 8002b12:	0017      	movs	r7, r2
 8002b14:	0005      	movs	r5, r0
 8002b16:	0f7b      	lsrs	r3, r7, #29
 8002b18:	00ff      	lsls	r7, r7, #3
 8002b1a:	08ff      	lsrs	r7, r7, #3
 8002b1c:	075b      	lsls	r3, r3, #29
 8002b1e:	431f      	orrs	r7, r3
 8002b20:	e59e      	b.n	8002660 <__aeabi_dsub+0x1f8>
 8002b22:	08c0      	lsrs	r0, r0, #3
 8002b24:	0763      	lsls	r3, r4, #29
 8002b26:	4318      	orrs	r0, r3
 8002b28:	08e5      	lsrs	r5, r4, #3
 8002b2a:	2900      	cmp	r1, #0
 8002b2c:	d053      	beq.n	8002bd6 <__aeabi_dsub+0x76e>
 8002b2e:	2380      	movs	r3, #128	@ 0x80
 8002b30:	031b      	lsls	r3, r3, #12
 8002b32:	421d      	tst	r5, r3
 8002b34:	d00a      	beq.n	8002b4c <__aeabi_dsub+0x6e4>
 8002b36:	4659      	mov	r1, fp
 8002b38:	08cc      	lsrs	r4, r1, #3
 8002b3a:	421c      	tst	r4, r3
 8002b3c:	d106      	bne.n	8002b4c <__aeabi_dsub+0x6e4>
 8002b3e:	2601      	movs	r6, #1
 8002b40:	4663      	mov	r3, ip
 8002b42:	0025      	movs	r5, r4
 8002b44:	08d0      	lsrs	r0, r2, #3
 8002b46:	0749      	lsls	r1, r1, #29
 8002b48:	4308      	orrs	r0, r1
 8002b4a:	401e      	ands	r6, r3
 8002b4c:	0f47      	lsrs	r7, r0, #29
 8002b4e:	00c0      	lsls	r0, r0, #3
 8002b50:	08c0      	lsrs	r0, r0, #3
 8002b52:	077f      	lsls	r7, r7, #29
 8002b54:	4307      	orrs	r7, r0
 8002b56:	e583      	b.n	8002660 <__aeabi_dsub+0x1f8>
 8002b58:	1883      	adds	r3, r0, r2
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	4192      	sbcs	r2, r2
 8002b5e:	445c      	add	r4, fp
 8002b60:	4252      	negs	r2, r2
 8002b62:	18a5      	adds	r5, r4, r2
 8002b64:	022a      	lsls	r2, r5, #8
 8002b66:	d500      	bpl.n	8002b6a <__aeabi_dsub+0x702>
 8002b68:	e724      	b.n	80029b4 <__aeabi_dsub+0x54c>
 8002b6a:	076f      	lsls	r7, r5, #29
 8002b6c:	08db      	lsrs	r3, r3, #3
 8002b6e:	431f      	orrs	r7, r3
 8002b70:	08ed      	lsrs	r5, r5, #3
 8002b72:	2301      	movs	r3, #1
 8002b74:	e6d0      	b.n	8002918 <__aeabi_dsub+0x4b0>
 8002b76:	46c0      	nop			@ (mov r8, r8)
 8002b78:	000007ff 	.word	0x000007ff
 8002b7c:	000007fe 	.word	0x000007fe
 8002b80:	ff7fffff 	.word	0xff7fffff
 8002b84:	465b      	mov	r3, fp
 8002b86:	08d2      	lsrs	r2, r2, #3
 8002b88:	075f      	lsls	r7, r3, #29
 8002b8a:	4666      	mov	r6, ip
 8002b8c:	4317      	orrs	r7, r2
 8002b8e:	08dd      	lsrs	r5, r3, #3
 8002b90:	e566      	b.n	8002660 <__aeabi_dsub+0x1f8>
 8002b92:	0025      	movs	r5, r4
 8002b94:	3b20      	subs	r3, #32
 8002b96:	40dd      	lsrs	r5, r3
 8002b98:	4663      	mov	r3, ip
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	d005      	beq.n	8002baa <__aeabi_dsub+0x742>
 8002b9e:	2340      	movs	r3, #64	@ 0x40
 8002ba0:	4661      	mov	r1, ip
 8002ba2:	1a5b      	subs	r3, r3, r1
 8002ba4:	409c      	lsls	r4, r3
 8002ba6:	4320      	orrs	r0, r4
 8002ba8:	4680      	mov	r8, r0
 8002baa:	4647      	mov	r7, r8
 8002bac:	1e7b      	subs	r3, r7, #1
 8002bae:	419f      	sbcs	r7, r3
 8002bb0:	432f      	orrs	r7, r5
 8002bb2:	e5a0      	b.n	80026f6 <__aeabi_dsub+0x28e>
 8002bb4:	2120      	movs	r1, #32
 8002bb6:	2700      	movs	r7, #0
 8002bb8:	1a09      	subs	r1, r1, r0
 8002bba:	e4d2      	b.n	8002562 <__aeabi_dsub+0xfa>
 8002bbc:	2f00      	cmp	r7, #0
 8002bbe:	d100      	bne.n	8002bc2 <__aeabi_dsub+0x75a>
 8002bc0:	e713      	b.n	80029ea <__aeabi_dsub+0x582>
 8002bc2:	465c      	mov	r4, fp
 8002bc4:	0017      	movs	r7, r2
 8002bc6:	2500      	movs	r5, #0
 8002bc8:	e5f6      	b.n	80027b8 <__aeabi_dsub+0x350>
 8002bca:	08d7      	lsrs	r7, r2, #3
 8002bcc:	0749      	lsls	r1, r1, #29
 8002bce:	2302      	movs	r3, #2
 8002bd0:	430f      	orrs	r7, r1
 8002bd2:	092d      	lsrs	r5, r5, #4
 8002bd4:	e6a0      	b.n	8002918 <__aeabi_dsub+0x4b0>
 8002bd6:	0007      	movs	r7, r0
 8002bd8:	e542      	b.n	8002660 <__aeabi_dsub+0x1f8>
 8002bda:	465b      	mov	r3, fp
 8002bdc:	2601      	movs	r6, #1
 8002bde:	075f      	lsls	r7, r3, #29
 8002be0:	08dd      	lsrs	r5, r3, #3
 8002be2:	4663      	mov	r3, ip
 8002be4:	08d2      	lsrs	r2, r2, #3
 8002be6:	4317      	orrs	r7, r2
 8002be8:	401e      	ands	r6, r3
 8002bea:	e539      	b.n	8002660 <__aeabi_dsub+0x1f8>
 8002bec:	465b      	mov	r3, fp
 8002bee:	08d2      	lsrs	r2, r2, #3
 8002bf0:	075f      	lsls	r7, r3, #29
 8002bf2:	4317      	orrs	r7, r2
 8002bf4:	08dd      	lsrs	r5, r3, #3
 8002bf6:	e533      	b.n	8002660 <__aeabi_dsub+0x1f8>
 8002bf8:	4a1e      	ldr	r2, [pc, #120]	@ (8002c74 <__aeabi_dsub+0x80c>)
 8002bfa:	08db      	lsrs	r3, r3, #3
 8002bfc:	4022      	ands	r2, r4
 8002bfe:	0757      	lsls	r7, r2, #29
 8002c00:	0252      	lsls	r2, r2, #9
 8002c02:	2501      	movs	r5, #1
 8002c04:	431f      	orrs	r7, r3
 8002c06:	0b14      	lsrs	r4, r2, #12
 8002c08:	e5c2      	b.n	8002790 <__aeabi_dsub+0x328>
 8002c0a:	000e      	movs	r6, r1
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	e65f      	b.n	80028d0 <__aeabi_dsub+0x468>
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00d      	beq.n	8002c30 <__aeabi_dsub+0x7c8>
 8002c14:	464b      	mov	r3, r9
 8002c16:	1b5b      	subs	r3, r3, r5
 8002c18:	469c      	mov	ip, r3
 8002c1a:	2d00      	cmp	r5, #0
 8002c1c:	d100      	bne.n	8002c20 <__aeabi_dsub+0x7b8>
 8002c1e:	e548      	b.n	80026b2 <__aeabi_dsub+0x24a>
 8002c20:	2701      	movs	r7, #1
 8002c22:	2b38      	cmp	r3, #56	@ 0x38
 8002c24:	dd00      	ble.n	8002c28 <__aeabi_dsub+0x7c0>
 8002c26:	e566      	b.n	80026f6 <__aeabi_dsub+0x28e>
 8002c28:	2380      	movs	r3, #128	@ 0x80
 8002c2a:	041b      	lsls	r3, r3, #16
 8002c2c:	431c      	orrs	r4, r3
 8002c2e:	e550      	b.n	80026d2 <__aeabi_dsub+0x26a>
 8002c30:	1c6b      	adds	r3, r5, #1
 8002c32:	4d11      	ldr	r5, [pc, #68]	@ (8002c78 <__aeabi_dsub+0x810>)
 8002c34:	422b      	tst	r3, r5
 8002c36:	d000      	beq.n	8002c3a <__aeabi_dsub+0x7d2>
 8002c38:	e673      	b.n	8002922 <__aeabi_dsub+0x4ba>
 8002c3a:	4659      	mov	r1, fp
 8002c3c:	0023      	movs	r3, r4
 8002c3e:	4311      	orrs	r1, r2
 8002c40:	468a      	mov	sl, r1
 8002c42:	4303      	orrs	r3, r0
 8002c44:	e600      	b.n	8002848 <__aeabi_dsub+0x3e0>
 8002c46:	0767      	lsls	r7, r4, #29
 8002c48:	08c0      	lsrs	r0, r0, #3
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	4307      	orrs	r7, r0
 8002c4e:	08e5      	lsrs	r5, r4, #3
 8002c50:	e662      	b.n	8002918 <__aeabi_dsub+0x4b0>
 8002c52:	0764      	lsls	r4, r4, #29
 8002c54:	08ff      	lsrs	r7, r7, #3
 8002c56:	4327      	orrs	r7, r4
 8002c58:	0905      	lsrs	r5, r0, #4
 8002c5a:	e65d      	b.n	8002918 <__aeabi_dsub+0x4b0>
 8002c5c:	08d2      	lsrs	r2, r2, #3
 8002c5e:	0749      	lsls	r1, r1, #29
 8002c60:	4311      	orrs	r1, r2
 8002c62:	000f      	movs	r7, r1
 8002c64:	2302      	movs	r3, #2
 8002c66:	092d      	lsrs	r5, r5, #4
 8002c68:	e656      	b.n	8002918 <__aeabi_dsub+0x4b0>
 8002c6a:	0007      	movs	r7, r0
 8002c6c:	e5a4      	b.n	80027b8 <__aeabi_dsub+0x350>
 8002c6e:	0038      	movs	r0, r7
 8002c70:	e48f      	b.n	8002592 <__aeabi_dsub+0x12a>
 8002c72:	46c0      	nop			@ (mov r8, r8)
 8002c74:	ff7fffff 	.word	0xff7fffff
 8002c78:	000007fe 	.word	0x000007fe

08002c7c <__aeabi_dcmpun>:
 8002c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c7e:	46c6      	mov	lr, r8
 8002c80:	031e      	lsls	r6, r3, #12
 8002c82:	0b36      	lsrs	r6, r6, #12
 8002c84:	46b0      	mov	r8, r6
 8002c86:	4e0d      	ldr	r6, [pc, #52]	@ (8002cbc <__aeabi_dcmpun+0x40>)
 8002c88:	030c      	lsls	r4, r1, #12
 8002c8a:	004d      	lsls	r5, r1, #1
 8002c8c:	005f      	lsls	r7, r3, #1
 8002c8e:	b500      	push	{lr}
 8002c90:	0b24      	lsrs	r4, r4, #12
 8002c92:	0d6d      	lsrs	r5, r5, #21
 8002c94:	0d7f      	lsrs	r7, r7, #21
 8002c96:	42b5      	cmp	r5, r6
 8002c98:	d00b      	beq.n	8002cb2 <__aeabi_dcmpun+0x36>
 8002c9a:	4908      	ldr	r1, [pc, #32]	@ (8002cbc <__aeabi_dcmpun+0x40>)
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	428f      	cmp	r7, r1
 8002ca0:	d104      	bne.n	8002cac <__aeabi_dcmpun+0x30>
 8002ca2:	4646      	mov	r6, r8
 8002ca4:	4316      	orrs	r6, r2
 8002ca6:	0030      	movs	r0, r6
 8002ca8:	1e43      	subs	r3, r0, #1
 8002caa:	4198      	sbcs	r0, r3
 8002cac:	bc80      	pop	{r7}
 8002cae:	46b8      	mov	r8, r7
 8002cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cb2:	4304      	orrs	r4, r0
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	2c00      	cmp	r4, #0
 8002cb8:	d1f8      	bne.n	8002cac <__aeabi_dcmpun+0x30>
 8002cba:	e7ee      	b.n	8002c9a <__aeabi_dcmpun+0x1e>
 8002cbc:	000007ff 	.word	0x000007ff

08002cc0 <__aeabi_d2iz>:
 8002cc0:	000b      	movs	r3, r1
 8002cc2:	0002      	movs	r2, r0
 8002cc4:	b570      	push	{r4, r5, r6, lr}
 8002cc6:	4d16      	ldr	r5, [pc, #88]	@ (8002d20 <__aeabi_d2iz+0x60>)
 8002cc8:	030c      	lsls	r4, r1, #12
 8002cca:	b082      	sub	sp, #8
 8002ccc:	0049      	lsls	r1, r1, #1
 8002cce:	2000      	movs	r0, #0
 8002cd0:	9200      	str	r2, [sp, #0]
 8002cd2:	9301      	str	r3, [sp, #4]
 8002cd4:	0b24      	lsrs	r4, r4, #12
 8002cd6:	0d49      	lsrs	r1, r1, #21
 8002cd8:	0fde      	lsrs	r6, r3, #31
 8002cda:	42a9      	cmp	r1, r5
 8002cdc:	dd04      	ble.n	8002ce8 <__aeabi_d2iz+0x28>
 8002cde:	4811      	ldr	r0, [pc, #68]	@ (8002d24 <__aeabi_d2iz+0x64>)
 8002ce0:	4281      	cmp	r1, r0
 8002ce2:	dd03      	ble.n	8002cec <__aeabi_d2iz+0x2c>
 8002ce4:	4b10      	ldr	r3, [pc, #64]	@ (8002d28 <__aeabi_d2iz+0x68>)
 8002ce6:	18f0      	adds	r0, r6, r3
 8002ce8:	b002      	add	sp, #8
 8002cea:	bd70      	pop	{r4, r5, r6, pc}
 8002cec:	2080      	movs	r0, #128	@ 0x80
 8002cee:	0340      	lsls	r0, r0, #13
 8002cf0:	4320      	orrs	r0, r4
 8002cf2:	4c0e      	ldr	r4, [pc, #56]	@ (8002d2c <__aeabi_d2iz+0x6c>)
 8002cf4:	1a64      	subs	r4, r4, r1
 8002cf6:	2c1f      	cmp	r4, #31
 8002cf8:	dd08      	ble.n	8002d0c <__aeabi_d2iz+0x4c>
 8002cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8002d30 <__aeabi_d2iz+0x70>)
 8002cfc:	1a5b      	subs	r3, r3, r1
 8002cfe:	40d8      	lsrs	r0, r3
 8002d00:	0003      	movs	r3, r0
 8002d02:	4258      	negs	r0, r3
 8002d04:	2e00      	cmp	r6, #0
 8002d06:	d1ef      	bne.n	8002ce8 <__aeabi_d2iz+0x28>
 8002d08:	0018      	movs	r0, r3
 8002d0a:	e7ed      	b.n	8002ce8 <__aeabi_d2iz+0x28>
 8002d0c:	4b09      	ldr	r3, [pc, #36]	@ (8002d34 <__aeabi_d2iz+0x74>)
 8002d0e:	9a00      	ldr	r2, [sp, #0]
 8002d10:	469c      	mov	ip, r3
 8002d12:	0003      	movs	r3, r0
 8002d14:	4461      	add	r1, ip
 8002d16:	408b      	lsls	r3, r1
 8002d18:	40e2      	lsrs	r2, r4
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	e7f1      	b.n	8002d02 <__aeabi_d2iz+0x42>
 8002d1e:	46c0      	nop			@ (mov r8, r8)
 8002d20:	000003fe 	.word	0x000003fe
 8002d24:	0000041d 	.word	0x0000041d
 8002d28:	7fffffff 	.word	0x7fffffff
 8002d2c:	00000433 	.word	0x00000433
 8002d30:	00000413 	.word	0x00000413
 8002d34:	fffffbed 	.word	0xfffffbed

08002d38 <__aeabi_i2d>:
 8002d38:	b570      	push	{r4, r5, r6, lr}
 8002d3a:	2800      	cmp	r0, #0
 8002d3c:	d016      	beq.n	8002d6c <__aeabi_i2d+0x34>
 8002d3e:	17c3      	asrs	r3, r0, #31
 8002d40:	18c5      	adds	r5, r0, r3
 8002d42:	405d      	eors	r5, r3
 8002d44:	0fc4      	lsrs	r4, r0, #31
 8002d46:	0028      	movs	r0, r5
 8002d48:	f000 f890 	bl	8002e6c <__clzsi2>
 8002d4c:	4b10      	ldr	r3, [pc, #64]	@ (8002d90 <__aeabi_i2d+0x58>)
 8002d4e:	1a1b      	subs	r3, r3, r0
 8002d50:	055b      	lsls	r3, r3, #21
 8002d52:	0d5b      	lsrs	r3, r3, #21
 8002d54:	280a      	cmp	r0, #10
 8002d56:	dc14      	bgt.n	8002d82 <__aeabi_i2d+0x4a>
 8002d58:	0002      	movs	r2, r0
 8002d5a:	002e      	movs	r6, r5
 8002d5c:	3215      	adds	r2, #21
 8002d5e:	4096      	lsls	r6, r2
 8002d60:	220b      	movs	r2, #11
 8002d62:	1a12      	subs	r2, r2, r0
 8002d64:	40d5      	lsrs	r5, r2
 8002d66:	032d      	lsls	r5, r5, #12
 8002d68:	0b2d      	lsrs	r5, r5, #12
 8002d6a:	e003      	b.n	8002d74 <__aeabi_i2d+0x3c>
 8002d6c:	2400      	movs	r4, #0
 8002d6e:	2300      	movs	r3, #0
 8002d70:	2500      	movs	r5, #0
 8002d72:	2600      	movs	r6, #0
 8002d74:	051b      	lsls	r3, r3, #20
 8002d76:	432b      	orrs	r3, r5
 8002d78:	07e4      	lsls	r4, r4, #31
 8002d7a:	4323      	orrs	r3, r4
 8002d7c:	0030      	movs	r0, r6
 8002d7e:	0019      	movs	r1, r3
 8002d80:	bd70      	pop	{r4, r5, r6, pc}
 8002d82:	380b      	subs	r0, #11
 8002d84:	4085      	lsls	r5, r0
 8002d86:	032d      	lsls	r5, r5, #12
 8002d88:	2600      	movs	r6, #0
 8002d8a:	0b2d      	lsrs	r5, r5, #12
 8002d8c:	e7f2      	b.n	8002d74 <__aeabi_i2d+0x3c>
 8002d8e:	46c0      	nop			@ (mov r8, r8)
 8002d90:	0000041e 	.word	0x0000041e

08002d94 <__aeabi_ui2d>:
 8002d94:	b510      	push	{r4, lr}
 8002d96:	1e04      	subs	r4, r0, #0
 8002d98:	d010      	beq.n	8002dbc <__aeabi_ui2d+0x28>
 8002d9a:	f000 f867 	bl	8002e6c <__clzsi2>
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd8 <__aeabi_ui2d+0x44>)
 8002da0:	1a1b      	subs	r3, r3, r0
 8002da2:	055b      	lsls	r3, r3, #21
 8002da4:	0d5b      	lsrs	r3, r3, #21
 8002da6:	280a      	cmp	r0, #10
 8002da8:	dc0f      	bgt.n	8002dca <__aeabi_ui2d+0x36>
 8002daa:	220b      	movs	r2, #11
 8002dac:	0021      	movs	r1, r4
 8002dae:	1a12      	subs	r2, r2, r0
 8002db0:	40d1      	lsrs	r1, r2
 8002db2:	3015      	adds	r0, #21
 8002db4:	030a      	lsls	r2, r1, #12
 8002db6:	4084      	lsls	r4, r0
 8002db8:	0b12      	lsrs	r2, r2, #12
 8002dba:	e001      	b.n	8002dc0 <__aeabi_ui2d+0x2c>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	051b      	lsls	r3, r3, #20
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	0020      	movs	r0, r4
 8002dc6:	0019      	movs	r1, r3
 8002dc8:	bd10      	pop	{r4, pc}
 8002dca:	0022      	movs	r2, r4
 8002dcc:	380b      	subs	r0, #11
 8002dce:	4082      	lsls	r2, r0
 8002dd0:	0312      	lsls	r2, r2, #12
 8002dd2:	2400      	movs	r4, #0
 8002dd4:	0b12      	lsrs	r2, r2, #12
 8002dd6:	e7f3      	b.n	8002dc0 <__aeabi_ui2d+0x2c>
 8002dd8:	0000041e 	.word	0x0000041e

08002ddc <__aeabi_f2d>:
 8002ddc:	b570      	push	{r4, r5, r6, lr}
 8002dde:	0242      	lsls	r2, r0, #9
 8002de0:	0043      	lsls	r3, r0, #1
 8002de2:	0fc4      	lsrs	r4, r0, #31
 8002de4:	20fe      	movs	r0, #254	@ 0xfe
 8002de6:	0e1b      	lsrs	r3, r3, #24
 8002de8:	1c59      	adds	r1, r3, #1
 8002dea:	0a55      	lsrs	r5, r2, #9
 8002dec:	4208      	tst	r0, r1
 8002dee:	d00c      	beq.n	8002e0a <__aeabi_f2d+0x2e>
 8002df0:	21e0      	movs	r1, #224	@ 0xe0
 8002df2:	0089      	lsls	r1, r1, #2
 8002df4:	468c      	mov	ip, r1
 8002df6:	076d      	lsls	r5, r5, #29
 8002df8:	0b12      	lsrs	r2, r2, #12
 8002dfa:	4463      	add	r3, ip
 8002dfc:	051b      	lsls	r3, r3, #20
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	07e4      	lsls	r4, r4, #31
 8002e02:	4323      	orrs	r3, r4
 8002e04:	0028      	movs	r0, r5
 8002e06:	0019      	movs	r1, r3
 8002e08:	bd70      	pop	{r4, r5, r6, pc}
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d114      	bne.n	8002e38 <__aeabi_f2d+0x5c>
 8002e0e:	2d00      	cmp	r5, #0
 8002e10:	d01b      	beq.n	8002e4a <__aeabi_f2d+0x6e>
 8002e12:	0028      	movs	r0, r5
 8002e14:	f000 f82a 	bl	8002e6c <__clzsi2>
 8002e18:	280a      	cmp	r0, #10
 8002e1a:	dc1c      	bgt.n	8002e56 <__aeabi_f2d+0x7a>
 8002e1c:	230b      	movs	r3, #11
 8002e1e:	002a      	movs	r2, r5
 8002e20:	1a1b      	subs	r3, r3, r0
 8002e22:	40da      	lsrs	r2, r3
 8002e24:	0003      	movs	r3, r0
 8002e26:	3315      	adds	r3, #21
 8002e28:	409d      	lsls	r5, r3
 8002e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e64 <__aeabi_f2d+0x88>)
 8002e2c:	0312      	lsls	r2, r2, #12
 8002e2e:	1a1b      	subs	r3, r3, r0
 8002e30:	055b      	lsls	r3, r3, #21
 8002e32:	0b12      	lsrs	r2, r2, #12
 8002e34:	0d5b      	lsrs	r3, r3, #21
 8002e36:	e7e1      	b.n	8002dfc <__aeabi_f2d+0x20>
 8002e38:	2d00      	cmp	r5, #0
 8002e3a:	d009      	beq.n	8002e50 <__aeabi_f2d+0x74>
 8002e3c:	0b13      	lsrs	r3, r2, #12
 8002e3e:	2280      	movs	r2, #128	@ 0x80
 8002e40:	0312      	lsls	r2, r2, #12
 8002e42:	431a      	orrs	r2, r3
 8002e44:	076d      	lsls	r5, r5, #29
 8002e46:	4b08      	ldr	r3, [pc, #32]	@ (8002e68 <__aeabi_f2d+0x8c>)
 8002e48:	e7d8      	b.n	8002dfc <__aeabi_f2d+0x20>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	e7d5      	b.n	8002dfc <__aeabi_f2d+0x20>
 8002e50:	2200      	movs	r2, #0
 8002e52:	4b05      	ldr	r3, [pc, #20]	@ (8002e68 <__aeabi_f2d+0x8c>)
 8002e54:	e7d2      	b.n	8002dfc <__aeabi_f2d+0x20>
 8002e56:	0003      	movs	r3, r0
 8002e58:	002a      	movs	r2, r5
 8002e5a:	3b0b      	subs	r3, #11
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	2500      	movs	r5, #0
 8002e60:	e7e3      	b.n	8002e2a <__aeabi_f2d+0x4e>
 8002e62:	46c0      	nop			@ (mov r8, r8)
 8002e64:	00000389 	.word	0x00000389
 8002e68:	000007ff 	.word	0x000007ff

08002e6c <__clzsi2>:
 8002e6c:	211c      	movs	r1, #28
 8002e6e:	2301      	movs	r3, #1
 8002e70:	041b      	lsls	r3, r3, #16
 8002e72:	4298      	cmp	r0, r3
 8002e74:	d301      	bcc.n	8002e7a <__clzsi2+0xe>
 8002e76:	0c00      	lsrs	r0, r0, #16
 8002e78:	3910      	subs	r1, #16
 8002e7a:	0a1b      	lsrs	r3, r3, #8
 8002e7c:	4298      	cmp	r0, r3
 8002e7e:	d301      	bcc.n	8002e84 <__clzsi2+0x18>
 8002e80:	0a00      	lsrs	r0, r0, #8
 8002e82:	3908      	subs	r1, #8
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	4298      	cmp	r0, r3
 8002e88:	d301      	bcc.n	8002e8e <__clzsi2+0x22>
 8002e8a:	0900      	lsrs	r0, r0, #4
 8002e8c:	3904      	subs	r1, #4
 8002e8e:	a202      	add	r2, pc, #8	@ (adr r2, 8002e98 <__clzsi2+0x2c>)
 8002e90:	5c10      	ldrb	r0, [r2, r0]
 8002e92:	1840      	adds	r0, r0, r1
 8002e94:	4770      	bx	lr
 8002e96:	46c0      	nop			@ (mov r8, r8)
 8002e98:	02020304 	.word	0x02020304
 8002e9c:	01010101 	.word	0x01010101
	...

08002ea8 <__clzdi2>:
 8002ea8:	b510      	push	{r4, lr}
 8002eaa:	2900      	cmp	r1, #0
 8002eac:	d103      	bne.n	8002eb6 <__clzdi2+0xe>
 8002eae:	f7ff ffdd 	bl	8002e6c <__clzsi2>
 8002eb2:	3020      	adds	r0, #32
 8002eb4:	e002      	b.n	8002ebc <__clzdi2+0x14>
 8002eb6:	0008      	movs	r0, r1
 8002eb8:	f7ff ffd8 	bl	8002e6c <__clzsi2>
 8002ebc:	bd10      	pop	{r4, pc}
 8002ebe:	46c0      	nop			@ (mov r8, r8)

08002ec0 <__divdi3>:
 8002ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ec2:	464f      	mov	r7, r9
 8002ec4:	4646      	mov	r6, r8
 8002ec6:	46d6      	mov	lr, sl
 8002ec8:	b5c0      	push	{r6, r7, lr}
 8002eca:	0006      	movs	r6, r0
 8002ecc:	000f      	movs	r7, r1
 8002ece:	0010      	movs	r0, r2
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	2f00      	cmp	r7, #0
 8002ed6:	db5d      	blt.n	8002f94 <__divdi3+0xd4>
 8002ed8:	0034      	movs	r4, r6
 8002eda:	003d      	movs	r5, r7
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	db0b      	blt.n	8002ef8 <__divdi3+0x38>
 8002ee0:	0016      	movs	r6, r2
 8002ee2:	001f      	movs	r7, r3
 8002ee4:	42ab      	cmp	r3, r5
 8002ee6:	d917      	bls.n	8002f18 <__divdi3+0x58>
 8002ee8:	2000      	movs	r0, #0
 8002eea:	2100      	movs	r1, #0
 8002eec:	b002      	add	sp, #8
 8002eee:	bce0      	pop	{r5, r6, r7}
 8002ef0:	46ba      	mov	sl, r7
 8002ef2:	46b1      	mov	r9, r6
 8002ef4:	46a8      	mov	r8, r5
 8002ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ef8:	2700      	movs	r7, #0
 8002efa:	4246      	negs	r6, r0
 8002efc:	418f      	sbcs	r7, r1
 8002efe:	42af      	cmp	r7, r5
 8002f00:	d8f2      	bhi.n	8002ee8 <__divdi3+0x28>
 8002f02:	d100      	bne.n	8002f06 <__divdi3+0x46>
 8002f04:	e0a0      	b.n	8003048 <__divdi3+0x188>
 8002f06:	2301      	movs	r3, #1
 8002f08:	425b      	negs	r3, r3
 8002f0a:	4699      	mov	r9, r3
 8002f0c:	e009      	b.n	8002f22 <__divdi3+0x62>
 8002f0e:	2700      	movs	r7, #0
 8002f10:	4246      	negs	r6, r0
 8002f12:	418f      	sbcs	r7, r1
 8002f14:	42af      	cmp	r7, r5
 8002f16:	d8e7      	bhi.n	8002ee8 <__divdi3+0x28>
 8002f18:	42af      	cmp	r7, r5
 8002f1a:	d100      	bne.n	8002f1e <__divdi3+0x5e>
 8002f1c:	e090      	b.n	8003040 <__divdi3+0x180>
 8002f1e:	2300      	movs	r3, #0
 8002f20:	4699      	mov	r9, r3
 8002f22:	0039      	movs	r1, r7
 8002f24:	0030      	movs	r0, r6
 8002f26:	f7ff ffbf 	bl	8002ea8 <__clzdi2>
 8002f2a:	4680      	mov	r8, r0
 8002f2c:	0029      	movs	r1, r5
 8002f2e:	0020      	movs	r0, r4
 8002f30:	f7ff ffba 	bl	8002ea8 <__clzdi2>
 8002f34:	4643      	mov	r3, r8
 8002f36:	1a1b      	subs	r3, r3, r0
 8002f38:	4698      	mov	r8, r3
 8002f3a:	3b20      	subs	r3, #32
 8002f3c:	d475      	bmi.n	800302a <__divdi3+0x16a>
 8002f3e:	0031      	movs	r1, r6
 8002f40:	4099      	lsls	r1, r3
 8002f42:	469a      	mov	sl, r3
 8002f44:	000b      	movs	r3, r1
 8002f46:	0031      	movs	r1, r6
 8002f48:	4640      	mov	r0, r8
 8002f4a:	4081      	lsls	r1, r0
 8002f4c:	000a      	movs	r2, r1
 8002f4e:	42ab      	cmp	r3, r5
 8002f50:	d82e      	bhi.n	8002fb0 <__divdi3+0xf0>
 8002f52:	d02b      	beq.n	8002fac <__divdi3+0xec>
 8002f54:	4651      	mov	r1, sl
 8002f56:	1aa4      	subs	r4, r4, r2
 8002f58:	419d      	sbcs	r5, r3
 8002f5a:	2900      	cmp	r1, #0
 8002f5c:	da00      	bge.n	8002f60 <__divdi3+0xa0>
 8002f5e:	e090      	b.n	8003082 <__divdi3+0x1c2>
 8002f60:	2100      	movs	r1, #0
 8002f62:	2000      	movs	r0, #0
 8002f64:	2601      	movs	r6, #1
 8002f66:	9000      	str	r0, [sp, #0]
 8002f68:	9101      	str	r1, [sp, #4]
 8002f6a:	4651      	mov	r1, sl
 8002f6c:	408e      	lsls	r6, r1
 8002f6e:	9601      	str	r6, [sp, #4]
 8002f70:	4641      	mov	r1, r8
 8002f72:	2601      	movs	r6, #1
 8002f74:	408e      	lsls	r6, r1
 8002f76:	4641      	mov	r1, r8
 8002f78:	9600      	str	r6, [sp, #0]
 8002f7a:	2900      	cmp	r1, #0
 8002f7c:	d11f      	bne.n	8002fbe <__divdi3+0xfe>
 8002f7e:	9800      	ldr	r0, [sp, #0]
 8002f80:	9901      	ldr	r1, [sp, #4]
 8002f82:	464b      	mov	r3, r9
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0b1      	beq.n	8002eec <__divdi3+0x2c>
 8002f88:	0003      	movs	r3, r0
 8002f8a:	000c      	movs	r4, r1
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	4258      	negs	r0, r3
 8002f90:	41a1      	sbcs	r1, r4
 8002f92:	e7ab      	b.n	8002eec <__divdi3+0x2c>
 8002f94:	2500      	movs	r5, #0
 8002f96:	4274      	negs	r4, r6
 8002f98:	41bd      	sbcs	r5, r7
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	dbb7      	blt.n	8002f0e <__divdi3+0x4e>
 8002f9e:	0016      	movs	r6, r2
 8002fa0:	001f      	movs	r7, r3
 8002fa2:	42ab      	cmp	r3, r5
 8002fa4:	d8a0      	bhi.n	8002ee8 <__divdi3+0x28>
 8002fa6:	42af      	cmp	r7, r5
 8002fa8:	d1ad      	bne.n	8002f06 <__divdi3+0x46>
 8002faa:	e04d      	b.n	8003048 <__divdi3+0x188>
 8002fac:	42a1      	cmp	r1, r4
 8002fae:	d9d1      	bls.n	8002f54 <__divdi3+0x94>
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	9000      	str	r0, [sp, #0]
 8002fb6:	9101      	str	r1, [sp, #4]
 8002fb8:	4641      	mov	r1, r8
 8002fba:	2900      	cmp	r1, #0
 8002fbc:	d0df      	beq.n	8002f7e <__divdi3+0xbe>
 8002fbe:	07d9      	lsls	r1, r3, #31
 8002fc0:	0856      	lsrs	r6, r2, #1
 8002fc2:	085f      	lsrs	r7, r3, #1
 8002fc4:	430e      	orrs	r6, r1
 8002fc6:	4643      	mov	r3, r8
 8002fc8:	e00e      	b.n	8002fe8 <__divdi3+0x128>
 8002fca:	42af      	cmp	r7, r5
 8002fcc:	d101      	bne.n	8002fd2 <__divdi3+0x112>
 8002fce:	42a6      	cmp	r6, r4
 8002fd0:	d80c      	bhi.n	8002fec <__divdi3+0x12c>
 8002fd2:	1ba4      	subs	r4, r4, r6
 8002fd4:	41bd      	sbcs	r5, r7
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	1924      	adds	r4, r4, r4
 8002fda:	416d      	adcs	r5, r5
 8002fdc:	2200      	movs	r2, #0
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	1864      	adds	r4, r4, r1
 8002fe2:	4155      	adcs	r5, r2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d006      	beq.n	8002ff6 <__divdi3+0x136>
 8002fe8:	42af      	cmp	r7, r5
 8002fea:	d9ee      	bls.n	8002fca <__divdi3+0x10a>
 8002fec:	3b01      	subs	r3, #1
 8002fee:	1924      	adds	r4, r4, r4
 8002ff0:	416d      	adcs	r5, r5
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f8      	bne.n	8002fe8 <__divdi3+0x128>
 8002ff6:	9a00      	ldr	r2, [sp, #0]
 8002ff8:	9b01      	ldr	r3, [sp, #4]
 8002ffa:	4651      	mov	r1, sl
 8002ffc:	1912      	adds	r2, r2, r4
 8002ffe:	416b      	adcs	r3, r5
 8003000:	2900      	cmp	r1, #0
 8003002:	db25      	blt.n	8003050 <__divdi3+0x190>
 8003004:	002e      	movs	r6, r5
 8003006:	002c      	movs	r4, r5
 8003008:	40ce      	lsrs	r6, r1
 800300a:	4641      	mov	r1, r8
 800300c:	40cc      	lsrs	r4, r1
 800300e:	4651      	mov	r1, sl
 8003010:	2900      	cmp	r1, #0
 8003012:	db2d      	blt.n	8003070 <__divdi3+0x1b0>
 8003014:	0034      	movs	r4, r6
 8003016:	408c      	lsls	r4, r1
 8003018:	0021      	movs	r1, r4
 800301a:	4644      	mov	r4, r8
 800301c:	40a6      	lsls	r6, r4
 800301e:	0030      	movs	r0, r6
 8003020:	1a12      	subs	r2, r2, r0
 8003022:	418b      	sbcs	r3, r1
 8003024:	9200      	str	r2, [sp, #0]
 8003026:	9301      	str	r3, [sp, #4]
 8003028:	e7a9      	b.n	8002f7e <__divdi3+0xbe>
 800302a:	4642      	mov	r2, r8
 800302c:	0038      	movs	r0, r7
 800302e:	469a      	mov	sl, r3
 8003030:	2320      	movs	r3, #32
 8003032:	0031      	movs	r1, r6
 8003034:	4090      	lsls	r0, r2
 8003036:	1a9b      	subs	r3, r3, r2
 8003038:	40d9      	lsrs	r1, r3
 800303a:	0003      	movs	r3, r0
 800303c:	430b      	orrs	r3, r1
 800303e:	e782      	b.n	8002f46 <__divdi3+0x86>
 8003040:	42a6      	cmp	r6, r4
 8003042:	d900      	bls.n	8003046 <__divdi3+0x186>
 8003044:	e750      	b.n	8002ee8 <__divdi3+0x28>
 8003046:	e76a      	b.n	8002f1e <__divdi3+0x5e>
 8003048:	42a6      	cmp	r6, r4
 800304a:	d800      	bhi.n	800304e <__divdi3+0x18e>
 800304c:	e75b      	b.n	8002f06 <__divdi3+0x46>
 800304e:	e74b      	b.n	8002ee8 <__divdi3+0x28>
 8003050:	4640      	mov	r0, r8
 8003052:	2120      	movs	r1, #32
 8003054:	1a09      	subs	r1, r1, r0
 8003056:	0028      	movs	r0, r5
 8003058:	4088      	lsls	r0, r1
 800305a:	0026      	movs	r6, r4
 800305c:	0001      	movs	r1, r0
 800305e:	4640      	mov	r0, r8
 8003060:	40c6      	lsrs	r6, r0
 8003062:	002c      	movs	r4, r5
 8003064:	430e      	orrs	r6, r1
 8003066:	4641      	mov	r1, r8
 8003068:	40cc      	lsrs	r4, r1
 800306a:	4651      	mov	r1, sl
 800306c:	2900      	cmp	r1, #0
 800306e:	dad1      	bge.n	8003014 <__divdi3+0x154>
 8003070:	4640      	mov	r0, r8
 8003072:	2120      	movs	r1, #32
 8003074:	0035      	movs	r5, r6
 8003076:	4084      	lsls	r4, r0
 8003078:	1a09      	subs	r1, r1, r0
 800307a:	40cd      	lsrs	r5, r1
 800307c:	0021      	movs	r1, r4
 800307e:	4329      	orrs	r1, r5
 8003080:	e7cb      	b.n	800301a <__divdi3+0x15a>
 8003082:	4641      	mov	r1, r8
 8003084:	2620      	movs	r6, #32
 8003086:	2701      	movs	r7, #1
 8003088:	1a76      	subs	r6, r6, r1
 800308a:	2000      	movs	r0, #0
 800308c:	2100      	movs	r1, #0
 800308e:	40f7      	lsrs	r7, r6
 8003090:	9000      	str	r0, [sp, #0]
 8003092:	9101      	str	r1, [sp, #4]
 8003094:	9701      	str	r7, [sp, #4]
 8003096:	e76b      	b.n	8002f70 <__divdi3+0xb0>

08003098 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2203      	movs	r2, #3
 80030a4:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2203      	movs	r2, #3
 80030b0:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2203      	movs	r2, #3
 80030b6:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2203      	movs	r2, #3
 80030bc:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2203      	movs	r2, #3
 80030c2:	715a      	strb	r2, [r3, #5]
}
 80030c4:	46c0      	nop			@ (mov r8, r8)
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b002      	add	sp, #8
 80030ca:	bd80      	pop	{r7, pc}

080030cc <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80030cc:	b590      	push	{r4, r7, lr}
 80030ce:	b08b      	sub	sp, #44	@ 0x2c
 80030d0:	af04      	add	r7, sp, #16
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	607a      	str	r2, [r7, #4]
 80030d6:	240b      	movs	r4, #11
 80030d8:	193b      	adds	r3, r7, r4
 80030da:	1c0a      	adds	r2, r1, #0
 80030dc:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80030e2:	2116      	movs	r1, #22
 80030e4:	187a      	adds	r2, r7, r1
 80030e6:	18db      	adds	r3, r3, r3
 80030e8:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80030ee:	193b      	adds	r3, r7, r4
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	187b      	adds	r3, r7, r1
 80030f6:	8819      	ldrh	r1, [r3, #0]
 80030f8:	4b10      	ldr	r3, [pc, #64]	@ (800313c <read_register16+0x70>)
 80030fa:	9302      	str	r3, [sp, #8]
 80030fc:	2302      	movs	r3, #2
 80030fe:	9301      	str	r3, [sp, #4]
 8003100:	2414      	movs	r4, #20
 8003102:	193b      	adds	r3, r7, r4
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	2301      	movs	r3, #1
 8003108:	f002 f96e 	bl	80053e8 <HAL_I2C_Mem_Read>
 800310c:	1e03      	subs	r3, r0, #0
 800310e:	d10f      	bne.n	8003130 <read_register16+0x64>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8003110:	0021      	movs	r1, r4
 8003112:	187b      	adds	r3, r7, r1
 8003114:	785b      	ldrb	r3, [r3, #1]
 8003116:	b21b      	sxth	r3, r3
 8003118:	021b      	lsls	r3, r3, #8
 800311a:	b21a      	sxth	r2, r3
 800311c:	187b      	adds	r3, r7, r1
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	b21b      	sxth	r3, r3
 8003122:	4313      	orrs	r3, r2
 8003124:	b21b      	sxth	r3, r3
 8003126:	b29a      	uxth	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	801a      	strh	r2, [r3, #0]
		return true;
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <read_register16+0x66>
	} else
		return false;
 8003130:	2300      	movs	r3, #0

}
 8003132:	0018      	movs	r0, r3
 8003134:	46bd      	mov	sp, r7
 8003136:	b007      	add	sp, #28
 8003138:	bd90      	pop	{r4, r7, pc}
 800313a:	46c0      	nop			@ (mov r8, r8)
 800313c:	00001388 	.word	0x00001388

08003140 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8003140:	b5b0      	push	{r4, r5, r7, lr}
 8003142:	b08a      	sub	sp, #40	@ 0x28
 8003144:	af04      	add	r7, sp, #16
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	0008      	movs	r0, r1
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	0019      	movs	r1, r3
 800314e:	240b      	movs	r4, #11
 8003150:	193b      	adds	r3, r7, r4
 8003152:	1c02      	adds	r2, r0, #0
 8003154:	701a      	strb	r2, [r3, #0]
 8003156:	250a      	movs	r5, #10
 8003158:	197b      	adds	r3, r7, r5
 800315a:	1c0a      	adds	r2, r1, #0
 800315c:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003162:	2116      	movs	r1, #22
 8003164:	187a      	adds	r2, r7, r1
 8003166:	18db      	adds	r3, r3, r3
 8003168:	8013      	strh	r3, [r2, #0]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800316e:	193b      	adds	r3, r7, r4
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	b29c      	uxth	r4, r3
 8003174:	197b      	adds	r3, r7, r5
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	b29b      	uxth	r3, r3
 800317a:	187a      	adds	r2, r7, r1
 800317c:	8811      	ldrh	r1, [r2, #0]
 800317e:	4a09      	ldr	r2, [pc, #36]	@ (80031a4 <read_data+0x64>)
 8003180:	9202      	str	r2, [sp, #8]
 8003182:	9301      	str	r3, [sp, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	2301      	movs	r3, #1
 800318a:	0022      	movs	r2, r4
 800318c:	f002 f92c 	bl	80053e8 <HAL_I2C_Mem_Read>
 8003190:	1e03      	subs	r3, r0, #0
 8003192:	d101      	bne.n	8003198 <read_data+0x58>
		return 0;
 8003194:	2300      	movs	r3, #0
 8003196:	e000      	b.n	800319a <read_data+0x5a>
	else
		return 1;
 8003198:	2301      	movs	r3, #1

}
 800319a:	0018      	movs	r0, r3
 800319c:	46bd      	mov	sp, r7
 800319e:	b006      	add	sp, #24
 80031a0:	bdb0      	pop	{r4, r5, r7, pc}
 80031a2:	46c0      	nop			@ (mov r8, r8)
 80031a4:	00001388 	.word	0x00001388

080031a8 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2188      	movs	r1, #136	@ 0x88
 80031b6:	0018      	movs	r0, r3
 80031b8:	f7ff ff88 	bl	80030cc <read_register16>
 80031bc:	1e03      	subs	r3, r0, #0
 80031be:	d100      	bne.n	80031c2 <read_calibration_data+0x1a>
 80031c0:	e06d      	b.n	800329e <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	1c9a      	adds	r2, r3, #2
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	218a      	movs	r1, #138	@ 0x8a
 80031ca:	0018      	movs	r0, r3
 80031cc:	f7ff ff7e 	bl	80030cc <read_register16>
 80031d0:	1e03      	subs	r3, r0, #0
 80031d2:	d100      	bne.n	80031d6 <read_calibration_data+0x2e>
 80031d4:	e063      	b.n	800329e <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	1d1a      	adds	r2, r3, #4
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	218c      	movs	r1, #140	@ 0x8c
 80031de:	0018      	movs	r0, r3
 80031e0:	f7ff ff74 	bl	80030cc <read_register16>
 80031e4:	1e03      	subs	r3, r0, #0
 80031e6:	d05a      	beq.n	800329e <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	1d9a      	adds	r2, r3, #6
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	218e      	movs	r1, #142	@ 0x8e
 80031f0:	0018      	movs	r0, r3
 80031f2:	f7ff ff6b 	bl	80030cc <read_register16>
 80031f6:	1e03      	subs	r3, r0, #0
 80031f8:	d051      	beq.n	800329e <read_calibration_data+0xf6>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3308      	adds	r3, #8
 80031fe:	001a      	movs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2190      	movs	r1, #144	@ 0x90
 8003204:	0018      	movs	r0, r3
 8003206:	f7ff ff61 	bl	80030cc <read_register16>
 800320a:	1e03      	subs	r3, r0, #0
 800320c:	d047      	beq.n	800329e <read_calibration_data+0xf6>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	330a      	adds	r3, #10
 8003212:	001a      	movs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2192      	movs	r1, #146	@ 0x92
 8003218:	0018      	movs	r0, r3
 800321a:	f7ff ff57 	bl	80030cc <read_register16>
 800321e:	1e03      	subs	r3, r0, #0
 8003220:	d03d      	beq.n	800329e <read_calibration_data+0xf6>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	330c      	adds	r3, #12
 8003226:	001a      	movs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2194      	movs	r1, #148	@ 0x94
 800322c:	0018      	movs	r0, r3
 800322e:	f7ff ff4d 	bl	80030cc <read_register16>
 8003232:	1e03      	subs	r3, r0, #0
 8003234:	d033      	beq.n	800329e <read_calibration_data+0xf6>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	330e      	adds	r3, #14
 800323a:	001a      	movs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2196      	movs	r1, #150	@ 0x96
 8003240:	0018      	movs	r0, r3
 8003242:	f7ff ff43 	bl	80030cc <read_register16>
 8003246:	1e03      	subs	r3, r0, #0
 8003248:	d029      	beq.n	800329e <read_calibration_data+0xf6>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3310      	adds	r3, #16
 800324e:	001a      	movs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2198      	movs	r1, #152	@ 0x98
 8003254:	0018      	movs	r0, r3
 8003256:	f7ff ff39 	bl	80030cc <read_register16>
 800325a:	1e03      	subs	r3, r0, #0
 800325c:	d01f      	beq.n	800329e <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3312      	adds	r3, #18
 8003262:	001a      	movs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	219a      	movs	r1, #154	@ 0x9a
 8003268:	0018      	movs	r0, r3
 800326a:	f7ff ff2f 	bl	80030cc <read_register16>
 800326e:	1e03      	subs	r3, r0, #0
 8003270:	d015      	beq.n	800329e <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3314      	adds	r3, #20
 8003276:	001a      	movs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	219c      	movs	r1, #156	@ 0x9c
 800327c:	0018      	movs	r0, r3
 800327e:	f7ff ff25 	bl	80030cc <read_register16>
 8003282:	1e03      	subs	r3, r0, #0
 8003284:	d00b      	beq.n	800329e <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3316      	adds	r3, #22
 800328a:	001a      	movs	r2, r3
			&& read_register16(dev, 0x9e,
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	219e      	movs	r1, #158	@ 0x9e
 8003290:	0018      	movs	r0, r3
 8003292:	f7ff ff1b 	bl	80030cc <read_register16>
 8003296:	1e03      	subs	r3, r0, #0
 8003298:	d001      	beq.n	800329e <read_calibration_data+0xf6>

		return true;
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <read_calibration_data+0xf8>
	}

	return false;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	0018      	movs	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	b002      	add	sp, #8
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80032a8:	b5b0      	push	{r4, r5, r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3318      	adds	r3, #24
 80032b4:	001a      	movs	r2, r3
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	2301      	movs	r3, #1
 80032ba:	21a1      	movs	r1, #161	@ 0xa1
 80032bc:	f7ff ff40 	bl	8003140 <read_data>
 80032c0:	1e03      	subs	r3, r0, #0
 80032c2:	d14c      	bne.n	800335e <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	331a      	adds	r3, #26
 80032c8:	001a      	movs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	21e1      	movs	r1, #225	@ 0xe1
 80032ce:	0018      	movs	r0, r3
 80032d0:	f7ff fefc 	bl	80030cc <read_register16>
 80032d4:	1e03      	subs	r3, r0, #0
 80032d6:	d042      	beq.n	800335e <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	331c      	adds	r3, #28
 80032dc:	001a      	movs	r2, r3
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	2301      	movs	r3, #1
 80032e2:	21e3      	movs	r1, #227	@ 0xe3
 80032e4:	f7ff ff2c 	bl	8003140 <read_data>
 80032e8:	1e03      	subs	r3, r0, #0
 80032ea:	d138      	bne.n	800335e <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 80032ec:	240e      	movs	r4, #14
 80032ee:	193a      	adds	r2, r7, r4
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	21e4      	movs	r1, #228	@ 0xe4
 80032f4:	0018      	movs	r0, r3
 80032f6:	f7ff fee9 	bl	80030cc <read_register16>
 80032fa:	1e03      	subs	r3, r0, #0
 80032fc:	d02f      	beq.n	800335e <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80032fe:	250c      	movs	r5, #12
 8003300:	197a      	adds	r2, r7, r5
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	21e5      	movs	r1, #229	@ 0xe5
 8003306:	0018      	movs	r0, r3
 8003308:	f7ff fee0 	bl	80030cc <read_register16>
 800330c:	1e03      	subs	r3, r0, #0
 800330e:	d026      	beq.n	800335e <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3322      	adds	r3, #34	@ 0x22
 8003314:	001a      	movs	r2, r3
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	2301      	movs	r3, #1
 800331a:	21e7      	movs	r1, #231	@ 0xe7
 800331c:	f7ff ff10 	bl	8003140 <read_data>
 8003320:	1e03      	subs	r3, r0, #0
 8003322:	d11c      	bne.n	800335e <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8003324:	193b      	adds	r3, r7, r4
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	b21b      	sxth	r3, r3
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	b21a      	sxth	r2, r3
 800332e:	23ff      	movs	r3, #255	@ 0xff
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	4013      	ands	r3, r2
 8003334:	b21a      	sxth	r2, r3
 8003336:	193b      	adds	r3, r7, r4
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	121b      	asrs	r3, r3, #8
 800333c:	b21b      	sxth	r3, r3
 800333e:	210f      	movs	r1, #15
 8003340:	400b      	ands	r3, r1
 8003342:	b21b      	sxth	r3, r3
 8003344:	4313      	orrs	r3, r2
 8003346:	b21a      	sxth	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 800334c:	197b      	adds	r3, r7, r5
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	091b      	lsrs	r3, r3, #4
 8003352:	b29b      	uxth	r3, r3
 8003354:	b21a      	sxth	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	841a      	strh	r2, [r3, #32]

		return true;
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <read_hum_calibration_data+0xb8>
	}

	return false;
 800335e:	2300      	movs	r3, #0
}
 8003360:	0018      	movs	r0, r3
 8003362:	46bd      	mov	sp, r7
 8003364:	b004      	add	sp, #16
 8003366:	bdb0      	pop	{r4, r5, r7, pc}

08003368 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af04      	add	r7, sp, #16
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	0008      	movs	r0, r1
 8003372:	0011      	movs	r1, r2
 8003374:	1cfb      	adds	r3, r7, #3
 8003376:	1c02      	adds	r2, r0, #0
 8003378:	701a      	strb	r2, [r3, #0]
 800337a:	1cbb      	adds	r3, r7, #2
 800337c:	1c0a      	adds	r2, r1, #0
 800337e:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003384:	210e      	movs	r1, #14
 8003386:	187a      	adds	r2, r7, r1
 8003388:	18db      	adds	r3, r3, r3
 800338a:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003390:	1cfb      	adds	r3, r7, #3
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	b29a      	uxth	r2, r3
 8003396:	187b      	adds	r3, r7, r1
 8003398:	8819      	ldrh	r1, [r3, #0]
 800339a:	4b09      	ldr	r3, [pc, #36]	@ (80033c0 <write_register8+0x58>)
 800339c:	9302      	str	r3, [sp, #8]
 800339e:	2301      	movs	r3, #1
 80033a0:	9301      	str	r3, [sp, #4]
 80033a2:	1cbb      	adds	r3, r7, #2
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	2301      	movs	r3, #1
 80033a8:	f001 fef0 	bl	800518c <HAL_I2C_Mem_Write>
 80033ac:	1e03      	subs	r3, r0, #0
 80033ae:	d101      	bne.n	80033b4 <write_register8+0x4c>
		return false;
 80033b0:	2300      	movs	r3, #0
 80033b2:	e000      	b.n	80033b6 <write_register8+0x4e>
	else
		return true;
 80033b4:	2301      	movs	r3, #1
}
 80033b6:	0018      	movs	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b004      	add	sp, #16
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	46c0      	nop			@ (mov r8, r8)
 80033c0:	00002710 	.word	0x00002710

080033c4 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80033c4:	b590      	push	{r4, r7, lr}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80033d2:	2b76      	cmp	r3, #118	@ 0x76
 80033d4:	d005      	beq.n	80033e2 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80033da:	2b77      	cmp	r3, #119	@ 0x77
 80033dc:	d001      	beq.n	80033e2 <bmp280_init+0x1e>

		return false;
 80033de:	2300      	movs	r3, #0
 80033e0:	e0a7      	b.n	8003532 <bmp280_init+0x16e>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	3332      	adds	r3, #50	@ 0x32
 80033e6:	001a      	movs	r2, r3
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	2301      	movs	r3, #1
 80033ec:	21d0      	movs	r1, #208	@ 0xd0
 80033ee:	f7ff fea7 	bl	8003140 <read_data>
 80033f2:	1e03      	subs	r3, r0, #0
 80033f4:	d001      	beq.n	80033fa <bmp280_init+0x36>
		return false;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e09b      	b.n	8003532 <bmp280_init+0x16e>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2232      	movs	r2, #50	@ 0x32
 80033fe:	5c9b      	ldrb	r3, [r3, r2]
 8003400:	2b58      	cmp	r3, #88	@ 0x58
 8003402:	d006      	beq.n	8003412 <bmp280_init+0x4e>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2232      	movs	r2, #50	@ 0x32
 8003408:	5c9b      	ldrb	r3, [r3, r2]
 800340a:	2b60      	cmp	r3, #96	@ 0x60
 800340c:	d001      	beq.n	8003412 <bmp280_init+0x4e>

		return false;
 800340e:	2300      	movs	r3, #0
 8003410:	e08f      	b.n	8003532 <bmp280_init+0x16e>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	22b6      	movs	r2, #182	@ 0xb6
 8003416:	21e0      	movs	r1, #224	@ 0xe0
 8003418:	0018      	movs	r0, r3
 800341a:	f7ff ffa5 	bl	8003368 <write_register8>
 800341e:	1e03      	subs	r3, r0, #0
 8003420:	d001      	beq.n	8003426 <bmp280_init+0x62>
		return false;
 8003422:	2300      	movs	r3, #0
 8003424:	e085      	b.n	8003532 <bmp280_init+0x16e>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8003426:	240c      	movs	r4, #12
 8003428:	193a      	adds	r2, r7, r4
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	2301      	movs	r3, #1
 800342e:	21f3      	movs	r1, #243	@ 0xf3
 8003430:	f7ff fe86 	bl	8003140 <read_data>
 8003434:	1e03      	subs	r3, r0, #0
 8003436:	d1f6      	bne.n	8003426 <bmp280_init+0x62>
				&& (status & 1) == 0)
 8003438:	193b      	adds	r3, r7, r4
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	001a      	movs	r2, r3
 800343e:	2301      	movs	r3, #1
 8003440:	4013      	ands	r3, r2
 8003442:	d1f0      	bne.n	8003426 <bmp280_init+0x62>
			break;
	}

	if (!read_calibration_data(dev)) {
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	0018      	movs	r0, r3
 8003448:	f7ff feae 	bl	80031a8 <read_calibration_data>
 800344c:	0003      	movs	r3, r0
 800344e:	001a      	movs	r2, r3
 8003450:	2301      	movs	r3, #1
 8003452:	4053      	eors	r3, r2
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d100      	bne.n	800345c <bmp280_init+0x98>
 800345a:	e001      	b.n	8003460 <bmp280_init+0x9c>
		return false;
 800345c:	2300      	movs	r3, #0
 800345e:	e068      	b.n	8003532 <bmp280_init+0x16e>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2232      	movs	r2, #50	@ 0x32
 8003464:	5c9b      	ldrb	r3, [r3, r2]
 8003466:	2b60      	cmp	r3, #96	@ 0x60
 8003468:	d10c      	bne.n	8003484 <bmp280_init+0xc0>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	0018      	movs	r0, r3
 800346e:	f7ff ff1b 	bl	80032a8 <read_hum_calibration_data>
 8003472:	0003      	movs	r3, r0
 8003474:	001a      	movs	r2, r3
 8003476:	2301      	movs	r3, #1
 8003478:	4053      	eors	r3, r2
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <bmp280_init+0xc0>
		return false;
 8003480:	2300      	movs	r3, #0
 8003482:	e056      	b.n	8003532 <bmp280_init+0x16e>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	795b      	ldrb	r3, [r3, #5]
 8003488:	b25b      	sxtb	r3, r3
 800348a:	015b      	lsls	r3, r3, #5
 800348c:	b25a      	sxtb	r2, r3
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	785b      	ldrb	r3, [r3, #1]
 8003492:	b25b      	sxtb	r3, r3
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	b25b      	sxtb	r3, r3
 8003498:	4313      	orrs	r3, r2
 800349a:	b25a      	sxtb	r2, r3
 800349c:	210f      	movs	r1, #15
 800349e:	187b      	adds	r3, r7, r1
 80034a0:	701a      	strb	r2, [r3, #0]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80034a2:	187b      	adds	r3, r7, r1
 80034a4:	781a      	ldrb	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	21f5      	movs	r1, #245	@ 0xf5
 80034aa:	0018      	movs	r0, r3
 80034ac:	f7ff ff5c 	bl	8003368 <write_register8>
 80034b0:	1e03      	subs	r3, r0, #0
 80034b2:	d001      	beq.n	80034b8 <bmp280_init+0xf4>
		return false;
 80034b4:	2300      	movs	r3, #0
 80034b6:	e03c      	b.n	8003532 <bmp280_init+0x16e>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d102      	bne.n	80034c6 <bmp280_init+0x102>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	2200      	movs	r2, #0
 80034c4:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	78db      	ldrb	r3, [r3, #3]
			| (params->oversampling_pressure << 2) | (params->mode);
 80034ca:	b25b      	sxtb	r3, r3
 80034cc:	015b      	lsls	r3, r3, #5
 80034ce:	b25a      	sxtb	r2, r3
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	789b      	ldrb	r3, [r3, #2]
 80034d4:	b25b      	sxtb	r3, r3
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	b25b      	sxtb	r3, r3
 80034da:	4313      	orrs	r3, r2
 80034dc:	b25a      	sxtb	r2, r3
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	b25b      	sxtb	r3, r3
 80034e4:	4313      	orrs	r3, r2
 80034e6:	b25a      	sxtb	r2, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80034e8:	230e      	movs	r3, #14
 80034ea:	18fb      	adds	r3, r7, r3
 80034ec:	701a      	strb	r2, [r3, #0]

	if (dev->id == BME280_CHIP_ID) {
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2232      	movs	r2, #50	@ 0x32
 80034f2:	5c9b      	ldrb	r3, [r3, r2]
 80034f4:	2b60      	cmp	r3, #96	@ 0x60
 80034f6:	d10f      	bne.n	8003518 <bmp280_init+0x154>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 80034f8:	210d      	movs	r1, #13
 80034fa:	187b      	adds	r3, r7, r1
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	7912      	ldrb	r2, [r2, #4]
 8003500:	701a      	strb	r2, [r3, #0]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8003502:	187b      	adds	r3, r7, r1
 8003504:	781a      	ldrb	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	21f2      	movs	r1, #242	@ 0xf2
 800350a:	0018      	movs	r0, r3
 800350c:	f7ff ff2c 	bl	8003368 <write_register8>
 8003510:	1e03      	subs	r3, r0, #0
 8003512:	d001      	beq.n	8003518 <bmp280_init+0x154>
			return false;
 8003514:	2300      	movs	r3, #0
 8003516:	e00c      	b.n	8003532 <bmp280_init+0x16e>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8003518:	230e      	movs	r3, #14
 800351a:	18fb      	adds	r3, r7, r3
 800351c:	781a      	ldrb	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	21f4      	movs	r1, #244	@ 0xf4
 8003522:	0018      	movs	r0, r3
 8003524:	f7ff ff20 	bl	8003368 <write_register8>
 8003528:	1e03      	subs	r3, r0, #0
 800352a:	d001      	beq.n	8003530 <bmp280_init+0x16c>
		return false;
 800352c:	2300      	movs	r3, #0
 800352e:	e000      	b.n	8003532 <bmp280_init+0x16e>
	}

	return true;
 8003530:	2301      	movs	r3, #1
}
 8003532:	0018      	movs	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	b005      	add	sp, #20
 8003538:	bd90      	pop	{r4, r7, pc}

0800353a <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 800353a:	b580      	push	{r7, lr}
 800353c:	b086      	sub	sp, #24
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	10da      	asrs	r2, r3, #3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	2102      	movs	r1, #2
 8003556:	5e52      	ldrsh	r2, [r2, r1]
 8003558:	4353      	muls	r3, r2
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800355a:	12db      	asrs	r3, r3, #11
 800355c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	111b      	asrs	r3, r3, #4
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	8812      	ldrh	r2, [r2, #0]
 8003566:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	1112      	asrs	r2, r2, #4
 800356c:	68f9      	ldr	r1, [r7, #12]
 800356e:	8809      	ldrh	r1, [r1, #0]
 8003570:	1a52      	subs	r2, r2, r1
 8003572:	4353      	muls	r3, r2
 8003574:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	2104      	movs	r1, #4
 800357a:	5e52      	ldrsh	r2, [r2, r1]
 800357c:	4353      	muls	r3, r2
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800357e:	139b      	asrs	r3, r3, #14
 8003580:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	18d2      	adds	r2, r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	0013      	movs	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	189b      	adds	r3, r3, r2
 8003596:	3380      	adds	r3, #128	@ 0x80
 8003598:	121b      	asrs	r3, r3, #8
}
 800359a:	0018      	movs	r0, r3
 800359c:	46bd      	mov	sp, r7
 800359e:	b006      	add	sp, #24
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80035a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035a6:	b0af      	sub	sp, #188	@ 0xbc
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	239c      	movs	r3, #156	@ 0x9c
 80035ac:	18fe      	adds	r6, r7, r3
 80035ae:	6030      	str	r0, [r6, #0]
 80035b0:	2098      	movs	r0, #152	@ 0x98
 80035b2:	1838      	adds	r0, r7, r0
 80035b4:	6001      	str	r1, [r0, #0]
 80035b6:	2194      	movs	r1, #148	@ 0x94
 80035b8:	1878      	adds	r0, r7, r1
 80035ba:	6002      	str	r2, [r0, #0]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80035bc:	187a      	adds	r2, r7, r1
 80035be:	6813      	ldr	r3, [r2, #0]
 80035c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035c2:	17db      	asrs	r3, r3, #31
 80035c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035c6:	4ace      	ldr	r2, [pc, #824]	@ (8003900 <compensate_pressure+0x35c>)
 80035c8:	2301      	movs	r3, #1
 80035ca:	425b      	negs	r3, r3
 80035cc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80035ce:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80035d0:	1880      	adds	r0, r0, r2
 80035d2:	4159      	adcs	r1, r3
 80035d4:	0002      	movs	r2, r0
 80035d6:	000b      	movs	r3, r1
 80035d8:	26b0      	movs	r6, #176	@ 0xb0
 80035da:	19b9      	adds	r1, r7, r6
 80035dc:	600a      	str	r2, [r1, #0]
 80035de:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80035e0:	19ba      	adds	r2, r7, r6
 80035e2:	6853      	ldr	r3, [r2, #4]
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	19b9      	adds	r1, r7, r6
 80035e8:	6808      	ldr	r0, [r1, #0]
 80035ea:	6849      	ldr	r1, [r1, #4]
 80035ec:	f7fc ffa0 	bl	8000530 <__aeabi_lmul>
 80035f0:	0002      	movs	r2, r0
 80035f2:	000b      	movs	r3, r1
 80035f4:	0010      	movs	r0, r2
 80035f6:	0019      	movs	r1, r3
 80035f8:	239c      	movs	r3, #156	@ 0x9c
 80035fa:	18fa      	adds	r2, r7, r3
 80035fc:	6813      	ldr	r3, [r2, #0]
 80035fe:	2210      	movs	r2, #16
 8003600:	5e9b      	ldrsh	r3, [r3, r2]
 8003602:	653b      	str	r3, [r7, #80]	@ 0x50
 8003604:	17db      	asrs	r3, r3, #31
 8003606:	657b      	str	r3, [r7, #84]	@ 0x54
 8003608:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800360a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800360c:	f7fc ff90 	bl	8000530 <__aeabi_lmul>
 8003610:	0002      	movs	r2, r0
 8003612:	000b      	movs	r3, r1
 8003614:	21a8      	movs	r1, #168	@ 0xa8
 8003616:	1878      	adds	r0, r7, r1
 8003618:	6002      	str	r2, [r0, #0]
 800361a:	6043      	str	r3, [r0, #4]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 800361c:	239c      	movs	r3, #156	@ 0x9c
 800361e:	18fa      	adds	r2, r7, r3
 8003620:	6813      	ldr	r3, [r2, #0]
 8003622:	220e      	movs	r2, #14
 8003624:	5e9b      	ldrsh	r3, [r3, r2]
 8003626:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003628:	17db      	asrs	r3, r3, #31
 800362a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800362c:	19ba      	adds	r2, r7, r6
 800362e:	6853      	ldr	r3, [r2, #4]
 8003630:	6812      	ldr	r2, [r2, #0]
 8003632:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003634:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003636:	f7fc ff7b 	bl	8000530 <__aeabi_lmul>
 800363a:	0002      	movs	r2, r0
 800363c:	000b      	movs	r3, r1
 800363e:	0bd1      	lsrs	r1, r2, #15
 8003640:	045d      	lsls	r5, r3, #17
 8003642:	430d      	orrs	r5, r1
 8003644:	0454      	lsls	r4, r2, #17
 8003646:	21a8      	movs	r1, #168	@ 0xa8
 8003648:	187a      	adds	r2, r7, r1
 800364a:	6853      	ldr	r3, [r2, #4]
 800364c:	6812      	ldr	r2, [r2, #0]
 800364e:	1912      	adds	r2, r2, r4
 8003650:	416b      	adcs	r3, r5
 8003652:	1878      	adds	r0, r7, r1
 8003654:	6002      	str	r2, [r0, #0]
 8003656:	6043      	str	r3, [r0, #4]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8003658:	259c      	movs	r5, #156	@ 0x9c
 800365a:	197b      	adds	r3, r7, r5
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	220c      	movs	r2, #12
 8003660:	5e9b      	ldrsh	r3, [r3, r2]
 8003662:	643b      	str	r3, [r7, #64]	@ 0x40
 8003664:	17db      	asrs	r3, r3, #31
 8003666:	647b      	str	r3, [r7, #68]	@ 0x44
 8003668:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800366e:	2300      	movs	r3, #0
 8003670:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003672:	000c      	movs	r4, r1
 8003674:	187b      	adds	r3, r7, r1
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800367c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800367e:	1812      	adds	r2, r2, r0
 8003680:	414b      	adcs	r3, r1
 8003682:	1939      	adds	r1, r7, r4
 8003684:	600a      	str	r2, [r1, #0]
 8003686:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8003688:	0034      	movs	r4, r6
 800368a:	193b      	adds	r3, r7, r4
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	1939      	adds	r1, r7, r4
 8003692:	6808      	ldr	r0, [r1, #0]
 8003694:	6849      	ldr	r1, [r1, #4]
 8003696:	f7fc ff4b 	bl	8000530 <__aeabi_lmul>
 800369a:	0002      	movs	r2, r0
 800369c:	000b      	movs	r3, r1
 800369e:	0010      	movs	r0, r2
 80036a0:	0019      	movs	r1, r3
 80036a2:	197b      	adds	r3, r7, r5
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	220a      	movs	r2, #10
 80036a8:	5e9b      	ldrsh	r3, [r3, r2]
 80036aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80036ac:	17db      	asrs	r3, r3, #31
 80036ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80036b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036b4:	f7fc ff3c 	bl	8000530 <__aeabi_lmul>
 80036b8:	0002      	movs	r2, r0
 80036ba:	000b      	movs	r3, r1
 80036bc:	0619      	lsls	r1, r3, #24
 80036be:	468c      	mov	ip, r1
 80036c0:	0a10      	lsrs	r0, r2, #8
 80036c2:	2688      	movs	r6, #136	@ 0x88
 80036c4:	19b9      	adds	r1, r7, r6
 80036c6:	6008      	str	r0, [r1, #0]
 80036c8:	19b8      	adds	r0, r7, r6
 80036ca:	6800      	ldr	r0, [r0, #0]
 80036cc:	4661      	mov	r1, ip
 80036ce:	4308      	orrs	r0, r1
 80036d0:	19b9      	adds	r1, r7, r6
 80036d2:	6008      	str	r0, [r1, #0]
 80036d4:	121b      	asrs	r3, r3, #8
 80036d6:	228c      	movs	r2, #140	@ 0x8c
 80036d8:	18ba      	adds	r2, r7, r2
 80036da:	6013      	str	r3, [r2, #0]
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80036dc:	197b      	adds	r3, r7, r5
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2208      	movs	r2, #8
 80036e2:	5e9b      	ldrsh	r3, [r3, r2]
 80036e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036e6:	17db      	asrs	r3, r3, #31
 80036e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036ea:	193b      	adds	r3, r7, r4
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036f4:	f7fc ff1c 	bl	8000530 <__aeabi_lmul>
 80036f8:	0002      	movs	r2, r0
 80036fa:	000b      	movs	r3, r1
 80036fc:	0d11      	lsrs	r1, r2, #20
 80036fe:	468c      	mov	ip, r1
 8003700:	0318      	lsls	r0, r3, #12
 8003702:	2184      	movs	r1, #132	@ 0x84
 8003704:	1879      	adds	r1, r7, r1
 8003706:	6008      	str	r0, [r1, #0]
 8003708:	2084      	movs	r0, #132	@ 0x84
 800370a:	1839      	adds	r1, r7, r0
 800370c:	6808      	ldr	r0, [r1, #0]
 800370e:	4661      	mov	r1, ip
 8003710:	4308      	orrs	r0, r1
 8003712:	2184      	movs	r1, #132	@ 0x84
 8003714:	1879      	adds	r1, r7, r1
 8003716:	6008      	str	r0, [r1, #0]
 8003718:	0313      	lsls	r3, r2, #12
 800371a:	2180      	movs	r1, #128	@ 0x80
 800371c:	187a      	adds	r2, r7, r1
 800371e:	6013      	str	r3, [r2, #0]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8003720:	19bb      	adds	r3, r7, r6
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	1879      	adds	r1, r7, r1
 8003728:	6808      	ldr	r0, [r1, #0]
 800372a:	6849      	ldr	r1, [r1, #4]
 800372c:	1812      	adds	r2, r2, r0
 800372e:	414b      	adcs	r3, r1
 8003730:	1939      	adds	r1, r7, r4
 8003732:	600a      	str	r2, [r1, #0]
 8003734:	604b      	str	r3, [r1, #4]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8003736:	193b      	adds	r3, r7, r4
 8003738:	6818      	ldr	r0, [r3, #0]
 800373a:	6859      	ldr	r1, [r3, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	2380      	movs	r3, #128	@ 0x80
 8003740:	021b      	lsls	r3, r3, #8
 8003742:	1880      	adds	r0, r0, r2
 8003744:	4159      	adcs	r1, r3
 8003746:	197b      	adds	r3, r7, r5
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	88db      	ldrh	r3, [r3, #6]
 800374c:	623b      	str	r3, [r7, #32]
 800374e:	2300      	movs	r3, #0
 8003750:	627b      	str	r3, [r7, #36]	@ 0x24
 8003752:	6a3a      	ldr	r2, [r7, #32]
 8003754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003756:	f7fc feeb 	bl	8000530 <__aeabi_lmul>
 800375a:	0002      	movs	r2, r0
 800375c:	000b      	movs	r3, r1
 800375e:	1059      	asrs	r1, r3, #1
 8003760:	1938      	adds	r0, r7, r4
 8003762:	6001      	str	r1, [r0, #0]
 8003764:	17db      	asrs	r3, r3, #31
 8003766:	21b4      	movs	r1, #180	@ 0xb4
 8003768:	187a      	adds	r2, r7, r1
 800376a:	6013      	str	r3, [r2, #0]

	if (var1 == 0) {
 800376c:	193b      	adds	r3, r7, r4
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	187b      	adds	r3, r7, r1
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	431a      	orrs	r2, r3
 8003776:	d101      	bne.n	800377c <compensate_pressure+0x1d8>
		return 0;  // avoid exception caused by division by zero
 8003778:	2300      	movs	r3, #0
 800377a:	e0bc      	b.n	80038f6 <compensate_pressure+0x352>
	}

	p = 1048576 - adc_press;
 800377c:	2398      	movs	r3, #152	@ 0x98
 800377e:	18fb      	adds	r3, r7, r3
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	2380      	movs	r3, #128	@ 0x80
 8003784:	035b      	lsls	r3, r3, #13
 8003786:	1a9b      	subs	r3, r3, r2
 8003788:	24a0      	movs	r4, #160	@ 0xa0
 800378a:	193a      	adds	r2, r7, r4
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	17db      	asrs	r3, r3, #31
 8003790:	25a4      	movs	r5, #164	@ 0xa4
 8003792:	197a      	adds	r2, r7, r5
 8003794:	6013      	str	r3, [r2, #0]
	p = (((p << 31) - var2) * 3125) / var1;
 8003796:	193b      	adds	r3, r7, r4
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	105b      	asrs	r3, r3, #1
 800379c:	61fb      	str	r3, [r7, #28]
 800379e:	193b      	adds	r3, r7, r4
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	07db      	lsls	r3, r3, #31
 80037a4:	61bb      	str	r3, [r7, #24]
 80037a6:	20a8      	movs	r0, #168	@ 0xa8
 80037a8:	183a      	adds	r2, r7, r0
 80037aa:	6853      	ldr	r3, [r2, #4]
 80037ac:	6812      	ldr	r2, [r2, #0]
 80037ae:	69b8      	ldr	r0, [r7, #24]
 80037b0:	69f9      	ldr	r1, [r7, #28]
 80037b2:	1a80      	subs	r0, r0, r2
 80037b4:	4199      	sbcs	r1, r3
 80037b6:	4a53      	ldr	r2, [pc, #332]	@ (8003904 <compensate_pressure+0x360>)
 80037b8:	2300      	movs	r3, #0
 80037ba:	f7fc feb9 	bl	8000530 <__aeabi_lmul>
 80037be:	0002      	movs	r2, r0
 80037c0:	000b      	movs	r3, r1
 80037c2:	0010      	movs	r0, r2
 80037c4:	0019      	movs	r1, r3
 80037c6:	23b0      	movs	r3, #176	@ 0xb0
 80037c8:	18fa      	adds	r2, r7, r3
 80037ca:	6853      	ldr	r3, [r2, #4]
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	f7fc fe6b 	bl	80004a8 <__aeabi_ldivmod>
 80037d2:	0002      	movs	r2, r0
 80037d4:	000b      	movs	r3, r1
 80037d6:	1939      	adds	r1, r7, r4
 80037d8:	600a      	str	r2, [r1, #0]
 80037da:	604b      	str	r3, [r1, #4]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80037dc:	269c      	movs	r6, #156	@ 0x9c
 80037de:	19ba      	adds	r2, r7, r6
 80037e0:	6813      	ldr	r3, [r2, #0]
 80037e2:	2216      	movs	r2, #22
 80037e4:	5e9b      	ldrsh	r3, [r3, r2]
 80037e6:	613b      	str	r3, [r7, #16]
 80037e8:	17db      	asrs	r3, r3, #31
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	197a      	adds	r2, r7, r5
 80037ee:	6813      	ldr	r3, [r2, #0]
 80037f0:	04da      	lsls	r2, r3, #19
 80037f2:	1939      	adds	r1, r7, r4
 80037f4:	680b      	ldr	r3, [r1, #0]
 80037f6:	0b5b      	lsrs	r3, r3, #13
 80037f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037fc:	4313      	orrs	r3, r2
 80037fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003800:	197a      	adds	r2, r7, r5
 8003802:	6813      	ldr	r3, [r2, #0]
 8003804:	135b      	asrs	r3, r3, #13
 8003806:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003808:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800380a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800380c:	6938      	ldr	r0, [r7, #16]
 800380e:	6979      	ldr	r1, [r7, #20]
 8003810:	f7fc fe8e 	bl	8000530 <__aeabi_lmul>
 8003814:	0002      	movs	r2, r0
 8003816:	000b      	movs	r3, r1
 8003818:	0010      	movs	r0, r2
 800381a:	0019      	movs	r1, r3
 800381c:	197a      	adds	r2, r7, r5
 800381e:	6813      	ldr	r3, [r2, #0]
 8003820:	04da      	lsls	r2, r3, #19
 8003822:	193b      	adds	r3, r7, r4
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	0b5b      	lsrs	r3, r3, #13
 8003828:	673b      	str	r3, [r7, #112]	@ 0x70
 800382a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800382c:	4313      	orrs	r3, r2
 800382e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003830:	197a      	adds	r2, r7, r5
 8003832:	6813      	ldr	r3, [r2, #0]
 8003834:	135b      	asrs	r3, r3, #13
 8003836:	677b      	str	r3, [r7, #116]	@ 0x74
 8003838:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800383a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800383c:	f7fc fe78 	bl	8000530 <__aeabi_lmul>
 8003840:	0002      	movs	r2, r0
 8003842:	000b      	movs	r3, r1
 8003844:	01d9      	lsls	r1, r3, #7
 8003846:	0e50      	lsrs	r0, r2, #25
 8003848:	4301      	orrs	r1, r0
 800384a:	25b0      	movs	r5, #176	@ 0xb0
 800384c:	1978      	adds	r0, r7, r5
 800384e:	6001      	str	r1, [r0, #0]
 8003850:	165b      	asrs	r3, r3, #25
 8003852:	22b4      	movs	r2, #180	@ 0xb4
 8003854:	18ba      	adds	r2, r7, r2
 8003856:	6013      	str	r3, [r2, #0]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8003858:	19ba      	adds	r2, r7, r6
 800385a:	6813      	ldr	r3, [r2, #0]
 800385c:	2214      	movs	r2, #20
 800385e:	5e9b      	ldrsh	r3, [r3, r2]
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	17db      	asrs	r3, r3, #31
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	193a      	adds	r2, r7, r4
 8003868:	6853      	ldr	r3, [r2, #4]
 800386a:	6812      	ldr	r2, [r2, #0]
 800386c:	68b8      	ldr	r0, [r7, #8]
 800386e:	68f9      	ldr	r1, [r7, #12]
 8003870:	f7fc fe5e 	bl	8000530 <__aeabi_lmul>
 8003874:	0002      	movs	r2, r0
 8003876:	000b      	movs	r3, r1
 8003878:	0359      	lsls	r1, r3, #13
 800387a:	0cd0      	lsrs	r0, r2, #19
 800387c:	4301      	orrs	r1, r0
 800387e:	20a8      	movs	r0, #168	@ 0xa8
 8003880:	1838      	adds	r0, r7, r0
 8003882:	6001      	str	r1, [r0, #0]
 8003884:	14db      	asrs	r3, r3, #19
 8003886:	22ac      	movs	r2, #172	@ 0xac
 8003888:	18ba      	adds	r2, r7, r2
 800388a:	6013      	str	r3, [r2, #0]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 800388c:	193a      	adds	r2, r7, r4
 800388e:	6810      	ldr	r0, [r2, #0]
 8003890:	6851      	ldr	r1, [r2, #4]
 8003892:	197a      	adds	r2, r7, r5
 8003894:	6853      	ldr	r3, [r2, #4]
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	1880      	adds	r0, r0, r2
 800389a:	4159      	adcs	r1, r3
 800389c:	23a8      	movs	r3, #168	@ 0xa8
 800389e:	18fb      	adds	r3, r7, r3
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	1812      	adds	r2, r2, r0
 80038a6:	414b      	adcs	r3, r1
 80038a8:	0619      	lsls	r1, r3, #24
 80038aa:	0a10      	lsrs	r0, r2, #8
 80038ac:	66b8      	str	r0, [r7, #104]	@ 0x68
 80038ae:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80038b0:	4308      	orrs	r0, r1
 80038b2:	66b8      	str	r0, [r7, #104]	@ 0x68
 80038b4:	121b      	asrs	r3, r3, #8
 80038b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038b8:	19bb      	adds	r3, r7, r6
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2212      	movs	r2, #18
 80038be:	5e9b      	ldrsh	r3, [r3, r2]
 80038c0:	603b      	str	r3, [r7, #0]
 80038c2:	17db      	asrs	r3, r3, #31
 80038c4:	607b      	str	r3, [r7, #4]
 80038c6:	6839      	ldr	r1, [r7, #0]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	000b      	movs	r3, r1
 80038cc:	0f1b      	lsrs	r3, r3, #28
 80038ce:	0010      	movs	r0, r2
 80038d0:	0100      	lsls	r0, r0, #4
 80038d2:	6678      	str	r0, [r7, #100]	@ 0x64
 80038d4:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80038d6:	4318      	orrs	r0, r3
 80038d8:	6678      	str	r0, [r7, #100]	@ 0x64
 80038da:	000b      	movs	r3, r1
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	663b      	str	r3, [r7, #96]	@ 0x60
 80038e0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80038e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038e4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80038e6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80038e8:	1812      	adds	r2, r2, r0
 80038ea:	414b      	adcs	r3, r1
 80038ec:	1939      	adds	r1, r7, r4
 80038ee:	600a      	str	r2, [r1, #0]
 80038f0:	604b      	str	r3, [r1, #4]
	return p;
 80038f2:	193b      	adds	r3, r7, r4
 80038f4:	681b      	ldr	r3, [r3, #0]
}
 80038f6:	0018      	movs	r0, r3
 80038f8:	46bd      	mov	sp, r7
 80038fa:	b02f      	add	sp, #188	@ 0xbc
 80038fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038fe:	46c0      	nop			@ (mov r8, r8)
 8003900:	fffe0c00 	.word	0xfffe0c00
 8003904:	00000c35 	.word	0x00000c35

08003908 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a2c      	ldr	r2, [pc, #176]	@ (80039c8 <compensate_humidity+0xc0>)
 8003918:	4694      	mov	ip, r2
 800391a:	4463      	add	r3, ip
 800391c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	039a      	lsls	r2, r3, #14
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	211e      	movs	r1, #30
 8003926:	5e5b      	ldrsh	r3, [r3, r1]
 8003928:	051b      	lsls	r3, r3, #20
 800392a:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2120      	movs	r1, #32
 8003930:	5e5b      	ldrsh	r3, [r3, r1]
 8003932:	0019      	movs	r1, r3
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	434b      	muls	r3, r1
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2280      	movs	r2, #128	@ 0x80
 800393c:	01d2      	lsls	r2, r2, #7
 800393e:	4694      	mov	ip, r2
 8003940:	4463      	add	r3, ip
 8003942:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	2122      	movs	r1, #34	@ 0x22
 8003948:	5652      	ldrsb	r2, [r2, r1]
 800394a:	0011      	movs	r1, r2
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	434a      	muls	r2, r1
 8003950:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8003952:	68f9      	ldr	r1, [r7, #12]
 8003954:	7f09      	ldrb	r1, [r1, #28]
 8003956:	0008      	movs	r0, r1
 8003958:	6979      	ldr	r1, [r7, #20]
 800395a:	4341      	muls	r1, r0
 800395c:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800395e:	2080      	movs	r0, #128	@ 0x80
 8003960:	0200      	lsls	r0, r0, #8
 8003962:	4684      	mov	ip, r0
 8003964:	4461      	add	r1, ip
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8003966:	434a      	muls	r2, r1
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8003968:	1292      	asrs	r2, r2, #10
 800396a:	2180      	movs	r1, #128	@ 0x80
 800396c:	0389      	lsls	r1, r1, #14
 800396e:	468c      	mov	ip, r1
 8003970:	4462      	add	r2, ip
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8003972:	68f9      	ldr	r1, [r7, #12]
 8003974:	201a      	movs	r0, #26
 8003976:	5e09      	ldrsh	r1, [r1, r0]
 8003978:	434a      	muls	r2, r1
 800397a:	2180      	movs	r1, #128	@ 0x80
 800397c:	0189      	lsls	r1, r1, #6
 800397e:	468c      	mov	ip, r1
 8003980:	4462      	add	r2, ip
 8003982:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8003984:	4353      	muls	r3, r2
 8003986:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	13db      	asrs	r3, r3, #15
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	13d2      	asrs	r2, r2, #15
 8003990:	4353      	muls	r3, r2
 8003992:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	7e12      	ldrb	r2, [r2, #24]
 8003998:	4353      	muls	r3, r2
 800399a:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	da00      	bge.n	80039aa <compensate_humidity+0xa2>
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	22c8      	movs	r2, #200	@ 0xc8
 80039b0:	0552      	lsls	r2, r2, #21
 80039b2:	4293      	cmp	r3, r2
 80039b4:	dd01      	ble.n	80039ba <compensate_humidity+0xb2>
 80039b6:	23c8      	movs	r3, #200	@ 0xc8
 80039b8:	055b      	lsls	r3, r3, #21
 80039ba:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	131b      	asrs	r3, r3, #12
}
 80039c0:	0018      	movs	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b006      	add	sp, #24
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	fffed400 	.word	0xfffed400

080039cc <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 80039cc:	b590      	push	{r4, r7, lr}
 80039ce:	b08d      	sub	sp, #52	@ 0x34
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2232      	movs	r2, #50	@ 0x32
 80039de:	5c9b      	ldrb	r3, [r3, r2]
 80039e0:	2b60      	cmp	r3, #96	@ 0x60
 80039e2:	d007      	beq.n	80039f4 <bmp280_read_fixed+0x28>
		if (humidity)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <bmp280_read_fixed+0x24>
			*humidity = 0;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 80039f0:	2300      	movs	r3, #0
 80039f2:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <bmp280_read_fixed+0x32>
 80039fa:	2308      	movs	r3, #8
 80039fc:	e000      	b.n	8003a00 <bmp280_read_fixed+0x34>
 80039fe:	2306      	movs	r3, #6
 8003a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8003a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2218      	movs	r2, #24
 8003a08:	18ba      	adds	r2, r7, r2
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	21f7      	movs	r1, #247	@ 0xf7
 8003a0e:	f7ff fb97 	bl	8003140 <read_data>
 8003a12:	1e03      	subs	r3, r0, #0
 8003a14:	d001      	beq.n	8003a1a <bmp280_read_fixed+0x4e>
		return false;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e041      	b.n	8003a9e <bmp280_read_fixed+0xd2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8003a1a:	2418      	movs	r4, #24
 8003a1c:	193b      	adds	r3, r7, r4
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	031a      	lsls	r2, r3, #12
 8003a22:	193b      	adds	r3, r7, r4
 8003a24:	785b      	ldrb	r3, [r3, #1]
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	193a      	adds	r2, r7, r4
 8003a2c:	7892      	ldrb	r2, [r2, #2]
 8003a2e:	0912      	lsrs	r2, r2, #4
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	4313      	orrs	r3, r2
 8003a34:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8003a36:	193b      	adds	r3, r7, r4
 8003a38:	78db      	ldrb	r3, [r3, #3]
 8003a3a:	031a      	lsls	r2, r3, #12
 8003a3c:	193b      	adds	r3, r7, r4
 8003a3e:	791b      	ldrb	r3, [r3, #4]
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	4313      	orrs	r3, r2
 8003a44:	193a      	adds	r2, r7, r4
 8003a46:	7952      	ldrb	r2, [r2, #5]
 8003a48:	0912      	lsrs	r2, r2, #4
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8003a50:	2314      	movs	r3, #20
 8003a52:	18fa      	adds	r2, r7, r3
 8003a54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f7ff fd6e 	bl	800353a <compensate_temperature>
 8003a5e:	0002      	movs	r2, r0
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f7ff fd9a 	bl	80035a4 <compensate_pressure>
 8003a70:	0002      	movs	r2, r0
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00f      	beq.n	8003a9c <bmp280_read_fixed+0xd0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8003a7c:	193b      	adds	r3, r7, r4
 8003a7e:	799b      	ldrb	r3, [r3, #6]
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	193a      	adds	r2, r7, r4
 8003a84:	79d2      	ldrb	r2, [r2, #7]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	6a39      	ldr	r1, [r7, #32]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	0018      	movs	r0, r3
 8003a92:	f7ff ff39 	bl	8003908 <compensate_humidity>
 8003a96:	0002      	movs	r2, r0
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	601a      	str	r2, [r3, #0]
	}

	return true;
 8003a9c:	2301      	movs	r3, #1
}
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	b00d      	add	sp, #52	@ 0x34
 8003aa4:	bd90      	pop	{r4, r7, pc}
	...

08003aa8 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d002      	beq.n	8003ac2 <bmp280_read_float+0x1a>
 8003abc:	2314      	movs	r3, #20
 8003abe:	18fb      	adds	r3, r7, r3
 8003ac0:	e000      	b.n	8003ac4 <bmp280_read_float+0x1c>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	2218      	movs	r2, #24
 8003ac6:	18ba      	adds	r2, r7, r2
 8003ac8:	211c      	movs	r1, #28
 8003aca:	1879      	adds	r1, r7, r1
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f7ff ff7d 	bl	80039cc <bmp280_read_fixed>
 8003ad2:	1e03      	subs	r3, r0, #0
 8003ad4:	d02d      	beq.n	8003b32 <bmp280_read_float+0x8a>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f7fd f949 	bl	8000d70 <__aeabi_i2f>
 8003ade:	1c03      	adds	r3, r0, #0
 8003ae0:	4916      	ldr	r1, [pc, #88]	@ (8003b3c <bmp280_read_float+0x94>)
 8003ae2:	1c18      	adds	r0, r3, #0
 8003ae4:	f7fd f82e 	bl	8000b44 <__aeabi_fdiv>
 8003ae8:	1c03      	adds	r3, r0, #0
 8003aea:	1c1a      	adds	r2, r3, #0
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	0018      	movs	r0, r3
 8003af4:	f7fd f98c 	bl	8000e10 <__aeabi_ui2f>
 8003af8:	1c03      	adds	r3, r0, #0
 8003afa:	2187      	movs	r1, #135	@ 0x87
 8003afc:	05c9      	lsls	r1, r1, #23
 8003afe:	1c18      	adds	r0, r3, #0
 8003b00:	f7fd f820 	bl	8000b44 <__aeabi_fdiv>
 8003b04:	1c03      	adds	r3, r0, #0
 8003b06:	1c1a      	adds	r2, r3, #0
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	601a      	str	r2, [r3, #0]
		if (humidity)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00d      	beq.n	8003b2e <bmp280_read_float+0x86>
			*humidity = (float) fixed_humidity / 1024;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	0018      	movs	r0, r3
 8003b16:	f7fd f97b 	bl	8000e10 <__aeabi_ui2f>
 8003b1a:	1c03      	adds	r3, r0, #0
 8003b1c:	2189      	movs	r1, #137	@ 0x89
 8003b1e:	05c9      	lsls	r1, r1, #23
 8003b20:	1c18      	adds	r0, r3, #0
 8003b22:	f7fd f80f 	bl	8000b44 <__aeabi_fdiv>
 8003b26:	1c03      	adds	r3, r0, #0
 8003b28:	1c1a      	adds	r2, r3, #0
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	601a      	str	r2, [r3, #0]
		return true;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e000      	b.n	8003b34 <bmp280_read_float+0x8c>
	}

	return false;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	0018      	movs	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b008      	add	sp, #32
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	42c80000 	.word	0x42c80000

08003b40 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8003b48:	2301      	movs	r3, #1
 8003b4a:	425b      	negs	r3, r3
 8003b4c:	1d39      	adds	r1, r7, #4
 8003b4e:	4804      	ldr	r0, [pc, #16]	@ (8003b60 <__io_putchar+0x20>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	f003 f8db 	bl	8006d0c <HAL_UART_Transmit>
  return ch;
 8003b56:	687b      	ldr	r3, [r7, #4]
}
 8003b58:	0018      	movs	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b002      	add	sp, #8
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	20000244 	.word	0x20000244

08003b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b66:	b0ab      	sub	sp, #172	@ 0xac
 8003b68:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b6a:	f000 ff6b 	bl	8004a44 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b6e:	f000 f9e1 	bl	8003f34 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b72:	f000 fabd 	bl	80040f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003b76:	f000 fa8b 	bl	8004090 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003b7a:	f000 fa49 	bl	8004010 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // Initialize OLED display - essential for it to work.
  // OLED screen will remain blank until the first data is ready.
  ssd1306_Init();
 8003b7e:	f000 fb77 	bl	8004270 <ssd1306_Init>

  printf("System Booting... Initializing BMP280...\r\n"); // UART only for diagnostics
 8003b82:	4bda      	ldr	r3, [pc, #872]	@ (8003eec <main+0x388>)
 8003b84:	0018      	movs	r0, r3
 8003b86:	f004 fbef 	bl	8008368 <puts>

  // --- BMP280 Initialization ---
  bmp_handle.i2c = &hi2c1;
 8003b8a:	4bd9      	ldr	r3, [pc, #868]	@ (8003ef0 <main+0x38c>)
 8003b8c:	4ad9      	ldr	r2, [pc, #868]	@ (8003ef4 <main+0x390>)
 8003b8e:	629a      	str	r2, [r3, #40]	@ 0x28
  bmp_handle.addr = BMP280_I2C_ADDRESS_0; // Ensure this is defined in bmp280.h (e.g. 0x76)
 8003b90:	4bd7      	ldr	r3, [pc, #860]	@ (8003ef0 <main+0x38c>)
 8003b92:	2276      	movs	r2, #118	@ 0x76
 8003b94:	849a      	strh	r2, [r3, #36]	@ 0x24

  bmp280_init_default_params(&bmp_sensor_params);
 8003b96:	4bd8      	ldr	r3, [pc, #864]	@ (8003ef8 <main+0x394>)
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f7ff fa7d 	bl	8003098 <bmp280_init_default_params>

  bmp_sensor_params.mode = BMP280_MODE_NORMAL;
 8003b9e:	4bd6      	ldr	r3, [pc, #856]	@ (8003ef8 <main+0x394>)
 8003ba0:	2203      	movs	r2, #3
 8003ba2:	701a      	strb	r2, [r3, #0]
  bmp_sensor_params.filter = BMP280_FILTER_OFF;
 8003ba4:	4bd4      	ldr	r3, [pc, #848]	@ (8003ef8 <main+0x394>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	705a      	strb	r2, [r3, #1]
  bmp_sensor_params.oversampling_pressure = BMP280_ULTRA_HIGH_RES;
 8003baa:	4bd3      	ldr	r3, [pc, #844]	@ (8003ef8 <main+0x394>)
 8003bac:	2205      	movs	r2, #5
 8003bae:	709a      	strb	r2, [r3, #2]
  bmp_sensor_params.oversampling_temperature = BMP280_LOW_POWER;
 8003bb0:	4bd1      	ldr	r3, [pc, #836]	@ (8003ef8 <main+0x394>)
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	70da      	strb	r2, [r3, #3]
  bmp_sensor_params.standby = BMP280_STANDBY_62;
 8003bb6:	4bd0      	ldr	r3, [pc, #832]	@ (8003ef8 <main+0x394>)
 8003bb8:	2201      	movs	r2, #1
 8003bba:	715a      	strb	r2, [r3, #5]

  if (!bmp280_init(&bmp_handle, &bmp_sensor_params)) {
 8003bbc:	4ace      	ldr	r2, [pc, #824]	@ (8003ef8 <main+0x394>)
 8003bbe:	4bcc      	ldr	r3, [pc, #816]	@ (8003ef0 <main+0x38c>)
 8003bc0:	0011      	movs	r1, r2
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f7ff fbfe 	bl	80033c4 <bmp280_init>
 8003bc8:	0003      	movs	r3, r0
 8003bca:	001a      	movs	r2, r3
 8003bcc:	2301      	movs	r3, #1
 8003bce:	4053      	eors	r3, r2
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d015      	beq.n	8003c02 <main+0x9e>
      printf("BMP280 Initialization Failed! Driver returned false. Chip ID read: 0x%02X. Addr: 0x%02X\r\n", bmp_handle.id, bmp_handle.addr << 1); // UART only
 8003bd6:	4bc6      	ldr	r3, [pc, #792]	@ (8003ef0 <main+0x38c>)
 8003bd8:	2232      	movs	r2, #50	@ 0x32
 8003bda:	5c9b      	ldrb	r3, [r3, r2]
 8003bdc:	0019      	movs	r1, r3
 8003bde:	4bc4      	ldr	r3, [pc, #784]	@ (8003ef0 <main+0x38c>)
 8003be0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003be2:	005a      	lsls	r2, r3, #1
 8003be4:	4bc5      	ldr	r3, [pc, #788]	@ (8003efc <main+0x398>)
 8003be6:	0018      	movs	r0, r3
 8003be8:	f004 fb58 	bl	800829c <iprintf>
      while (1) { // Halt with LED blink on critical error
          HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003bec:	23a0      	movs	r3, #160	@ 0xa0
 8003bee:	05db      	lsls	r3, r3, #23
 8003bf0:	2120      	movs	r1, #32
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f001 fa09 	bl	800500a <HAL_GPIO_TogglePin>
          HAL_Delay(200);
 8003bf8:	20c8      	movs	r0, #200	@ 0xc8
 8003bfa:	f000 ff93 	bl	8004b24 <HAL_Delay>
          HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003bfe:	46c0      	nop			@ (mov r8, r8)
 8003c00:	e7f4      	b.n	8003bec <main+0x88>
      }
  } else {
      printf("BMP280 Initialized Successfully. Chip ID from handle: 0x%02X. Addr: 0x%02X\r\n", bmp_handle.id, bmp_handle.addr << 1); // UART only
 8003c02:	4bbb      	ldr	r3, [pc, #748]	@ (8003ef0 <main+0x38c>)
 8003c04:	2232      	movs	r2, #50	@ 0x32
 8003c06:	5c9b      	ldrb	r3, [r3, r2]
 8003c08:	0019      	movs	r1, r3
 8003c0a:	4bb9      	ldr	r3, [pc, #740]	@ (8003ef0 <main+0x38c>)
 8003c0c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003c0e:	005a      	lsls	r2, r3, #1
 8003c10:	4bbb      	ldr	r3, [pc, #748]	@ (8003f00 <main+0x39c>)
 8003c12:	0018      	movs	r0, r3
 8003c14:	f004 fb42 	bl	800829c <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  #define BUFFER_SIZE 5
  float temp_buffer[BUFFER_SIZE] = {0};
 8003c18:	2360      	movs	r3, #96	@ 0x60
 8003c1a:	18fb      	adds	r3, r7, r3
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	2314      	movs	r3, #20
 8003c20:	001a      	movs	r2, r3
 8003c22:	2100      	movs	r1, #0
 8003c24:	f004 fbbc 	bl	80083a0 <memset>
  float press_buffer[BUFFER_SIZE] = {0};
 8003c28:	234c      	movs	r3, #76	@ 0x4c
 8003c2a:	18fb      	adds	r3, r7, r3
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	2314      	movs	r3, #20
 8003c30:	001a      	movs	r2, r3
 8003c32:	2100      	movs	r1, #0
 8003c34:	f004 fbb4 	bl	80083a0 <memset>
  uint8_t buffer_index = 0;
 8003c38:	2397      	movs	r3, #151	@ 0x97
 8003c3a:	18fb      	adds	r3, r7, r3
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	701a      	strb	r2, [r3, #0]
  uint8_t sample_count = 0;
 8003c40:	2396      	movs	r3, #150	@ 0x96
 8003c42:	18fb      	adds	r3, r7, r3
 8003c44:	2200      	movs	r2, #0
 8003c46:	701a      	strb	r2, [r3, #0]

  uint32_t last_sample_time = HAL_GetTick(); // Initialize to start sampling immediately
 8003c48:	f000 ff62 	bl	8004b10 <HAL_GetTick>
 8003c4c:	0003      	movs	r3, r0
 8003c4e:	2290      	movs	r2, #144	@ 0x90
 8003c50:	18ba      	adds	r2, r7, r2
 8003c52:	6013      	str	r3, [r2, #0]
  uint32_t last_display_time = HAL_GetTick(); // Used for 5s interval *between* displays
 8003c54:	f000 ff5c 	bl	8004b10 <HAL_GetTick>
 8003c58:	0003      	movs	r3, r0
 8003c5a:	228c      	movs	r2, #140	@ 0x8c
 8003c5c:	18ba      	adds	r2, r7, r2
 8003c5e:	6013      	str	r3, [r2, #0]

  while (1)
  {
    uint32_t now = HAL_GetTick();
 8003c60:	f000 ff56 	bl	8004b10 <HAL_GetTick>
 8003c64:	0003      	movs	r3, r0
 8003c66:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // Sample data every 1000ms (1 second)
    if (now - last_sample_time >= 1000)
 8003c68:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003c6a:	2190      	movs	r1, #144	@ 0x90
 8003c6c:	187b      	adds	r3, r7, r1
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	1ad2      	subs	r2, r2, r3
 8003c72:	23fa      	movs	r3, #250	@ 0xfa
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d343      	bcc.n	8003d02 <main+0x19e>
    {
        last_sample_time = now;
 8003c7a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c7c:	187a      	adds	r2, r7, r1
 8003c7e:	6013      	str	r3, [r2, #0]

        float current_temp = 0.0f, current_press = 0.0f, current_hum = 0.0f; // hum is dummy for BMP280
 8003c80:	2300      	movs	r3, #0
 8003c82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c84:	2300      	movs	r3, #0
 8003c86:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c88:	2300      	movs	r3, #0
 8003c8a:	643b      	str	r3, [r7, #64]	@ 0x40
        if (bmp280_read_float(&bmp_handle, &current_temp, &current_press, &current_hum))
 8003c8c:	2340      	movs	r3, #64	@ 0x40
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	2244      	movs	r2, #68	@ 0x44
 8003c92:	18ba      	adds	r2, r7, r2
 8003c94:	2148      	movs	r1, #72	@ 0x48
 8003c96:	1879      	adds	r1, r7, r1
 8003c98:	4895      	ldr	r0, [pc, #596]	@ (8003ef0 <main+0x38c>)
 8003c9a:	f7ff ff05 	bl	8003aa8 <bmp280_read_float>
 8003c9e:	1e03      	subs	r3, r0, #0
 8003ca0:	d02b      	beq.n	8003cfa <main+0x196>
        {
            // Convert pressure from Pa to hPa
            current_press /= 100.0f;
 8003ca2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ca4:	4997      	ldr	r1, [pc, #604]	@ (8003f04 <main+0x3a0>)
 8003ca6:	1c18      	adds	r0, r3, #0
 8003ca8:	f7fc ff4c 	bl	8000b44 <__aeabi_fdiv>
 8003cac:	1c03      	adds	r3, r0, #0
 8003cae:	647b      	str	r3, [r7, #68]	@ 0x44

            temp_buffer[buffer_index] = current_temp;
 8003cb0:	2497      	movs	r4, #151	@ 0x97
 8003cb2:	193b      	adds	r3, r7, r4
 8003cb4:	781a      	ldrb	r2, [r3, #0]
 8003cb6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003cb8:	2360      	movs	r3, #96	@ 0x60
 8003cba:	18fb      	adds	r3, r7, r3
 8003cbc:	0092      	lsls	r2, r2, #2
 8003cbe:	50d1      	str	r1, [r2, r3]
            press_buffer[buffer_index] = current_press;
 8003cc0:	193b      	adds	r3, r7, r4
 8003cc2:	781a      	ldrb	r2, [r3, #0]
 8003cc4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003cc6:	234c      	movs	r3, #76	@ 0x4c
 8003cc8:	18fb      	adds	r3, r7, r3
 8003cca:	0092      	lsls	r2, r2, #2
 8003ccc:	50d1      	str	r1, [r2, r3]

            buffer_index = (buffer_index + 1) % BUFFER_SIZE;
 8003cce:	193b      	adds	r3, r7, r4
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	2105      	movs	r1, #5
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	f7fc fba2 	bl	8000420 <__aeabi_idivmod>
 8003cdc:	000b      	movs	r3, r1
 8003cde:	001a      	movs	r2, r3
 8003ce0:	193b      	adds	r3, r7, r4
 8003ce2:	701a      	strb	r2, [r3, #0]
            if (sample_count < BUFFER_SIZE)
 8003ce4:	2196      	movs	r1, #150	@ 0x96
 8003ce6:	187b      	adds	r3, r7, r1
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d809      	bhi.n	8003d02 <main+0x19e>
            {
                sample_count++;
 8003cee:	187b      	adds	r3, r7, r1
 8003cf0:	781a      	ldrb	r2, [r3, #0]
 8003cf2:	187b      	adds	r3, r7, r1
 8003cf4:	3201      	adds	r2, #1
 8003cf6:	701a      	strb	r2, [r3, #0]
 8003cf8:	e003      	b.n	8003d02 <main+0x19e>
            }
        }
        else
        {
            printf("Failed to read from BMP280\r\n"); // UART only
 8003cfa:	4b83      	ldr	r3, [pc, #524]	@ (8003f08 <main+0x3a4>)
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f004 fb33 	bl	8008368 <puts>
        }
    }

    // Conditions for display update
    bool buffer_full = (sample_count == BUFFER_SIZE);
 8003d02:	207b      	movs	r0, #123	@ 0x7b
 8003d04:	183b      	adds	r3, r7, r0
 8003d06:	2296      	movs	r2, #150	@ 0x96
 8003d08:	18ba      	adds	r2, r7, r2
 8003d0a:	7812      	ldrb	r2, [r2, #0]
 8003d0c:	3a05      	subs	r2, #5
 8003d0e:	4251      	negs	r1, r2
 8003d10:	414a      	adcs	r2, r1
 8003d12:	701a      	strb	r2, [r3, #0]
    bool display_interval_elapsed = (now - last_display_time >= 5000);
 8003d14:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003d16:	238c      	movs	r3, #140	@ 0x8c
 8003d18:	18fb      	adds	r3, r7, r3
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	1ad2      	subs	r2, r2, r3
 8003d1e:	247a      	movs	r4, #122	@ 0x7a
 8003d20:	193b      	adds	r3, r7, r4
 8003d22:	497a      	ldr	r1, [pc, #488]	@ (8003f0c <main+0x3a8>)
 8003d24:	4291      	cmp	r1, r2
 8003d26:	4192      	sbcs	r2, r2
 8003d28:	4252      	negs	r2, r2
 8003d2a:	701a      	strb	r2, [r3, #0]

    // Display on OLED if buffer is full AND (it's the first display OR 5s interval has passed)
    if (buffer_full && (!first_display_occurred || display_interval_elapsed))
 8003d2c:	183b      	adds	r3, r7, r0
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d100      	bne.n	8003d36 <main+0x1d2>
 8003d34:	e0bd      	b.n	8003eb2 <main+0x34e>
 8003d36:	4b76      	ldr	r3, [pc, #472]	@ (8003f10 <main+0x3ac>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	4053      	eors	r3, r2
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d104      	bne.n	8003d4e <main+0x1ea>
 8003d44:	193b      	adds	r3, r7, r4
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d100      	bne.n	8003d4e <main+0x1ea>
 8003d4c:	e0b1      	b.n	8003eb2 <main+0x34e>
    {
        last_display_time = now; // Reset display timer
 8003d4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d50:	228c      	movs	r2, #140	@ 0x8c
 8003d52:	18ba      	adds	r2, r7, r2
 8003d54:	6013      	str	r3, [r2, #0]
        if (!first_display_occurred) {
 8003d56:	4b6e      	ldr	r3, [pc, #440]	@ (8003f10 <main+0x3ac>)
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	4053      	eors	r3, r2
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <main+0x206>
            first_display_occurred = true;
 8003d64:	4b6a      	ldr	r3, [pc, #424]	@ (8003f10 <main+0x3ac>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	701a      	strb	r2, [r3, #0]
        }

        float temp_avg = 0.0f, press_avg = 0.0f;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	2288      	movs	r2, #136	@ 0x88
 8003d6e:	18ba      	adds	r2, r7, r2
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	2300      	movs	r3, #0
 8003d74:	2284      	movs	r2, #132	@ 0x84
 8003d76:	18ba      	adds	r2, r7, r2
 8003d78:	6013      	str	r3, [r2, #0]
        for (int i = 0; i < BUFFER_SIZE; i++)
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	2280      	movs	r2, #128	@ 0x80
 8003d7e:	18ba      	adds	r2, r7, r2
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	e023      	b.n	8003dcc <main+0x268>
        {
            temp_avg += temp_buffer[i];
 8003d84:	2360      	movs	r3, #96	@ 0x60
 8003d86:	18fb      	adds	r3, r7, r3
 8003d88:	2480      	movs	r4, #128	@ 0x80
 8003d8a:	193a      	adds	r2, r7, r4
 8003d8c:	6812      	ldr	r2, [r2, #0]
 8003d8e:	0092      	lsls	r2, r2, #2
 8003d90:	58d3      	ldr	r3, [r2, r3]
 8003d92:	1c19      	adds	r1, r3, #0
 8003d94:	2588      	movs	r5, #136	@ 0x88
 8003d96:	197b      	adds	r3, r7, r5
 8003d98:	6818      	ldr	r0, [r3, #0]
 8003d9a:	f7fc fce1 	bl	8000760 <__aeabi_fadd>
 8003d9e:	1c03      	adds	r3, r0, #0
 8003da0:	197a      	adds	r2, r7, r5
 8003da2:	6013      	str	r3, [r2, #0]
            press_avg += press_buffer[i];
 8003da4:	234c      	movs	r3, #76	@ 0x4c
 8003da6:	18fb      	adds	r3, r7, r3
 8003da8:	193a      	adds	r2, r7, r4
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	0092      	lsls	r2, r2, #2
 8003dae:	58d3      	ldr	r3, [r2, r3]
 8003db0:	1c19      	adds	r1, r3, #0
 8003db2:	2584      	movs	r5, #132	@ 0x84
 8003db4:	197b      	adds	r3, r7, r5
 8003db6:	6818      	ldr	r0, [r3, #0]
 8003db8:	f7fc fcd2 	bl	8000760 <__aeabi_fadd>
 8003dbc:	1c03      	adds	r3, r0, #0
 8003dbe:	197a      	adds	r2, r7, r5
 8003dc0:	6013      	str	r3, [r2, #0]
        for (int i = 0; i < BUFFER_SIZE; i++)
 8003dc2:	193b      	adds	r3, r7, r4
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	193a      	adds	r2, r7, r4
 8003dca:	6013      	str	r3, [r2, #0]
 8003dcc:	2380      	movs	r3, #128	@ 0x80
 8003dce:	18fb      	adds	r3, r7, r3
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	ddd6      	ble.n	8003d84 <main+0x220>
        }
        temp_avg /= BUFFER_SIZE;
 8003dd6:	494f      	ldr	r1, [pc, #316]	@ (8003f14 <main+0x3b0>)
 8003dd8:	2488      	movs	r4, #136	@ 0x88
 8003dda:	193b      	adds	r3, r7, r4
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	f7fc feb1 	bl	8000b44 <__aeabi_fdiv>
 8003de2:	1c03      	adds	r3, r0, #0
 8003de4:	193a      	adds	r2, r7, r4
 8003de6:	6013      	str	r3, [r2, #0]
        press_avg /= BUFFER_SIZE;
 8003de8:	494a      	ldr	r1, [pc, #296]	@ (8003f14 <main+0x3b0>)
 8003dea:	2684      	movs	r6, #132	@ 0x84
 8003dec:	19bb      	adds	r3, r7, r6
 8003dee:	6818      	ldr	r0, [r3, #0]
 8003df0:	f7fc fea8 	bl	8000b44 <__aeabi_fdiv>
 8003df4:	1c03      	adds	r3, r0, #0
 8003df6:	19ba      	adds	r2, r7, r6
 8003df8:	6013      	str	r3, [r2, #0]

        // OLED Display: ONLY Temperature and Pressure
        ssd1306_Fill(Black); // Clear previous content
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	f000 faa4 	bl	8004348 <ssd1306_Fill>

        snprintf(oled_buf, sizeof(oled_buf), "T: %.2f C", temp_avg);
 8003e00:	193b      	adds	r3, r7, r4
 8003e02:	6818      	ldr	r0, [r3, #0]
 8003e04:	f7fe ffea 	bl	8002ddc <__aeabi_f2d>
 8003e08:	0002      	movs	r2, r0
 8003e0a:	000b      	movs	r3, r1
 8003e0c:	4942      	ldr	r1, [pc, #264]	@ (8003f18 <main+0x3b4>)
 8003e0e:	4843      	ldr	r0, [pc, #268]	@ (8003f1c <main+0x3b8>)
 8003e10:	9200      	str	r2, [sp, #0]
 8003e12:	9301      	str	r3, [sp, #4]
 8003e14:	000a      	movs	r2, r1
 8003e16:	2120      	movs	r1, #32
 8003e18:	f004 f946 	bl	80080a8 <sniprintf>
        ssd1306_SetCursor(0, 0); // Position for Temperature
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	2000      	movs	r0, #0
 8003e20:	f000 fc12 	bl	8004648 <ssd1306_SetCursor>
        ssd1306_WriteString(oled_buf, Font_7x10, White);
 8003e24:	4b3e      	ldr	r3, [pc, #248]	@ (8003f20 <main+0x3bc>)
 8003e26:	483d      	ldr	r0, [pc, #244]	@ (8003f1c <main+0x3b8>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	9200      	str	r2, [sp, #0]
 8003e2c:	6819      	ldr	r1, [r3, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f000 fbdd 	bl	80045f0 <ssd1306_WriteString>

        snprintf(oled_buf, sizeof(oled_buf), "P: %.2f hPa", press_avg);
 8003e36:	19bb      	adds	r3, r7, r6
 8003e38:	6818      	ldr	r0, [r3, #0]
 8003e3a:	f7fe ffcf 	bl	8002ddc <__aeabi_f2d>
 8003e3e:	0002      	movs	r2, r0
 8003e40:	000b      	movs	r3, r1
 8003e42:	4938      	ldr	r1, [pc, #224]	@ (8003f24 <main+0x3c0>)
 8003e44:	4835      	ldr	r0, [pc, #212]	@ (8003f1c <main+0x3b8>)
 8003e46:	9200      	str	r2, [sp, #0]
 8003e48:	9301      	str	r3, [sp, #4]
 8003e4a:	000a      	movs	r2, r1
 8003e4c:	2120      	movs	r1, #32
 8003e4e:	f004 f92b 	bl	80080a8 <sniprintf>
        ssd1306_SetCursor(0, 12); // Position for Pressure
 8003e52:	210c      	movs	r1, #12
 8003e54:	2000      	movs	r0, #0
 8003e56:	f000 fbf7 	bl	8004648 <ssd1306_SetCursor>
        ssd1306_WriteString(oled_buf, Font_7x10, White);
 8003e5a:	4b31      	ldr	r3, [pc, #196]	@ (8003f20 <main+0x3bc>)
 8003e5c:	482f      	ldr	r0, [pc, #188]	@ (8003f1c <main+0x3b8>)
 8003e5e:	2201      	movs	r2, #1
 8003e60:	9200      	str	r2, [sp, #0]
 8003e62:	6819      	ldr	r1, [r3, #0]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f000 fbc2 	bl	80045f0 <ssd1306_WriteString>

        ssd1306_UpdateScreen();
 8003e6c:	f000 fa86 	bl	800437c <ssd1306_UpdateScreen>

        // UART Transmission (Temperature and Pressure)
        char uart_buf[64];
        int len = snprintf(uart_buf, sizeof(uart_buf), "AVG T: %.2f C, P: %.2f hPa\r\n", temp_avg, press_avg);
 8003e70:	193b      	adds	r3, r7, r4
 8003e72:	6818      	ldr	r0, [r3, #0]
 8003e74:	f7fe ffb2 	bl	8002ddc <__aeabi_f2d>
 8003e78:	0004      	movs	r4, r0
 8003e7a:	000d      	movs	r5, r1
 8003e7c:	19bb      	adds	r3, r7, r6
 8003e7e:	6818      	ldr	r0, [r3, #0]
 8003e80:	f7fe ffac 	bl	8002ddc <__aeabi_f2d>
 8003e84:	0002      	movs	r2, r0
 8003e86:	000b      	movs	r3, r1
 8003e88:	4927      	ldr	r1, [pc, #156]	@ (8003f28 <main+0x3c4>)
 8003e8a:	0038      	movs	r0, r7
 8003e8c:	9202      	str	r2, [sp, #8]
 8003e8e:	9303      	str	r3, [sp, #12]
 8003e90:	9400      	str	r4, [sp, #0]
 8003e92:	9501      	str	r5, [sp, #4]
 8003e94:	000a      	movs	r2, r1
 8003e96:	2140      	movs	r1, #64	@ 0x40
 8003e98:	f004 f906 	bl	80080a8 <sniprintf>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	677b      	str	r3, [r7, #116]	@ 0x74
        HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, len, HAL_MAX_DELAY);
 8003ea0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	425b      	negs	r3, r3
 8003ea8:	0039      	movs	r1, r7
 8003eaa:	4820      	ldr	r0, [pc, #128]	@ (8003f2c <main+0x3c8>)
 8003eac:	f002 ff2e 	bl	8006d0c <HAL_UART_Transmit>
    {
 8003eb0:	e01a      	b.n	8003ee8 <main+0x384>
    }
    // If 5s interval elapsed but buffer is not yet full (e.g. initial collection taking time, or sensor read issues)
    // OR if it's simply not time for the next display yet but we want periodic UART updates for collection status.
    // This 'else if' is primarily for UART status updates during initial collection if it spans a 5s mark.
    else if (display_interval_elapsed && !buffer_full)
 8003eb2:	237a      	movs	r3, #122	@ 0x7a
 8003eb4:	18fb      	adds	r3, r7, r3
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d100      	bne.n	8003ebe <main+0x35a>
 8003ebc:	e6d0      	b.n	8003c60 <main+0xfc>
 8003ebe:	237b      	movs	r3, #123	@ 0x7b
 8003ec0:	18fb      	adds	r3, r7, r3
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	4053      	eors	r3, r2
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d100      	bne.n	8003ed0 <main+0x36c>
 8003ece:	e6c7      	b.n	8003c60 <main+0xfc>
    {
        last_display_time = now; // Reset this timer to avoid spamming UART if collection is slow
 8003ed0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ed2:	228c      	movs	r2, #140	@ 0x8c
 8003ed4:	18ba      	adds	r2, r7, r2
 8003ed6:	6013      	str	r3, [r2, #0]
        printf("Collecting data (%d/%d samples)...\r\n", sample_count, BUFFER_SIZE); // UART only
 8003ed8:	2396      	movs	r3, #150	@ 0x96
 8003eda:	18fb      	adds	r3, r7, r3
 8003edc:	7819      	ldrb	r1, [r3, #0]
 8003ede:	4b14      	ldr	r3, [pc, #80]	@ (8003f30 <main+0x3cc>)
 8003ee0:	2205      	movs	r2, #5
 8003ee2:	0018      	movs	r0, r3
 8003ee4:	f004 f9da 	bl	800829c <iprintf>
  {
 8003ee8:	e6ba      	b.n	8003c60 <main+0xfc>
 8003eea:	46c0      	nop			@ (mov r8, r8)
 8003eec:	0800a6f0 	.word	0x0800a6f0
 8003ef0:	200002cc 	.word	0x200002cc
 8003ef4:	200001f0 	.word	0x200001f0
 8003ef8:	20000300 	.word	0x20000300
 8003efc:	0800a71c 	.word	0x0800a71c
 8003f00:	0800a778 	.word	0x0800a778
 8003f04:	42c80000 	.word	0x42c80000
 8003f08:	0800a7c8 	.word	0x0800a7c8
 8003f0c:	00001387 	.word	0x00001387
 8003f10:	20000328 	.word	0x20000328
 8003f14:	40a00000 	.word	0x40a00000
 8003f18:	0800a7e4 	.word	0x0800a7e4
 8003f1c:	20000308 	.word	0x20000308
 8003f20:	0800b090 	.word	0x0800b090
 8003f24:	0800a7f0 	.word	0x0800a7f0
 8003f28:	0800a7fc 	.word	0x0800a7fc
 8003f2c:	20000244 	.word	0x20000244
 8003f30:	0800a81c 	.word	0x0800a81c

08003f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f34:	b590      	push	{r4, r7, lr}
 8003f36:	b09f      	sub	sp, #124	@ 0x7c
 8003f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f3a:	2440      	movs	r4, #64	@ 0x40
 8003f3c:	193b      	adds	r3, r7, r4
 8003f3e:	0018      	movs	r0, r3
 8003f40:	2338      	movs	r3, #56	@ 0x38
 8003f42:	001a      	movs	r2, r3
 8003f44:	2100      	movs	r1, #0
 8003f46:	f004 fa2b 	bl	80083a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f4a:	232c      	movs	r3, #44	@ 0x2c
 8003f4c:	18fb      	adds	r3, r7, r3
 8003f4e:	0018      	movs	r0, r3
 8003f50:	2314      	movs	r3, #20
 8003f52:	001a      	movs	r2, r3
 8003f54:	2100      	movs	r1, #0
 8003f56:	f004 fa23 	bl	80083a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f5a:	1d3b      	adds	r3, r7, #4
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	2328      	movs	r3, #40	@ 0x28
 8003f60:	001a      	movs	r2, r3
 8003f62:	2100      	movs	r1, #0
 8003f64:	f004 fa1c 	bl	80083a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f68:	4b27      	ldr	r3, [pc, #156]	@ (8004008 <SystemClock_Config+0xd4>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a27      	ldr	r2, [pc, #156]	@ (800400c <SystemClock_Config+0xd8>)
 8003f6e:	401a      	ands	r2, r3
 8003f70:	4b25      	ldr	r3, [pc, #148]	@ (8004008 <SystemClock_Config+0xd4>)
 8003f72:	2180      	movs	r1, #128	@ 0x80
 8003f74:	0109      	lsls	r1, r1, #4
 8003f76:	430a      	orrs	r2, r1
 8003f78:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003f7a:	0021      	movs	r1, r4
 8003f7c:	187b      	adds	r3, r7, r1
 8003f7e:	2210      	movs	r2, #16
 8003f80:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003f82:	187b      	adds	r3, r7, r1
 8003f84:	2201      	movs	r2, #1
 8003f86:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003f88:	187b      	adds	r3, r7, r1
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8003f8e:	187b      	adds	r3, r7, r1
 8003f90:	22a0      	movs	r2, #160	@ 0xa0
 8003f92:	0212      	lsls	r2, r2, #8
 8003f94:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003f96:	187b      	adds	r3, r7, r1
 8003f98:	2200      	movs	r2, #0
 8003f9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f9c:	187b      	adds	r3, r7, r1
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	f001 feea 	bl	8005d78 <HAL_RCC_OscConfig>
 8003fa4:	1e03      	subs	r3, r0, #0
 8003fa6:	d001      	beq.n	8003fac <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003fa8:	f000 f912 	bl	80041d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fac:	212c      	movs	r1, #44	@ 0x2c
 8003fae:	187b      	adds	r3, r7, r1
 8003fb0:	220f      	movs	r2, #15
 8003fb2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003fb4:	187b      	adds	r3, r7, r1
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003fba:	187b      	adds	r3, r7, r1
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003fc0:	187b      	adds	r3, r7, r1
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003fc6:	187b      	adds	r3, r7, r1
 8003fc8:	2200      	movs	r2, #0
 8003fca:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003fcc:	187b      	adds	r3, r7, r1
 8003fce:	2100      	movs	r1, #0
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f002 faa5 	bl	8006520 <HAL_RCC_ClockConfig>
 8003fd6:	1e03      	subs	r3, r0, #0
 8003fd8:	d001      	beq.n	8003fde <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003fda:	f000 f8f9 	bl	80041d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8003fde:	1d3b      	adds	r3, r7, #4
 8003fe0:	220a      	movs	r2, #10
 8003fe2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003fe4:	1d3b      	adds	r3, r7, #4
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003fea:	1d3b      	adds	r3, r7, #4
 8003fec:	2200      	movs	r2, #0
 8003fee:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ff0:	1d3b      	adds	r3, r7, #4
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	f002 fc98 	bl	8006928 <HAL_RCCEx_PeriphCLKConfig>
 8003ff8:	1e03      	subs	r3, r0, #0
 8003ffa:	d001      	beq.n	8004000 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8003ffc:	f000 f8e8 	bl	80041d0 <Error_Handler>
  }
}
 8004000:	46c0      	nop			@ (mov r8, r8)
 8004002:	46bd      	mov	sp, r7
 8004004:	b01f      	add	sp, #124	@ 0x7c
 8004006:	bd90      	pop	{r4, r7, pc}
 8004008:	40007000 	.word	0x40007000
 800400c:	ffffe7ff 	.word	0xffffe7ff

08004010 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004014:	4b1c      	ldr	r3, [pc, #112]	@ (8004088 <MX_I2C1_Init+0x78>)
 8004016:	4a1d      	ldr	r2, [pc, #116]	@ (800408c <MX_I2C1_Init+0x7c>)
 8004018:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 800401a:	4b1b      	ldr	r3, [pc, #108]	@ (8004088 <MX_I2C1_Init+0x78>)
 800401c:	22c1      	movs	r2, #193	@ 0xc1
 800401e:	00d2      	lsls	r2, r2, #3
 8004020:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004022:	4b19      	ldr	r3, [pc, #100]	@ (8004088 <MX_I2C1_Init+0x78>)
 8004024:	2200      	movs	r2, #0
 8004026:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004028:	4b17      	ldr	r3, [pc, #92]	@ (8004088 <MX_I2C1_Init+0x78>)
 800402a:	2201      	movs	r2, #1
 800402c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800402e:	4b16      	ldr	r3, [pc, #88]	@ (8004088 <MX_I2C1_Init+0x78>)
 8004030:	2200      	movs	r2, #0
 8004032:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004034:	4b14      	ldr	r3, [pc, #80]	@ (8004088 <MX_I2C1_Init+0x78>)
 8004036:	2200      	movs	r2, #0
 8004038:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800403a:	4b13      	ldr	r3, [pc, #76]	@ (8004088 <MX_I2C1_Init+0x78>)
 800403c:	2200      	movs	r2, #0
 800403e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004040:	4b11      	ldr	r3, [pc, #68]	@ (8004088 <MX_I2C1_Init+0x78>)
 8004042:	2200      	movs	r2, #0
 8004044:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004046:	4b10      	ldr	r3, [pc, #64]	@ (8004088 <MX_I2C1_Init+0x78>)
 8004048:	2200      	movs	r2, #0
 800404a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800404c:	4b0e      	ldr	r3, [pc, #56]	@ (8004088 <MX_I2C1_Init+0x78>)
 800404e:	0018      	movs	r0, r3
 8004050:	f000 fff6 	bl	8005040 <HAL_I2C_Init>
 8004054:	1e03      	subs	r3, r0, #0
 8004056:	d001      	beq.n	800405c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004058:	f000 f8ba 	bl	80041d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800405c:	4b0a      	ldr	r3, [pc, #40]	@ (8004088 <MX_I2C1_Init+0x78>)
 800405e:	2100      	movs	r1, #0
 8004060:	0018      	movs	r0, r3
 8004062:	f001 fdf1 	bl	8005c48 <HAL_I2CEx_ConfigAnalogFilter>
 8004066:	1e03      	subs	r3, r0, #0
 8004068:	d001      	beq.n	800406e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800406a:	f000 f8b1 	bl	80041d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800406e:	4b06      	ldr	r3, [pc, #24]	@ (8004088 <MX_I2C1_Init+0x78>)
 8004070:	2100      	movs	r1, #0
 8004072:	0018      	movs	r0, r3
 8004074:	f001 fe34 	bl	8005ce0 <HAL_I2CEx_ConfigDigitalFilter>
 8004078:	1e03      	subs	r3, r0, #0
 800407a:	d001      	beq.n	8004080 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800407c:	f000 f8a8 	bl	80041d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8004080:	46c0      	nop			@ (mov r8, r8)
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	46c0      	nop			@ (mov r8, r8)
 8004088:	200001f0 	.word	0x200001f0
 800408c:	40005400 	.word	0x40005400

08004090 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004094:	4b14      	ldr	r3, [pc, #80]	@ (80040e8 <MX_USART2_UART_Init+0x58>)
 8004096:	4a15      	ldr	r2, [pc, #84]	@ (80040ec <MX_USART2_UART_Init+0x5c>)
 8004098:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800409a:	4b13      	ldr	r3, [pc, #76]	@ (80040e8 <MX_USART2_UART_Init+0x58>)
 800409c:	22e1      	movs	r2, #225	@ 0xe1
 800409e:	0252      	lsls	r2, r2, #9
 80040a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80040a2:	4b11      	ldr	r3, [pc, #68]	@ (80040e8 <MX_USART2_UART_Init+0x58>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80040a8:	4b0f      	ldr	r3, [pc, #60]	@ (80040e8 <MX_USART2_UART_Init+0x58>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80040ae:	4b0e      	ldr	r3, [pc, #56]	@ (80040e8 <MX_USART2_UART_Init+0x58>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80040b4:	4b0c      	ldr	r3, [pc, #48]	@ (80040e8 <MX_USART2_UART_Init+0x58>)
 80040b6:	220c      	movs	r2, #12
 80040b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040ba:	4b0b      	ldr	r3, [pc, #44]	@ (80040e8 <MX_USART2_UART_Init+0x58>)
 80040bc:	2200      	movs	r2, #0
 80040be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80040c0:	4b09      	ldr	r3, [pc, #36]	@ (80040e8 <MX_USART2_UART_Init+0x58>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80040c6:	4b08      	ldr	r3, [pc, #32]	@ (80040e8 <MX_USART2_UART_Init+0x58>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80040cc:	4b06      	ldr	r3, [pc, #24]	@ (80040e8 <MX_USART2_UART_Init+0x58>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80040d2:	4b05      	ldr	r3, [pc, #20]	@ (80040e8 <MX_USART2_UART_Init+0x58>)
 80040d4:	0018      	movs	r0, r3
 80040d6:	f002 fdc5 	bl	8006c64 <HAL_UART_Init>
 80040da:	1e03      	subs	r3, r0, #0
 80040dc:	d001      	beq.n	80040e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80040de:	f000 f877 	bl	80041d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 80040e2:	46c0      	nop			@ (mov r8, r8)
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20000244 	.word	0x20000244
 80040ec:	40004400 	.word	0x40004400

080040f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80040f0:	b590      	push	{r4, r7, lr}
 80040f2:	b08b      	sub	sp, #44	@ 0x2c
 80040f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f6:	2414      	movs	r4, #20
 80040f8:	193b      	adds	r3, r7, r4
 80040fa:	0018      	movs	r0, r3
 80040fc:	2314      	movs	r3, #20
 80040fe:	001a      	movs	r2, r3
 8004100:	2100      	movs	r1, #0
 8004102:	f004 f94d 	bl	80083a0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004106:	4b30      	ldr	r3, [pc, #192]	@ (80041c8 <MX_GPIO_Init+0xd8>)
 8004108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800410a:	4b2f      	ldr	r3, [pc, #188]	@ (80041c8 <MX_GPIO_Init+0xd8>)
 800410c:	2104      	movs	r1, #4
 800410e:	430a      	orrs	r2, r1
 8004110:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004112:	4b2d      	ldr	r3, [pc, #180]	@ (80041c8 <MX_GPIO_Init+0xd8>)
 8004114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004116:	2204      	movs	r2, #4
 8004118:	4013      	ands	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800411e:	4b2a      	ldr	r3, [pc, #168]	@ (80041c8 <MX_GPIO_Init+0xd8>)
 8004120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004122:	4b29      	ldr	r3, [pc, #164]	@ (80041c8 <MX_GPIO_Init+0xd8>)
 8004124:	2180      	movs	r1, #128	@ 0x80
 8004126:	430a      	orrs	r2, r1
 8004128:	62da      	str	r2, [r3, #44]	@ 0x2c
 800412a:	4b27      	ldr	r3, [pc, #156]	@ (80041c8 <MX_GPIO_Init+0xd8>)
 800412c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412e:	2280      	movs	r2, #128	@ 0x80
 8004130:	4013      	ands	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004136:	4b24      	ldr	r3, [pc, #144]	@ (80041c8 <MX_GPIO_Init+0xd8>)
 8004138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800413a:	4b23      	ldr	r3, [pc, #140]	@ (80041c8 <MX_GPIO_Init+0xd8>)
 800413c:	2101      	movs	r1, #1
 800413e:	430a      	orrs	r2, r1
 8004140:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004142:	4b21      	ldr	r3, [pc, #132]	@ (80041c8 <MX_GPIO_Init+0xd8>)
 8004144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004146:	2201      	movs	r2, #1
 8004148:	4013      	ands	r3, r2
 800414a:	60bb      	str	r3, [r7, #8]
 800414c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800414e:	4b1e      	ldr	r3, [pc, #120]	@ (80041c8 <MX_GPIO_Init+0xd8>)
 8004150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004152:	4b1d      	ldr	r3, [pc, #116]	@ (80041c8 <MX_GPIO_Init+0xd8>)
 8004154:	2102      	movs	r1, #2
 8004156:	430a      	orrs	r2, r1
 8004158:	62da      	str	r2, [r3, #44]	@ 0x2c
 800415a:	4b1b      	ldr	r3, [pc, #108]	@ (80041c8 <MX_GPIO_Init+0xd8>)
 800415c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415e:	2202      	movs	r2, #2
 8004160:	4013      	ands	r3, r2
 8004162:	607b      	str	r3, [r7, #4]
 8004164:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004166:	23a0      	movs	r3, #160	@ 0xa0
 8004168:	05db      	lsls	r3, r3, #23
 800416a:	2200      	movs	r2, #0
 800416c:	2120      	movs	r1, #32
 800416e:	0018      	movs	r0, r3
 8004170:	f000 ff2e 	bl	8004fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004174:	193b      	adds	r3, r7, r4
 8004176:	2280      	movs	r2, #128	@ 0x80
 8004178:	0192      	lsls	r2, r2, #6
 800417a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800417c:	193b      	adds	r3, r7, r4
 800417e:	2284      	movs	r2, #132	@ 0x84
 8004180:	0392      	lsls	r2, r2, #14
 8004182:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004184:	193b      	adds	r3, r7, r4
 8004186:	2200      	movs	r2, #0
 8004188:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800418a:	193b      	adds	r3, r7, r4
 800418c:	4a0f      	ldr	r2, [pc, #60]	@ (80041cc <MX_GPIO_Init+0xdc>)
 800418e:	0019      	movs	r1, r3
 8004190:	0010      	movs	r0, r2
 8004192:	f000 fd9f 	bl	8004cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004196:	0021      	movs	r1, r4
 8004198:	187b      	adds	r3, r7, r1
 800419a:	2220      	movs	r2, #32
 800419c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800419e:	187b      	adds	r3, r7, r1
 80041a0:	2201      	movs	r2, #1
 80041a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a4:	187b      	adds	r3, r7, r1
 80041a6:	2200      	movs	r2, #0
 80041a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041aa:	187b      	adds	r3, r7, r1
 80041ac:	2200      	movs	r2, #0
 80041ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80041b0:	187a      	adds	r2, r7, r1
 80041b2:	23a0      	movs	r3, #160	@ 0xa0
 80041b4:	05db      	lsls	r3, r3, #23
 80041b6:	0011      	movs	r1, r2
 80041b8:	0018      	movs	r0, r3
 80041ba:	f000 fd8b 	bl	8004cd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80041be:	46c0      	nop			@ (mov r8, r8)
 80041c0:	46bd      	mov	sp, r7
 80041c2:	b00b      	add	sp, #44	@ 0x2c
 80041c4:	bd90      	pop	{r4, r7, pc}
 80041c6:	46c0      	nop			@ (mov r8, r8)
 80041c8:	40021000 	.word	0x40021000
 80041cc:	50000800 	.word	0x50000800

080041d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  printf("!!! HAL Error Handler Called !!!\r\n"); // UART only
 80041d4:	4b08      	ldr	r3, [pc, #32]	@ (80041f8 <Error_Handler+0x28>)
 80041d6:	0018      	movs	r0, r3
 80041d8:	f004 f8c6 	bl	8008368 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80041dc:	b672      	cpsid	i
}
 80041de:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
  {
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80041e0:	23a0      	movs	r3, #160	@ 0xa0
 80041e2:	05db      	lsls	r3, r3, #23
 80041e4:	2120      	movs	r1, #32
 80041e6:	0018      	movs	r0, r3
 80041e8:	f000 ff0f 	bl	800500a <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 80041ec:	2064      	movs	r0, #100	@ 0x64
 80041ee:	f000 fc99 	bl	8004b24 <HAL_Delay>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80041f2:	46c0      	nop			@ (mov r8, r8)
 80041f4:	e7f4      	b.n	80041e0 <Error_Handler+0x10>
 80041f6:	46c0      	nop			@ (mov r8, r8)
 80041f8:	0800a844 	.word	0x0800a844

080041fc <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004200:	46c0      	nop			@ (mov r8, r8)
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af04      	add	r7, sp, #16
 800420e:	0002      	movs	r2, r0
 8004210:	1dfb      	adds	r3, r7, #7
 8004212:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004214:	4808      	ldr	r0, [pc, #32]	@ (8004238 <ssd1306_WriteCommand+0x30>)
 8004216:	2301      	movs	r3, #1
 8004218:	425b      	negs	r3, r3
 800421a:	9302      	str	r3, [sp, #8]
 800421c:	2301      	movs	r3, #1
 800421e:	9301      	str	r3, [sp, #4]
 8004220:	1dfb      	adds	r3, r7, #7
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	2301      	movs	r3, #1
 8004226:	2200      	movs	r2, #0
 8004228:	2178      	movs	r1, #120	@ 0x78
 800422a:	f000 ffaf 	bl	800518c <HAL_I2C_Mem_Write>
}
 800422e:	46c0      	nop			@ (mov r8, r8)
 8004230:	46bd      	mov	sp, r7
 8004232:	b002      	add	sp, #8
 8004234:	bd80      	pop	{r7, pc}
 8004236:	46c0      	nop			@ (mov r8, r8)
 8004238:	200001f0 	.word	0x200001f0

0800423c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af04      	add	r7, sp, #16
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	b29b      	uxth	r3, r3
 800424a:	4808      	ldr	r0, [pc, #32]	@ (800426c <ssd1306_WriteData+0x30>)
 800424c:	2201      	movs	r2, #1
 800424e:	4252      	negs	r2, r2
 8004250:	9202      	str	r2, [sp, #8]
 8004252:	9301      	str	r3, [sp, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	2301      	movs	r3, #1
 800425a:	2240      	movs	r2, #64	@ 0x40
 800425c:	2178      	movs	r1, #120	@ 0x78
 800425e:	f000 ff95 	bl	800518c <HAL_I2C_Mem_Write>
}
 8004262:	46c0      	nop			@ (mov r8, r8)
 8004264:	46bd      	mov	sp, r7
 8004266:	b002      	add	sp, #8
 8004268:	bd80      	pop	{r7, pc}
 800426a:	46c0      	nop			@ (mov r8, r8)
 800426c:	200001f0 	.word	0x200001f0

08004270 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8004274:	f7ff ffc2 	bl	80041fc <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8004278:	2064      	movs	r0, #100	@ 0x64
 800427a:	f000 fc53 	bl	8004b24 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800427e:	2000      	movs	r0, #0
 8004280:	f000 fa14 	bl	80046ac <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004284:	2020      	movs	r0, #32
 8004286:	f7ff ffbf 	bl	8004208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800428a:	2000      	movs	r0, #0
 800428c:	f7ff ffbc 	bl	8004208 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004290:	20b0      	movs	r0, #176	@ 0xb0
 8004292:	f7ff ffb9 	bl	8004208 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004296:	20c8      	movs	r0, #200	@ 0xc8
 8004298:	f7ff ffb6 	bl	8004208 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800429c:	2000      	movs	r0, #0
 800429e:	f7ff ffb3 	bl	8004208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80042a2:	2010      	movs	r0, #16
 80042a4:	f7ff ffb0 	bl	8004208 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80042a8:	2040      	movs	r0, #64	@ 0x40
 80042aa:	f7ff ffad 	bl	8004208 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80042ae:	20ff      	movs	r0, #255	@ 0xff
 80042b0:	f000 f9e4 	bl	800467c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80042b4:	20a1      	movs	r0, #161	@ 0xa1
 80042b6:	f7ff ffa7 	bl	8004208 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80042ba:	20a6      	movs	r0, #166	@ 0xa6
 80042bc:	f7ff ffa4 	bl	8004208 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80042c0:	20a8      	movs	r0, #168	@ 0xa8
 80042c2:	f7ff ffa1 	bl	8004208 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80042c6:	203f      	movs	r0, #63	@ 0x3f
 80042c8:	f7ff ff9e 	bl	8004208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80042cc:	20a4      	movs	r0, #164	@ 0xa4
 80042ce:	f7ff ff9b 	bl	8004208 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80042d2:	20d3      	movs	r0, #211	@ 0xd3
 80042d4:	f7ff ff98 	bl	8004208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80042d8:	2000      	movs	r0, #0
 80042da:	f7ff ff95 	bl	8004208 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80042de:	20d5      	movs	r0, #213	@ 0xd5
 80042e0:	f7ff ff92 	bl	8004208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80042e4:	20f0      	movs	r0, #240	@ 0xf0
 80042e6:	f7ff ff8f 	bl	8004208 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80042ea:	20d9      	movs	r0, #217	@ 0xd9
 80042ec:	f7ff ff8c 	bl	8004208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80042f0:	2022      	movs	r0, #34	@ 0x22
 80042f2:	f7ff ff89 	bl	8004208 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80042f6:	20da      	movs	r0, #218	@ 0xda
 80042f8:	f7ff ff86 	bl	8004208 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80042fc:	2012      	movs	r0, #18
 80042fe:	f7ff ff83 	bl	8004208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8004302:	20db      	movs	r0, #219	@ 0xdb
 8004304:	f7ff ff80 	bl	8004208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004308:	2020      	movs	r0, #32
 800430a:	f7ff ff7d 	bl	8004208 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800430e:	208d      	movs	r0, #141	@ 0x8d
 8004310:	f7ff ff7a 	bl	8004208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8004314:	2014      	movs	r0, #20
 8004316:	f7ff ff77 	bl	8004208 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800431a:	2001      	movs	r0, #1
 800431c:	f000 f9c6 	bl	80046ac <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8004320:	2000      	movs	r0, #0
 8004322:	f000 f811 	bl	8004348 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8004326:	f000 f829 	bl	800437c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800432a:	4b06      	ldr	r3, [pc, #24]	@ (8004344 <ssd1306_Init+0xd4>)
 800432c:	2200      	movs	r2, #0
 800432e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004330:	4b04      	ldr	r3, [pc, #16]	@ (8004344 <ssd1306_Init+0xd4>)
 8004332:	2200      	movs	r2, #0
 8004334:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8004336:	4b03      	ldr	r3, [pc, #12]	@ (8004344 <ssd1306_Init+0xd4>)
 8004338:	2201      	movs	r2, #1
 800433a:	711a      	strb	r2, [r3, #4]
}
 800433c:	46c0      	nop			@ (mov r8, r8)
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	46c0      	nop			@ (mov r8, r8)
 8004344:	2000072c 	.word	0x2000072c

08004348 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	0002      	movs	r2, r0
 8004350:	1dfb      	adds	r3, r7, #7
 8004352:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8004354:	1dfb      	adds	r3, r7, #7
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <ssd1306_Fill+0x18>
 800435c:	2300      	movs	r3, #0
 800435e:	e000      	b.n	8004362 <ssd1306_Fill+0x1a>
 8004360:	23ff      	movs	r3, #255	@ 0xff
 8004362:	2280      	movs	r2, #128	@ 0x80
 8004364:	00d2      	lsls	r2, r2, #3
 8004366:	4804      	ldr	r0, [pc, #16]	@ (8004378 <ssd1306_Fill+0x30>)
 8004368:	0019      	movs	r1, r3
 800436a:	f004 f819 	bl	80083a0 <memset>
}
 800436e:	46c0      	nop			@ (mov r8, r8)
 8004370:	46bd      	mov	sp, r7
 8004372:	b002      	add	sp, #8
 8004374:	bd80      	pop	{r7, pc}
 8004376:	46c0      	nop			@ (mov r8, r8)
 8004378:	2000032c 	.word	0x2000032c

0800437c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004382:	1dfb      	adds	r3, r7, #7
 8004384:	2200      	movs	r2, #0
 8004386:	701a      	strb	r2, [r3, #0]
 8004388:	e01a      	b.n	80043c0 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800438a:	1dfb      	adds	r3, r7, #7
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	3b50      	subs	r3, #80	@ 0x50
 8004390:	b2db      	uxtb	r3, r3
 8004392:	0018      	movs	r0, r3
 8004394:	f7ff ff38 	bl	8004208 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8004398:	2000      	movs	r0, #0
 800439a:	f7ff ff35 	bl	8004208 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800439e:	2010      	movs	r0, #16
 80043a0:	f7ff ff32 	bl	8004208 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80043a4:	1dfb      	adds	r3, r7, #7
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	01da      	lsls	r2, r3, #7
 80043aa:	4b0a      	ldr	r3, [pc, #40]	@ (80043d4 <ssd1306_UpdateScreen+0x58>)
 80043ac:	18d3      	adds	r3, r2, r3
 80043ae:	2180      	movs	r1, #128	@ 0x80
 80043b0:	0018      	movs	r0, r3
 80043b2:	f7ff ff43 	bl	800423c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80043b6:	1dfb      	adds	r3, r7, #7
 80043b8:	781a      	ldrb	r2, [r3, #0]
 80043ba:	1dfb      	adds	r3, r7, #7
 80043bc:	3201      	adds	r2, #1
 80043be:	701a      	strb	r2, [r3, #0]
 80043c0:	1dfb      	adds	r3, r7, #7
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2b07      	cmp	r3, #7
 80043c6:	d9e0      	bls.n	800438a <ssd1306_UpdateScreen+0xe>
    }
}
 80043c8:	46c0      	nop			@ (mov r8, r8)
 80043ca:	46c0      	nop			@ (mov r8, r8)
 80043cc:	46bd      	mov	sp, r7
 80043ce:	b002      	add	sp, #8
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	46c0      	nop			@ (mov r8, r8)
 80043d4:	2000032c 	.word	0x2000032c

080043d8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80043d8:	b590      	push	{r4, r7, lr}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	0004      	movs	r4, r0
 80043e0:	0008      	movs	r0, r1
 80043e2:	0011      	movs	r1, r2
 80043e4:	1dfb      	adds	r3, r7, #7
 80043e6:	1c22      	adds	r2, r4, #0
 80043e8:	701a      	strb	r2, [r3, #0]
 80043ea:	1dbb      	adds	r3, r7, #6
 80043ec:	1c02      	adds	r2, r0, #0
 80043ee:	701a      	strb	r2, [r3, #0]
 80043f0:	1d7b      	adds	r3, r7, #5
 80043f2:	1c0a      	adds	r2, r1, #0
 80043f4:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80043f6:	1dfb      	adds	r3, r7, #7
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	b25b      	sxtb	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	db47      	blt.n	8004490 <ssd1306_DrawPixel+0xb8>
 8004400:	1dbb      	adds	r3, r7, #6
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b3f      	cmp	r3, #63	@ 0x3f
 8004406:	d843      	bhi.n	8004490 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8004408:	1d7b      	adds	r3, r7, #5
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d11e      	bne.n	800444e <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004410:	1dfb      	adds	r3, r7, #7
 8004412:	781a      	ldrb	r2, [r3, #0]
 8004414:	1dbb      	adds	r3, r7, #6
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	08db      	lsrs	r3, r3, #3
 800441a:	b2d8      	uxtb	r0, r3
 800441c:	0003      	movs	r3, r0
 800441e:	01db      	lsls	r3, r3, #7
 8004420:	18d3      	adds	r3, r2, r3
 8004422:	4a1d      	ldr	r2, [pc, #116]	@ (8004498 <ssd1306_DrawPixel+0xc0>)
 8004424:	5cd3      	ldrb	r3, [r2, r3]
 8004426:	b25a      	sxtb	r2, r3
 8004428:	1dbb      	adds	r3, r7, #6
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2107      	movs	r1, #7
 800442e:	400b      	ands	r3, r1
 8004430:	2101      	movs	r1, #1
 8004432:	4099      	lsls	r1, r3
 8004434:	000b      	movs	r3, r1
 8004436:	b25b      	sxtb	r3, r3
 8004438:	4313      	orrs	r3, r2
 800443a:	b259      	sxtb	r1, r3
 800443c:	1dfb      	adds	r3, r7, #7
 800443e:	781a      	ldrb	r2, [r3, #0]
 8004440:	0003      	movs	r3, r0
 8004442:	01db      	lsls	r3, r3, #7
 8004444:	18d3      	adds	r3, r2, r3
 8004446:	b2c9      	uxtb	r1, r1
 8004448:	4a13      	ldr	r2, [pc, #76]	@ (8004498 <ssd1306_DrawPixel+0xc0>)
 800444a:	54d1      	strb	r1, [r2, r3]
 800444c:	e021      	b.n	8004492 <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800444e:	1dfb      	adds	r3, r7, #7
 8004450:	781a      	ldrb	r2, [r3, #0]
 8004452:	1dbb      	adds	r3, r7, #6
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	08db      	lsrs	r3, r3, #3
 8004458:	b2d8      	uxtb	r0, r3
 800445a:	0003      	movs	r3, r0
 800445c:	01db      	lsls	r3, r3, #7
 800445e:	18d3      	adds	r3, r2, r3
 8004460:	4a0d      	ldr	r2, [pc, #52]	@ (8004498 <ssd1306_DrawPixel+0xc0>)
 8004462:	5cd3      	ldrb	r3, [r2, r3]
 8004464:	b25b      	sxtb	r3, r3
 8004466:	1dba      	adds	r2, r7, #6
 8004468:	7812      	ldrb	r2, [r2, #0]
 800446a:	2107      	movs	r1, #7
 800446c:	400a      	ands	r2, r1
 800446e:	2101      	movs	r1, #1
 8004470:	4091      	lsls	r1, r2
 8004472:	000a      	movs	r2, r1
 8004474:	b252      	sxtb	r2, r2
 8004476:	43d2      	mvns	r2, r2
 8004478:	b252      	sxtb	r2, r2
 800447a:	4013      	ands	r3, r2
 800447c:	b259      	sxtb	r1, r3
 800447e:	1dfb      	adds	r3, r7, #7
 8004480:	781a      	ldrb	r2, [r3, #0]
 8004482:	0003      	movs	r3, r0
 8004484:	01db      	lsls	r3, r3, #7
 8004486:	18d3      	adds	r3, r2, r3
 8004488:	b2c9      	uxtb	r1, r1
 800448a:	4a03      	ldr	r2, [pc, #12]	@ (8004498 <ssd1306_DrawPixel+0xc0>)
 800448c:	54d1      	strb	r1, [r2, r3]
 800448e:	e000      	b.n	8004492 <ssd1306_DrawPixel+0xba>
        return;
 8004490:	46c0      	nop			@ (mov r8, r8)
    }
}
 8004492:	46bd      	mov	sp, r7
 8004494:	b003      	add	sp, #12
 8004496:	bd90      	pop	{r4, r7, pc}
 8004498:	2000032c 	.word	0x2000032c

0800449c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800449c:	b590      	push	{r4, r7, lr}
 800449e:	b089      	sub	sp, #36	@ 0x24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	0004      	movs	r4, r0
 80044a4:	0038      	movs	r0, r7
 80044a6:	6001      	str	r1, [r0, #0]
 80044a8:	6042      	str	r2, [r0, #4]
 80044aa:	6083      	str	r3, [r0, #8]
 80044ac:	210f      	movs	r1, #15
 80044ae:	187b      	adds	r3, r7, r1
 80044b0:	1c22      	adds	r2, r4, #0
 80044b2:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80044b4:	000a      	movs	r2, r1
 80044b6:	18bb      	adds	r3, r7, r2
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b1f      	cmp	r3, #31
 80044bc:	d903      	bls.n	80044c6 <ssd1306_WriteChar+0x2a>
 80044be:	18bb      	adds	r3, r7, r2
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b7e      	cmp	r3, #126	@ 0x7e
 80044c4:	d901      	bls.n	80044ca <ssd1306_WriteChar+0x2e>
        return 0;
 80044c6:	2300      	movs	r3, #0
 80044c8:	e08b      	b.n	80045e2 <ssd1306_WriteChar+0x146>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 80044ca:	003b      	movs	r3, r7
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d008      	beq.n	80044e4 <ssd1306_WriteChar+0x48>
 80044d2:	003b      	movs	r3, r7
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	230f      	movs	r3, #15
 80044d8:	18fb      	adds	r3, r7, r3
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	3b20      	subs	r3, #32
 80044de:	18d3      	adds	r3, r2, r3
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	e001      	b.n	80044e8 <ssd1306_WriteChar+0x4c>
 80044e4:	003b      	movs	r3, r7
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2117      	movs	r1, #23
 80044ea:	187a      	adds	r2, r7, r1
 80044ec:	7013      	strb	r3, [r2, #0]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80044ee:	4b3f      	ldr	r3, [pc, #252]	@ (80045ec <ssd1306_WriteChar+0x150>)
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	001a      	movs	r2, r3
 80044f4:	187b      	adds	r3, r7, r1
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	18d3      	adds	r3, r2, r3
 80044fa:	2b80      	cmp	r3, #128	@ 0x80
 80044fc:	dc07      	bgt.n	800450e <ssd1306_WriteChar+0x72>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80044fe:	4b3b      	ldr	r3, [pc, #236]	@ (80045ec <ssd1306_WriteChar+0x150>)
 8004500:	885b      	ldrh	r3, [r3, #2]
 8004502:	001a      	movs	r2, r3
 8004504:	003b      	movs	r3, r7
 8004506:	785b      	ldrb	r3, [r3, #1]
 8004508:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 800450a:	2b40      	cmp	r3, #64	@ 0x40
 800450c:	dd01      	ble.n	8004512 <ssd1306_WriteChar+0x76>
    {
        // Not enough space on current line
        return 0;
 800450e:	2300      	movs	r3, #0
 8004510:	e067      	b.n	80045e2 <ssd1306_WriteChar+0x146>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8004512:	2300      	movs	r3, #0
 8004514:	61fb      	str	r3, [r7, #28]
 8004516:	e051      	b.n	80045bc <ssd1306_WriteChar+0x120>
        b = Font.data[(ch - 32) * Font.height + i];
 8004518:	003b      	movs	r3, r7
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	230f      	movs	r3, #15
 800451e:	18fb      	adds	r3, r7, r3
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	3b20      	subs	r3, #32
 8004524:	0039      	movs	r1, r7
 8004526:	7849      	ldrb	r1, [r1, #1]
 8004528:	434b      	muls	r3, r1
 800452a:	0019      	movs	r1, r3
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	18cb      	adds	r3, r1, r3
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	18d3      	adds	r3, r2, r3
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8004538:	2300      	movs	r3, #0
 800453a:	61bb      	str	r3, [r7, #24]
 800453c:	e035      	b.n	80045aa <ssd1306_WriteChar+0x10e>
            if((b << j) & 0x8000)  {
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	409a      	lsls	r2, r3
 8004544:	2380      	movs	r3, #128	@ 0x80
 8004546:	021b      	lsls	r3, r3, #8
 8004548:	4013      	ands	r3, r2
 800454a:	d014      	beq.n	8004576 <ssd1306_WriteChar+0xda>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800454c:	4b27      	ldr	r3, [pc, #156]	@ (80045ec <ssd1306_WriteChar+0x150>)
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	b2da      	uxtb	r2, r3
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	18d3      	adds	r3, r2, r3
 8004558:	b2d8      	uxtb	r0, r3
 800455a:	4b24      	ldr	r3, [pc, #144]	@ (80045ec <ssd1306_WriteChar+0x150>)
 800455c:	885b      	ldrh	r3, [r3, #2]
 800455e:	b2da      	uxtb	r2, r3
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	b2db      	uxtb	r3, r3
 8004564:	18d3      	adds	r3, r2, r3
 8004566:	b2d9      	uxtb	r1, r3
 8004568:	2330      	movs	r3, #48	@ 0x30
 800456a:	18fb      	adds	r3, r7, r3
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	001a      	movs	r2, r3
 8004570:	f7ff ff32 	bl	80043d8 <ssd1306_DrawPixel>
 8004574:	e016      	b.n	80045a4 <ssd1306_WriteChar+0x108>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004576:	4b1d      	ldr	r3, [pc, #116]	@ (80045ec <ssd1306_WriteChar+0x150>)
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	b2da      	uxtb	r2, r3
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	b2db      	uxtb	r3, r3
 8004580:	18d3      	adds	r3, r2, r3
 8004582:	b2d8      	uxtb	r0, r3
 8004584:	4b19      	ldr	r3, [pc, #100]	@ (80045ec <ssd1306_WriteChar+0x150>)
 8004586:	885b      	ldrh	r3, [r3, #2]
 8004588:	b2da      	uxtb	r2, r3
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	b2db      	uxtb	r3, r3
 800458e:	18d3      	adds	r3, r2, r3
 8004590:	b2d9      	uxtb	r1, r3
 8004592:	2330      	movs	r3, #48	@ 0x30
 8004594:	18fb      	adds	r3, r7, r3
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	425a      	negs	r2, r3
 800459a:	4153      	adcs	r3, r2
 800459c:	b2db      	uxtb	r3, r3
 800459e:	001a      	movs	r2, r3
 80045a0:	f7ff ff1a 	bl	80043d8 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	3301      	adds	r3, #1
 80045a8:	61bb      	str	r3, [r7, #24]
 80045aa:	2317      	movs	r3, #23
 80045ac:	18fb      	adds	r3, r7, r3
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d3c3      	bcc.n	800453e <ssd1306_WriteChar+0xa2>
    for(i = 0; i < Font.height; i++) {
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	3301      	adds	r3, #1
 80045ba:	61fb      	str	r3, [r7, #28]
 80045bc:	003b      	movs	r3, r7
 80045be:	785b      	ldrb	r3, [r3, #1]
 80045c0:	001a      	movs	r2, r3
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d3a7      	bcc.n	8004518 <ssd1306_WriteChar+0x7c>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 80045c8:	4b08      	ldr	r3, [pc, #32]	@ (80045ec <ssd1306_WriteChar+0x150>)
 80045ca:	881a      	ldrh	r2, [r3, #0]
 80045cc:	2317      	movs	r3, #23
 80045ce:	18fb      	adds	r3, r7, r3
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	18d3      	adds	r3, r2, r3
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	4b04      	ldr	r3, [pc, #16]	@ (80045ec <ssd1306_WriteChar+0x150>)
 80045da:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80045dc:	230f      	movs	r3, #15
 80045de:	18fb      	adds	r3, r7, r3
 80045e0:	781b      	ldrb	r3, [r3, #0]
}
 80045e2:	0018      	movs	r0, r3
 80045e4:	46bd      	mov	sp, r7
 80045e6:	b009      	add	sp, #36	@ 0x24
 80045e8:	bd90      	pop	{r4, r7, pc}
 80045ea:	46c0      	nop			@ (mov r8, r8)
 80045ec:	2000072c 	.word	0x2000072c

080045f0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af02      	add	r7, sp, #8
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	0038      	movs	r0, r7
 80045fa:	6001      	str	r1, [r0, #0]
 80045fc:	6042      	str	r2, [r0, #4]
 80045fe:	6083      	str	r3, [r0, #8]
    while (*str) {
 8004600:	e017      	b.n	8004632 <ssd1306_WriteString+0x42>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	7818      	ldrb	r0, [r3, #0]
 8004606:	003b      	movs	r3, r7
 8004608:	2218      	movs	r2, #24
 800460a:	18ba      	adds	r2, r7, r2
 800460c:	7812      	ldrb	r2, [r2, #0]
 800460e:	9200      	str	r2, [sp, #0]
 8004610:	6819      	ldr	r1, [r3, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f7ff ff41 	bl	800449c <ssd1306_WriteChar>
 800461a:	0003      	movs	r3, r0
 800461c:	001a      	movs	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	429a      	cmp	r2, r3
 8004624:	d002      	beq.n	800462c <ssd1306_WriteString+0x3c>
            // Char could not be written
            return *str;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	e008      	b.n	800463e <ssd1306_WriteString+0x4e>
        }
        str++;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	3301      	adds	r3, #1
 8004630:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1e3      	bne.n	8004602 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	781b      	ldrb	r3, [r3, #0]
}
 800463e:	0018      	movs	r0, r3
 8004640:	46bd      	mov	sp, r7
 8004642:	b004      	add	sp, #16
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	0002      	movs	r2, r0
 8004650:	1dfb      	adds	r3, r7, #7
 8004652:	701a      	strb	r2, [r3, #0]
 8004654:	1dbb      	adds	r3, r7, #6
 8004656:	1c0a      	adds	r2, r1, #0
 8004658:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 800465a:	1dfb      	adds	r3, r7, #7
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	b29a      	uxth	r2, r3
 8004660:	4b05      	ldr	r3, [pc, #20]	@ (8004678 <ssd1306_SetCursor+0x30>)
 8004662:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004664:	1dbb      	adds	r3, r7, #6
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	b29a      	uxth	r2, r3
 800466a:	4b03      	ldr	r3, [pc, #12]	@ (8004678 <ssd1306_SetCursor+0x30>)
 800466c:	805a      	strh	r2, [r3, #2]
}
 800466e:	46c0      	nop			@ (mov r8, r8)
 8004670:	46bd      	mov	sp, r7
 8004672:	b002      	add	sp, #8
 8004674:	bd80      	pop	{r7, pc}
 8004676:	46c0      	nop			@ (mov r8, r8)
 8004678:	2000072c 	.word	0x2000072c

0800467c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	0002      	movs	r2, r0
 8004684:	1dfb      	adds	r3, r7, #7
 8004686:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004688:	210f      	movs	r1, #15
 800468a:	187b      	adds	r3, r7, r1
 800468c:	2281      	movs	r2, #129	@ 0x81
 800468e:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8004690:	187b      	adds	r3, r7, r1
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	0018      	movs	r0, r3
 8004696:	f7ff fdb7 	bl	8004208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800469a:	1dfb      	adds	r3, r7, #7
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	0018      	movs	r0, r3
 80046a0:	f7ff fdb2 	bl	8004208 <ssd1306_WriteCommand>
}
 80046a4:	46c0      	nop			@ (mov r8, r8)
 80046a6:	46bd      	mov	sp, r7
 80046a8:	b004      	add	sp, #16
 80046aa:	bd80      	pop	{r7, pc}

080046ac <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	0002      	movs	r2, r0
 80046b4:	1dfb      	adds	r3, r7, #7
 80046b6:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 80046b8:	1dfb      	adds	r3, r7, #7
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d007      	beq.n	80046d0 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 80046c0:	230f      	movs	r3, #15
 80046c2:	18fb      	adds	r3, r7, r3
 80046c4:	22af      	movs	r2, #175	@ 0xaf
 80046c6:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 80046c8:	4b0a      	ldr	r3, [pc, #40]	@ (80046f4 <ssd1306_SetDisplayOn+0x48>)
 80046ca:	2201      	movs	r2, #1
 80046cc:	715a      	strb	r2, [r3, #5]
 80046ce:	e006      	b.n	80046de <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 80046d0:	230f      	movs	r3, #15
 80046d2:	18fb      	adds	r3, r7, r3
 80046d4:	22ae      	movs	r2, #174	@ 0xae
 80046d6:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 80046d8:	4b06      	ldr	r3, [pc, #24]	@ (80046f4 <ssd1306_SetDisplayOn+0x48>)
 80046da:	2200      	movs	r2, #0
 80046dc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80046de:	230f      	movs	r3, #15
 80046e0:	18fb      	adds	r3, r7, r3
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	0018      	movs	r0, r3
 80046e6:	f7ff fd8f 	bl	8004208 <ssd1306_WriteCommand>
}
 80046ea:	46c0      	nop			@ (mov r8, r8)
 80046ec:	46bd      	mov	sp, r7
 80046ee:	b004      	add	sp, #16
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	46c0      	nop			@ (mov r8, r8)
 80046f4:	2000072c 	.word	0x2000072c

080046f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046fc:	4b07      	ldr	r3, [pc, #28]	@ (800471c <HAL_MspInit+0x24>)
 80046fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004700:	4b06      	ldr	r3, [pc, #24]	@ (800471c <HAL_MspInit+0x24>)
 8004702:	2101      	movs	r1, #1
 8004704:	430a      	orrs	r2, r1
 8004706:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004708:	4b04      	ldr	r3, [pc, #16]	@ (800471c <HAL_MspInit+0x24>)
 800470a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800470c:	4b03      	ldr	r3, [pc, #12]	@ (800471c <HAL_MspInit+0x24>)
 800470e:	2180      	movs	r1, #128	@ 0x80
 8004710:	0549      	lsls	r1, r1, #21
 8004712:	430a      	orrs	r2, r1
 8004714:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004716:	46c0      	nop			@ (mov r8, r8)
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40021000 	.word	0x40021000

08004720 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004720:	b590      	push	{r4, r7, lr}
 8004722:	b089      	sub	sp, #36	@ 0x24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004728:	240c      	movs	r4, #12
 800472a:	193b      	adds	r3, r7, r4
 800472c:	0018      	movs	r0, r3
 800472e:	2314      	movs	r3, #20
 8004730:	001a      	movs	r2, r3
 8004732:	2100      	movs	r1, #0
 8004734:	f003 fe34 	bl	80083a0 <memset>
  if(hi2c->Instance==I2C1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a18      	ldr	r2, [pc, #96]	@ (80047a0 <HAL_I2C_MspInit+0x80>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d129      	bne.n	8004796 <HAL_I2C_MspInit+0x76>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004742:	4b18      	ldr	r3, [pc, #96]	@ (80047a4 <HAL_I2C_MspInit+0x84>)
 8004744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004746:	4b17      	ldr	r3, [pc, #92]	@ (80047a4 <HAL_I2C_MspInit+0x84>)
 8004748:	2102      	movs	r1, #2
 800474a:	430a      	orrs	r2, r1
 800474c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800474e:	4b15      	ldr	r3, [pc, #84]	@ (80047a4 <HAL_I2C_MspInit+0x84>)
 8004750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004752:	2202      	movs	r2, #2
 8004754:	4013      	ands	r3, r2
 8004756:	60bb      	str	r3, [r7, #8]
 8004758:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800475a:	193b      	adds	r3, r7, r4
 800475c:	22c0      	movs	r2, #192	@ 0xc0
 800475e:	0092      	lsls	r2, r2, #2
 8004760:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004762:	0021      	movs	r1, r4
 8004764:	187b      	adds	r3, r7, r1
 8004766:	2212      	movs	r2, #18
 8004768:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476a:	187b      	adds	r3, r7, r1
 800476c:	2200      	movs	r2, #0
 800476e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004770:	187b      	adds	r3, r7, r1
 8004772:	2203      	movs	r2, #3
 8004774:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004776:	187b      	adds	r3, r7, r1
 8004778:	2204      	movs	r2, #4
 800477a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800477c:	187b      	adds	r3, r7, r1
 800477e:	4a0a      	ldr	r2, [pc, #40]	@ (80047a8 <HAL_I2C_MspInit+0x88>)
 8004780:	0019      	movs	r1, r3
 8004782:	0010      	movs	r0, r2
 8004784:	f000 faa6 	bl	8004cd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004788:	4b06      	ldr	r3, [pc, #24]	@ (80047a4 <HAL_I2C_MspInit+0x84>)
 800478a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800478c:	4b05      	ldr	r3, [pc, #20]	@ (80047a4 <HAL_I2C_MspInit+0x84>)
 800478e:	2180      	movs	r1, #128	@ 0x80
 8004790:	0389      	lsls	r1, r1, #14
 8004792:	430a      	orrs	r2, r1
 8004794:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004796:	46c0      	nop			@ (mov r8, r8)
 8004798:	46bd      	mov	sp, r7
 800479a:	b009      	add	sp, #36	@ 0x24
 800479c:	bd90      	pop	{r4, r7, pc}
 800479e:	46c0      	nop			@ (mov r8, r8)
 80047a0:	40005400 	.word	0x40005400
 80047a4:	40021000 	.word	0x40021000
 80047a8:	50000400 	.word	0x50000400

080047ac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047ac:	b590      	push	{r4, r7, lr}
 80047ae:	b089      	sub	sp, #36	@ 0x24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047b4:	240c      	movs	r4, #12
 80047b6:	193b      	adds	r3, r7, r4
 80047b8:	0018      	movs	r0, r3
 80047ba:	2314      	movs	r3, #20
 80047bc:	001a      	movs	r2, r3
 80047be:	2100      	movs	r1, #0
 80047c0:	f003 fdee 	bl	80083a0 <memset>
  if(huart->Instance==USART2)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a18      	ldr	r2, [pc, #96]	@ (800482c <HAL_UART_MspInit+0x80>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d129      	bne.n	8004822 <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80047ce:	4b18      	ldr	r3, [pc, #96]	@ (8004830 <HAL_UART_MspInit+0x84>)
 80047d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047d2:	4b17      	ldr	r3, [pc, #92]	@ (8004830 <HAL_UART_MspInit+0x84>)
 80047d4:	2180      	movs	r1, #128	@ 0x80
 80047d6:	0289      	lsls	r1, r1, #10
 80047d8:	430a      	orrs	r2, r1
 80047da:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047dc:	4b14      	ldr	r3, [pc, #80]	@ (8004830 <HAL_UART_MspInit+0x84>)
 80047de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047e0:	4b13      	ldr	r3, [pc, #76]	@ (8004830 <HAL_UART_MspInit+0x84>)
 80047e2:	2101      	movs	r1, #1
 80047e4:	430a      	orrs	r2, r1
 80047e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80047e8:	4b11      	ldr	r3, [pc, #68]	@ (8004830 <HAL_UART_MspInit+0x84>)
 80047ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ec:	2201      	movs	r2, #1
 80047ee:	4013      	ands	r3, r2
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80047f4:	0021      	movs	r1, r4
 80047f6:	187b      	adds	r3, r7, r1
 80047f8:	220c      	movs	r2, #12
 80047fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047fc:	187b      	adds	r3, r7, r1
 80047fe:	2202      	movs	r2, #2
 8004800:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004802:	187b      	adds	r3, r7, r1
 8004804:	2200      	movs	r2, #0
 8004806:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004808:	187b      	adds	r3, r7, r1
 800480a:	2203      	movs	r2, #3
 800480c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800480e:	187b      	adds	r3, r7, r1
 8004810:	2204      	movs	r2, #4
 8004812:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004814:	187a      	adds	r2, r7, r1
 8004816:	23a0      	movs	r3, #160	@ 0xa0
 8004818:	05db      	lsls	r3, r3, #23
 800481a:	0011      	movs	r1, r2
 800481c:	0018      	movs	r0, r3
 800481e:	f000 fa59 	bl	8004cd4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8004822:	46c0      	nop			@ (mov r8, r8)
 8004824:	46bd      	mov	sp, r7
 8004826:	b009      	add	sp, #36	@ 0x24
 8004828:	bd90      	pop	{r4, r7, pc}
 800482a:	46c0      	nop			@ (mov r8, r8)
 800482c:	40004400 	.word	0x40004400
 8004830:	40021000 	.word	0x40021000

08004834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004838:	46c0      	nop			@ (mov r8, r8)
 800483a:	e7fd      	b.n	8004838 <NMI_Handler+0x4>

0800483c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004840:	46c0      	nop			@ (mov r8, r8)
 8004842:	e7fd      	b.n	8004840 <HardFault_Handler+0x4>

08004844 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004848:	46c0      	nop			@ (mov r8, r8)
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004852:	46c0      	nop			@ (mov r8, r8)
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800485c:	f000 f946 	bl	8004aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004860:	46c0      	nop			@ (mov r8, r8)
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	af00      	add	r7, sp, #0
  return 1;
 800486a:	2301      	movs	r3, #1
}
 800486c:	0018      	movs	r0, r3
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <_kill>:

int _kill(int pid, int sig)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b082      	sub	sp, #8
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800487c:	f003 fd98 	bl	80083b0 <__errno>
 8004880:	0003      	movs	r3, r0
 8004882:	2216      	movs	r2, #22
 8004884:	601a      	str	r2, [r3, #0]
  return -1;
 8004886:	2301      	movs	r3, #1
 8004888:	425b      	negs	r3, r3
}
 800488a:	0018      	movs	r0, r3
 800488c:	46bd      	mov	sp, r7
 800488e:	b002      	add	sp, #8
 8004890:	bd80      	pop	{r7, pc}

08004892 <_exit>:

void _exit (int status)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b082      	sub	sp, #8
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800489a:	2301      	movs	r3, #1
 800489c:	425a      	negs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	0011      	movs	r1, r2
 80048a2:	0018      	movs	r0, r3
 80048a4:	f7ff ffe5 	bl	8004872 <_kill>
  while (1) {}    /* Make sure we hang here */
 80048a8:	46c0      	nop			@ (mov r8, r8)
 80048aa:	e7fd      	b.n	80048a8 <_exit+0x16>

080048ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048b8:	2300      	movs	r3, #0
 80048ba:	617b      	str	r3, [r7, #20]
 80048bc:	e00a      	b.n	80048d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80048be:	e000      	b.n	80048c2 <_read+0x16>
 80048c0:	bf00      	nop
 80048c2:	0001      	movs	r1, r0
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	60ba      	str	r2, [r7, #8]
 80048ca:	b2ca      	uxtb	r2, r1
 80048cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	3301      	adds	r3, #1
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	429a      	cmp	r2, r3
 80048da:	dbf0      	blt.n	80048be <_read+0x12>
  }

  return len;
 80048dc:	687b      	ldr	r3, [r7, #4]
}
 80048de:	0018      	movs	r0, r3
 80048e0:	46bd      	mov	sp, r7
 80048e2:	b006      	add	sp, #24
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b086      	sub	sp, #24
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	60f8      	str	r0, [r7, #12]
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048f2:	2300      	movs	r3, #0
 80048f4:	617b      	str	r3, [r7, #20]
 80048f6:	e009      	b.n	800490c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	60ba      	str	r2, [r7, #8]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	0018      	movs	r0, r3
 8004902:	f7ff f91d 	bl	8003b40 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	3301      	adds	r3, #1
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	429a      	cmp	r2, r3
 8004912:	dbf1      	blt.n	80048f8 <_write+0x12>
  }
  return len;
 8004914:	687b      	ldr	r3, [r7, #4]
}
 8004916:	0018      	movs	r0, r3
 8004918:	46bd      	mov	sp, r7
 800491a:	b006      	add	sp, #24
 800491c:	bd80      	pop	{r7, pc}

0800491e <_close>:

int _close(int file)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b082      	sub	sp, #8
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004926:	2301      	movs	r3, #1
 8004928:	425b      	negs	r3, r3
}
 800492a:	0018      	movs	r0, r3
 800492c:	46bd      	mov	sp, r7
 800492e:	b002      	add	sp, #8
 8004930:	bd80      	pop	{r7, pc}

08004932 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b082      	sub	sp, #8
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
 800493a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2280      	movs	r2, #128	@ 0x80
 8004940:	0192      	lsls	r2, r2, #6
 8004942:	605a      	str	r2, [r3, #4]
  return 0;
 8004944:	2300      	movs	r3, #0
}
 8004946:	0018      	movs	r0, r3
 8004948:	46bd      	mov	sp, r7
 800494a:	b002      	add	sp, #8
 800494c:	bd80      	pop	{r7, pc}

0800494e <_isatty>:

int _isatty(int file)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b082      	sub	sp, #8
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004956:	2301      	movs	r3, #1
}
 8004958:	0018      	movs	r0, r3
 800495a:	46bd      	mov	sp, r7
 800495c:	b002      	add	sp, #8
 800495e:	bd80      	pop	{r7, pc}

08004960 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800496c:	2300      	movs	r3, #0
}
 800496e:	0018      	movs	r0, r3
 8004970:	46bd      	mov	sp, r7
 8004972:	b004      	add	sp, #16
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004980:	4a14      	ldr	r2, [pc, #80]	@ (80049d4 <_sbrk+0x5c>)
 8004982:	4b15      	ldr	r3, [pc, #84]	@ (80049d8 <_sbrk+0x60>)
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800498c:	4b13      	ldr	r3, [pc, #76]	@ (80049dc <_sbrk+0x64>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d102      	bne.n	800499a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004994:	4b11      	ldr	r3, [pc, #68]	@ (80049dc <_sbrk+0x64>)
 8004996:	4a12      	ldr	r2, [pc, #72]	@ (80049e0 <_sbrk+0x68>)
 8004998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800499a:	4b10      	ldr	r3, [pc, #64]	@ (80049dc <_sbrk+0x64>)
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	18d3      	adds	r3, r2, r3
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d207      	bcs.n	80049b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80049a8:	f003 fd02 	bl	80083b0 <__errno>
 80049ac:	0003      	movs	r3, r0
 80049ae:	220c      	movs	r2, #12
 80049b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80049b2:	2301      	movs	r3, #1
 80049b4:	425b      	negs	r3, r3
 80049b6:	e009      	b.n	80049cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80049b8:	4b08      	ldr	r3, [pc, #32]	@ (80049dc <_sbrk+0x64>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80049be:	4b07      	ldr	r3, [pc, #28]	@ (80049dc <_sbrk+0x64>)
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	18d2      	adds	r2, r2, r3
 80049c6:	4b05      	ldr	r3, [pc, #20]	@ (80049dc <_sbrk+0x64>)
 80049c8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80049ca:	68fb      	ldr	r3, [r7, #12]
}
 80049cc:	0018      	movs	r0, r3
 80049ce:	46bd      	mov	sp, r7
 80049d0:	b006      	add	sp, #24
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	20005000 	.word	0x20005000
 80049d8:	00000400 	.word	0x00000400
 80049dc:	20000734 	.word	0x20000734
 80049e0:	20000888 	.word	0x20000888

080049e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80049e8:	46c0      	nop			@ (mov r8, r8)
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80049f0:	480d      	ldr	r0, [pc, #52]	@ (8004a28 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80049f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80049f4:	f7ff fff6 	bl	80049e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80049f8:	480c      	ldr	r0, [pc, #48]	@ (8004a2c <LoopForever+0x6>)
  ldr r1, =_edata
 80049fa:	490d      	ldr	r1, [pc, #52]	@ (8004a30 <LoopForever+0xa>)
  ldr r2, =_sidata
 80049fc:	4a0d      	ldr	r2, [pc, #52]	@ (8004a34 <LoopForever+0xe>)
  movs r3, #0
 80049fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a00:	e002      	b.n	8004a08 <LoopCopyDataInit>

08004a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a06:	3304      	adds	r3, #4

08004a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a0c:	d3f9      	bcc.n	8004a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8004a38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004a10:	4c0a      	ldr	r4, [pc, #40]	@ (8004a3c <LoopForever+0x16>)
  movs r3, #0
 8004a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a14:	e001      	b.n	8004a1a <LoopFillZerobss>

08004a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a18:	3204      	adds	r2, #4

08004a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a1c:	d3fb      	bcc.n	8004a16 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8004a1e:	f003 fccd 	bl	80083bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a22:	f7ff f89f 	bl	8003b64 <main>

08004a26 <LoopForever>:

LoopForever:
    b LoopForever
 8004a26:	e7fe      	b.n	8004a26 <LoopForever>
   ldr   r0, =_estack
 8004a28:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a30:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8004a34:	0800b48c 	.word	0x0800b48c
  ldr r2, =_sbss
 8004a38:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8004a3c:	20000888 	.word	0x20000888

08004a40 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a40:	e7fe      	b.n	8004a40 <ADC1_COMP_IRQHandler>
	...

08004a44 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004a4a:	1dfb      	adds	r3, r7, #7
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004a50:	4b0b      	ldr	r3, [pc, #44]	@ (8004a80 <HAL_Init+0x3c>)
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	4b0a      	ldr	r3, [pc, #40]	@ (8004a80 <HAL_Init+0x3c>)
 8004a56:	2140      	movs	r1, #64	@ 0x40
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	f000 f811 	bl	8004a84 <HAL_InitTick>
 8004a62:	1e03      	subs	r3, r0, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004a66:	1dfb      	adds	r3, r7, #7
 8004a68:	2201      	movs	r2, #1
 8004a6a:	701a      	strb	r2, [r3, #0]
 8004a6c:	e001      	b.n	8004a72 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004a6e:	f7ff fe43 	bl	80046f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004a72:	1dfb      	adds	r3, r7, #7
 8004a74:	781b      	ldrb	r3, [r3, #0]
}
 8004a76:	0018      	movs	r0, r3
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	b002      	add	sp, #8
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	46c0      	nop			@ (mov r8, r8)
 8004a80:	40022000 	.word	0x40022000

08004a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a84:	b590      	push	{r4, r7, lr}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a8c:	4b14      	ldr	r3, [pc, #80]	@ (8004ae0 <HAL_InitTick+0x5c>)
 8004a8e:	681c      	ldr	r4, [r3, #0]
 8004a90:	4b14      	ldr	r3, [pc, #80]	@ (8004ae4 <HAL_InitTick+0x60>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	0019      	movs	r1, r3
 8004a96:	23fa      	movs	r3, #250	@ 0xfa
 8004a98:	0098      	lsls	r0, r3, #2
 8004a9a:	f7fb fb51 	bl	8000140 <__udivsi3>
 8004a9e:	0003      	movs	r3, r0
 8004aa0:	0019      	movs	r1, r3
 8004aa2:	0020      	movs	r0, r4
 8004aa4:	f7fb fb4c 	bl	8000140 <__udivsi3>
 8004aa8:	0003      	movs	r3, r0
 8004aaa:	0018      	movs	r0, r3
 8004aac:	f000 f905 	bl	8004cba <HAL_SYSTICK_Config>
 8004ab0:	1e03      	subs	r3, r0, #0
 8004ab2:	d001      	beq.n	8004ab8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e00f      	b.n	8004ad8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d80b      	bhi.n	8004ad6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004abe:	6879      	ldr	r1, [r7, #4]
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	425b      	negs	r3, r3
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	f000 f8e2 	bl	8004c90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004acc:	4b06      	ldr	r3, [pc, #24]	@ (8004ae8 <HAL_InitTick+0x64>)
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	e000      	b.n	8004ad8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
}
 8004ad8:	0018      	movs	r0, r3
 8004ada:	46bd      	mov	sp, r7
 8004adc:	b003      	add	sp, #12
 8004ade:	bd90      	pop	{r4, r7, pc}
 8004ae0:	20000000 	.word	0x20000000
 8004ae4:	20000008 	.word	0x20000008
 8004ae8:	20000004 	.word	0x20000004

08004aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004af0:	4b05      	ldr	r3, [pc, #20]	@ (8004b08 <HAL_IncTick+0x1c>)
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	001a      	movs	r2, r3
 8004af6:	4b05      	ldr	r3, [pc, #20]	@ (8004b0c <HAL_IncTick+0x20>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	18d2      	adds	r2, r2, r3
 8004afc:	4b03      	ldr	r3, [pc, #12]	@ (8004b0c <HAL_IncTick+0x20>)
 8004afe:	601a      	str	r2, [r3, #0]
}
 8004b00:	46c0      	nop			@ (mov r8, r8)
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	46c0      	nop			@ (mov r8, r8)
 8004b08:	20000008 	.word	0x20000008
 8004b0c:	20000738 	.word	0x20000738

08004b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  return uwTick;
 8004b14:	4b02      	ldr	r3, [pc, #8]	@ (8004b20 <HAL_GetTick+0x10>)
 8004b16:	681b      	ldr	r3, [r3, #0]
}
 8004b18:	0018      	movs	r0, r3
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	46c0      	nop			@ (mov r8, r8)
 8004b20:	20000738 	.word	0x20000738

08004b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b2c:	f7ff fff0 	bl	8004b10 <HAL_GetTick>
 8004b30:	0003      	movs	r3, r0
 8004b32:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	d005      	beq.n	8004b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b68 <HAL_Delay+0x44>)
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	001a      	movs	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	189b      	adds	r3, r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b4a:	46c0      	nop			@ (mov r8, r8)
 8004b4c:	f7ff ffe0 	bl	8004b10 <HAL_GetTick>
 8004b50:	0002      	movs	r2, r0
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d8f7      	bhi.n	8004b4c <HAL_Delay+0x28>
  {
  }
}
 8004b5c:	46c0      	nop			@ (mov r8, r8)
 8004b5e:	46c0      	nop			@ (mov r8, r8)
 8004b60:	46bd      	mov	sp, r7
 8004b62:	b004      	add	sp, #16
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	46c0      	nop			@ (mov r8, r8)
 8004b68:	20000008 	.word	0x20000008

08004b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b6c:	b590      	push	{r4, r7, lr}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	0002      	movs	r2, r0
 8004b74:	6039      	str	r1, [r7, #0]
 8004b76:	1dfb      	adds	r3, r7, #7
 8004b78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004b7a:	1dfb      	adds	r3, r7, #7
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b80:	d828      	bhi.n	8004bd4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b82:	4a2f      	ldr	r2, [pc, #188]	@ (8004c40 <__NVIC_SetPriority+0xd4>)
 8004b84:	1dfb      	adds	r3, r7, #7
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	b25b      	sxtb	r3, r3
 8004b8a:	089b      	lsrs	r3, r3, #2
 8004b8c:	33c0      	adds	r3, #192	@ 0xc0
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	589b      	ldr	r3, [r3, r2]
 8004b92:	1dfa      	adds	r2, r7, #7
 8004b94:	7812      	ldrb	r2, [r2, #0]
 8004b96:	0011      	movs	r1, r2
 8004b98:	2203      	movs	r2, #3
 8004b9a:	400a      	ands	r2, r1
 8004b9c:	00d2      	lsls	r2, r2, #3
 8004b9e:	21ff      	movs	r1, #255	@ 0xff
 8004ba0:	4091      	lsls	r1, r2
 8004ba2:	000a      	movs	r2, r1
 8004ba4:	43d2      	mvns	r2, r2
 8004ba6:	401a      	ands	r2, r3
 8004ba8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	019b      	lsls	r3, r3, #6
 8004bae:	22ff      	movs	r2, #255	@ 0xff
 8004bb0:	401a      	ands	r2, r3
 8004bb2:	1dfb      	adds	r3, r7, #7
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	2303      	movs	r3, #3
 8004bba:	4003      	ands	r3, r0
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004bc0:	481f      	ldr	r0, [pc, #124]	@ (8004c40 <__NVIC_SetPriority+0xd4>)
 8004bc2:	1dfb      	adds	r3, r7, #7
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	b25b      	sxtb	r3, r3
 8004bc8:	089b      	lsrs	r3, r3, #2
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	33c0      	adds	r3, #192	@ 0xc0
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004bd2:	e031      	b.n	8004c38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8004c44 <__NVIC_SetPriority+0xd8>)
 8004bd6:	1dfb      	adds	r3, r7, #7
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	0019      	movs	r1, r3
 8004bdc:	230f      	movs	r3, #15
 8004bde:	400b      	ands	r3, r1
 8004be0:	3b08      	subs	r3, #8
 8004be2:	089b      	lsrs	r3, r3, #2
 8004be4:	3306      	adds	r3, #6
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	18d3      	adds	r3, r2, r3
 8004bea:	3304      	adds	r3, #4
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	1dfa      	adds	r2, r7, #7
 8004bf0:	7812      	ldrb	r2, [r2, #0]
 8004bf2:	0011      	movs	r1, r2
 8004bf4:	2203      	movs	r2, #3
 8004bf6:	400a      	ands	r2, r1
 8004bf8:	00d2      	lsls	r2, r2, #3
 8004bfa:	21ff      	movs	r1, #255	@ 0xff
 8004bfc:	4091      	lsls	r1, r2
 8004bfe:	000a      	movs	r2, r1
 8004c00:	43d2      	mvns	r2, r2
 8004c02:	401a      	ands	r2, r3
 8004c04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	019b      	lsls	r3, r3, #6
 8004c0a:	22ff      	movs	r2, #255	@ 0xff
 8004c0c:	401a      	ands	r2, r3
 8004c0e:	1dfb      	adds	r3, r7, #7
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	0018      	movs	r0, r3
 8004c14:	2303      	movs	r3, #3
 8004c16:	4003      	ands	r3, r0
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c1c:	4809      	ldr	r0, [pc, #36]	@ (8004c44 <__NVIC_SetPriority+0xd8>)
 8004c1e:	1dfb      	adds	r3, r7, #7
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	001c      	movs	r4, r3
 8004c24:	230f      	movs	r3, #15
 8004c26:	4023      	ands	r3, r4
 8004c28:	3b08      	subs	r3, #8
 8004c2a:	089b      	lsrs	r3, r3, #2
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	3306      	adds	r3, #6
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	18c3      	adds	r3, r0, r3
 8004c34:	3304      	adds	r3, #4
 8004c36:	601a      	str	r2, [r3, #0]
}
 8004c38:	46c0      	nop			@ (mov r8, r8)
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	b003      	add	sp, #12
 8004c3e:	bd90      	pop	{r4, r7, pc}
 8004c40:	e000e100 	.word	0xe000e100
 8004c44:	e000ed00 	.word	0xe000ed00

08004c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	1e5a      	subs	r2, r3, #1
 8004c54:	2380      	movs	r3, #128	@ 0x80
 8004c56:	045b      	lsls	r3, r3, #17
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d301      	bcc.n	8004c60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e010      	b.n	8004c82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c60:	4b0a      	ldr	r3, [pc, #40]	@ (8004c8c <SysTick_Config+0x44>)
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	3a01      	subs	r2, #1
 8004c66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c68:	2301      	movs	r3, #1
 8004c6a:	425b      	negs	r3, r3
 8004c6c:	2103      	movs	r1, #3
 8004c6e:	0018      	movs	r0, r3
 8004c70:	f7ff ff7c 	bl	8004b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c74:	4b05      	ldr	r3, [pc, #20]	@ (8004c8c <SysTick_Config+0x44>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c7a:	4b04      	ldr	r3, [pc, #16]	@ (8004c8c <SysTick_Config+0x44>)
 8004c7c:	2207      	movs	r2, #7
 8004c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	0018      	movs	r0, r3
 8004c84:	46bd      	mov	sp, r7
 8004c86:	b002      	add	sp, #8
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	46c0      	nop			@ (mov r8, r8)
 8004c8c:	e000e010 	.word	0xe000e010

08004c90 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60b9      	str	r1, [r7, #8]
 8004c98:	607a      	str	r2, [r7, #4]
 8004c9a:	210f      	movs	r1, #15
 8004c9c:	187b      	adds	r3, r7, r1
 8004c9e:	1c02      	adds	r2, r0, #0
 8004ca0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	187b      	adds	r3, r7, r1
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	b25b      	sxtb	r3, r3
 8004caa:	0011      	movs	r1, r2
 8004cac:	0018      	movs	r0, r3
 8004cae:	f7ff ff5d 	bl	8004b6c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8004cb2:	46c0      	nop			@ (mov r8, r8)
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	b004      	add	sp, #16
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b082      	sub	sp, #8
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	f7ff ffbf 	bl	8004c48 <SysTick_Config>
 8004cca:	0003      	movs	r3, r0
}
 8004ccc:	0018      	movs	r0, r3
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	b002      	add	sp, #8
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004cea:	e155      	b.n	8004f98 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	4091      	lsls	r1, r2
 8004cf6:	000a      	movs	r2, r1
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d100      	bne.n	8004d04 <HAL_GPIO_Init+0x30>
 8004d02:	e146      	b.n	8004f92 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2203      	movs	r2, #3
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d005      	beq.n	8004d1c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2203      	movs	r2, #3
 8004d16:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d130      	bne.n	8004d7e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	2203      	movs	r2, #3
 8004d28:	409a      	lsls	r2, r3
 8004d2a:	0013      	movs	r3, r2
 8004d2c:	43da      	mvns	r2, r3
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	4013      	ands	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	68da      	ldr	r2, [r3, #12]
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	409a      	lsls	r2, r3
 8004d3e:	0013      	movs	r3, r2
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d52:	2201      	movs	r2, #1
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	409a      	lsls	r2, r3
 8004d58:	0013      	movs	r3, r2
 8004d5a:	43da      	mvns	r2, r3
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	091b      	lsrs	r3, r3, #4
 8004d68:	2201      	movs	r2, #1
 8004d6a:	401a      	ands	r2, r3
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	409a      	lsls	r2, r3
 8004d70:	0013      	movs	r3, r2
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2203      	movs	r2, #3
 8004d84:	4013      	ands	r3, r2
 8004d86:	2b03      	cmp	r3, #3
 8004d88:	d017      	beq.n	8004dba <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	2203      	movs	r2, #3
 8004d96:	409a      	lsls	r2, r3
 8004d98:	0013      	movs	r3, r2
 8004d9a:	43da      	mvns	r2, r3
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	689a      	ldr	r2, [r3, #8]
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	409a      	lsls	r2, r3
 8004dac:	0013      	movs	r3, r2
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2203      	movs	r2, #3
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d123      	bne.n	8004e0e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	08da      	lsrs	r2, r3, #3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	3208      	adds	r2, #8
 8004dce:	0092      	lsls	r2, r2, #2
 8004dd0:	58d3      	ldr	r3, [r2, r3]
 8004dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	2207      	movs	r2, #7
 8004dd8:	4013      	ands	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	220f      	movs	r2, #15
 8004dde:	409a      	lsls	r2, r3
 8004de0:	0013      	movs	r3, r2
 8004de2:	43da      	mvns	r2, r3
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	4013      	ands	r3, r2
 8004de8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	691a      	ldr	r2, [r3, #16]
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2107      	movs	r1, #7
 8004df2:	400b      	ands	r3, r1
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	409a      	lsls	r2, r3
 8004df8:	0013      	movs	r3, r2
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	08da      	lsrs	r2, r3, #3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3208      	adds	r2, #8
 8004e08:	0092      	lsls	r2, r2, #2
 8004e0a:	6939      	ldr	r1, [r7, #16]
 8004e0c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	005b      	lsls	r3, r3, #1
 8004e18:	2203      	movs	r2, #3
 8004e1a:	409a      	lsls	r2, r3
 8004e1c:	0013      	movs	r3, r2
 8004e1e:	43da      	mvns	r2, r3
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	4013      	ands	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	2203      	movs	r2, #3
 8004e2c:	401a      	ands	r2, r3
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	409a      	lsls	r2, r3
 8004e34:	0013      	movs	r3, r2
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	23c0      	movs	r3, #192	@ 0xc0
 8004e48:	029b      	lsls	r3, r3, #10
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d100      	bne.n	8004e50 <HAL_GPIO_Init+0x17c>
 8004e4e:	e0a0      	b.n	8004f92 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e50:	4b57      	ldr	r3, [pc, #348]	@ (8004fb0 <HAL_GPIO_Init+0x2dc>)
 8004e52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e54:	4b56      	ldr	r3, [pc, #344]	@ (8004fb0 <HAL_GPIO_Init+0x2dc>)
 8004e56:	2101      	movs	r1, #1
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e5c:	4a55      	ldr	r2, [pc, #340]	@ (8004fb4 <HAL_GPIO_Init+0x2e0>)
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	089b      	lsrs	r3, r3, #2
 8004e62:	3302      	adds	r3, #2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	589b      	ldr	r3, [r3, r2]
 8004e68:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2203      	movs	r2, #3
 8004e6e:	4013      	ands	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	220f      	movs	r2, #15
 8004e74:	409a      	lsls	r2, r3
 8004e76:	0013      	movs	r3, r2
 8004e78:	43da      	mvns	r2, r3
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	23a0      	movs	r3, #160	@ 0xa0
 8004e84:	05db      	lsls	r3, r3, #23
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d01f      	beq.n	8004eca <HAL_GPIO_Init+0x1f6>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a4a      	ldr	r2, [pc, #296]	@ (8004fb8 <HAL_GPIO_Init+0x2e4>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d019      	beq.n	8004ec6 <HAL_GPIO_Init+0x1f2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a49      	ldr	r2, [pc, #292]	@ (8004fbc <HAL_GPIO_Init+0x2e8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d013      	beq.n	8004ec2 <HAL_GPIO_Init+0x1ee>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a48      	ldr	r2, [pc, #288]	@ (8004fc0 <HAL_GPIO_Init+0x2ec>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d00d      	beq.n	8004ebe <HAL_GPIO_Init+0x1ea>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a47      	ldr	r2, [pc, #284]	@ (8004fc4 <HAL_GPIO_Init+0x2f0>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d007      	beq.n	8004eba <HAL_GPIO_Init+0x1e6>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a46      	ldr	r2, [pc, #280]	@ (8004fc8 <HAL_GPIO_Init+0x2f4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d101      	bne.n	8004eb6 <HAL_GPIO_Init+0x1e2>
 8004eb2:	2305      	movs	r3, #5
 8004eb4:	e00a      	b.n	8004ecc <HAL_GPIO_Init+0x1f8>
 8004eb6:	2306      	movs	r3, #6
 8004eb8:	e008      	b.n	8004ecc <HAL_GPIO_Init+0x1f8>
 8004eba:	2304      	movs	r3, #4
 8004ebc:	e006      	b.n	8004ecc <HAL_GPIO_Init+0x1f8>
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e004      	b.n	8004ecc <HAL_GPIO_Init+0x1f8>
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	e002      	b.n	8004ecc <HAL_GPIO_Init+0x1f8>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e000      	b.n	8004ecc <HAL_GPIO_Init+0x1f8>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	2103      	movs	r1, #3
 8004ed0:	400a      	ands	r2, r1
 8004ed2:	0092      	lsls	r2, r2, #2
 8004ed4:	4093      	lsls	r3, r2
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004edc:	4935      	ldr	r1, [pc, #212]	@ (8004fb4 <HAL_GPIO_Init+0x2e0>)
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	089b      	lsrs	r3, r3, #2
 8004ee2:	3302      	adds	r3, #2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004eea:	4b38      	ldr	r3, [pc, #224]	@ (8004fcc <HAL_GPIO_Init+0x2f8>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	43da      	mvns	r2, r3
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	2380      	movs	r3, #128	@ 0x80
 8004f00:	035b      	lsls	r3, r3, #13
 8004f02:	4013      	ands	r3, r2
 8004f04:	d003      	beq.n	8004f0e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004f0e:	4b2f      	ldr	r3, [pc, #188]	@ (8004fcc <HAL_GPIO_Init+0x2f8>)
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004f14:	4b2d      	ldr	r3, [pc, #180]	@ (8004fcc <HAL_GPIO_Init+0x2f8>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	43da      	mvns	r2, r3
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	4013      	ands	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	2380      	movs	r3, #128	@ 0x80
 8004f2a:	039b      	lsls	r3, r3, #14
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	d003      	beq.n	8004f38 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004f38:	4b24      	ldr	r3, [pc, #144]	@ (8004fcc <HAL_GPIO_Init+0x2f8>)
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8004f3e:	4b23      	ldr	r3, [pc, #140]	@ (8004fcc <HAL_GPIO_Init+0x2f8>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	43da      	mvns	r2, r3
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	2380      	movs	r3, #128	@ 0x80
 8004f54:	029b      	lsls	r3, r3, #10
 8004f56:	4013      	ands	r3, r2
 8004f58:	d003      	beq.n	8004f62 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004f62:	4b1a      	ldr	r3, [pc, #104]	@ (8004fcc <HAL_GPIO_Init+0x2f8>)
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f68:	4b18      	ldr	r3, [pc, #96]	@ (8004fcc <HAL_GPIO_Init+0x2f8>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	43da      	mvns	r2, r3
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	4013      	ands	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	2380      	movs	r3, #128	@ 0x80
 8004f7e:	025b      	lsls	r3, r3, #9
 8004f80:	4013      	ands	r3, r2
 8004f82:	d003      	beq.n	8004f8c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8004fcc <HAL_GPIO_Init+0x2f8>)
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	3301      	adds	r3, #1
 8004f96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	40da      	lsrs	r2, r3
 8004fa0:	1e13      	subs	r3, r2, #0
 8004fa2:	d000      	beq.n	8004fa6 <HAL_GPIO_Init+0x2d2>
 8004fa4:	e6a2      	b.n	8004cec <HAL_GPIO_Init+0x18>
  }
}
 8004fa6:	46c0      	nop			@ (mov r8, r8)
 8004fa8:	46c0      	nop			@ (mov r8, r8)
 8004faa:	46bd      	mov	sp, r7
 8004fac:	b006      	add	sp, #24
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	40010000 	.word	0x40010000
 8004fb8:	50000400 	.word	0x50000400
 8004fbc:	50000800 	.word	0x50000800
 8004fc0:	50000c00 	.word	0x50000c00
 8004fc4:	50001000 	.word	0x50001000
 8004fc8:	50001c00 	.word	0x50001c00
 8004fcc:	40010400 	.word	0x40010400

08004fd0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	0008      	movs	r0, r1
 8004fda:	0011      	movs	r1, r2
 8004fdc:	1cbb      	adds	r3, r7, #2
 8004fde:	1c02      	adds	r2, r0, #0
 8004fe0:	801a      	strh	r2, [r3, #0]
 8004fe2:	1c7b      	adds	r3, r7, #1
 8004fe4:	1c0a      	adds	r2, r1, #0
 8004fe6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fe8:	1c7b      	adds	r3, r7, #1
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d004      	beq.n	8004ffa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ff0:	1cbb      	adds	r3, r7, #2
 8004ff2:	881a      	ldrh	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004ff8:	e003      	b.n	8005002 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004ffa:	1cbb      	adds	r3, r7, #2
 8004ffc:	881a      	ldrh	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005002:	46c0      	nop			@ (mov r8, r8)
 8005004:	46bd      	mov	sp, r7
 8005006:	b002      	add	sp, #8
 8005008:	bd80      	pop	{r7, pc}

0800500a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b084      	sub	sp, #16
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	000a      	movs	r2, r1
 8005014:	1cbb      	adds	r3, r7, #2
 8005016:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800501e:	1cbb      	adds	r3, r7, #2
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	4013      	ands	r3, r2
 8005026:	041a      	lsls	r2, r3, #16
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	43db      	mvns	r3, r3
 800502c:	1cb9      	adds	r1, r7, #2
 800502e:	8809      	ldrh	r1, [r1, #0]
 8005030:	400b      	ands	r3, r1
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	619a      	str	r2, [r3, #24]
}
 8005038:	46c0      	nop			@ (mov r8, r8)
 800503a:	46bd      	mov	sp, r7
 800503c:	b004      	add	sp, #16
 800503e:	bd80      	pop	{r7, pc}

08005040 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e08f      	b.n	8005172 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2241      	movs	r2, #65	@ 0x41
 8005056:	5c9b      	ldrb	r3, [r3, r2]
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d107      	bne.n	800506e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2240      	movs	r2, #64	@ 0x40
 8005062:	2100      	movs	r1, #0
 8005064:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	0018      	movs	r0, r3
 800506a:	f7ff fb59 	bl	8004720 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2241      	movs	r2, #65	@ 0x41
 8005072:	2124      	movs	r1, #36	@ 0x24
 8005074:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2101      	movs	r1, #1
 8005082:	438a      	bics	r2, r1
 8005084:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	493b      	ldr	r1, [pc, #236]	@ (800517c <HAL_I2C_Init+0x13c>)
 8005090:	400a      	ands	r2, r1
 8005092:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4938      	ldr	r1, [pc, #224]	@ (8005180 <HAL_I2C_Init+0x140>)
 80050a0:	400a      	ands	r2, r1
 80050a2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d108      	bne.n	80050be <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2180      	movs	r1, #128	@ 0x80
 80050b6:	0209      	lsls	r1, r1, #8
 80050b8:	430a      	orrs	r2, r1
 80050ba:	609a      	str	r2, [r3, #8]
 80050bc:	e007      	b.n	80050ce <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2184      	movs	r1, #132	@ 0x84
 80050c8:	0209      	lsls	r1, r1, #8
 80050ca:	430a      	orrs	r2, r1
 80050cc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d109      	bne.n	80050ea <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2180      	movs	r1, #128	@ 0x80
 80050e2:	0109      	lsls	r1, r1, #4
 80050e4:	430a      	orrs	r2, r1
 80050e6:	605a      	str	r2, [r3, #4]
 80050e8:	e007      	b.n	80050fa <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4923      	ldr	r1, [pc, #140]	@ (8005184 <HAL_I2C_Init+0x144>)
 80050f6:	400a      	ands	r2, r1
 80050f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4920      	ldr	r1, [pc, #128]	@ (8005188 <HAL_I2C_Init+0x148>)
 8005106:	430a      	orrs	r2, r1
 8005108:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68da      	ldr	r2, [r3, #12]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	491a      	ldr	r1, [pc, #104]	@ (8005180 <HAL_I2C_Init+0x140>)
 8005116:	400a      	ands	r2, r1
 8005118:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691a      	ldr	r2, [r3, #16]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	431a      	orrs	r2, r3
 8005124:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	69d9      	ldr	r1, [r3, #28]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a1a      	ldr	r2, [r3, #32]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2101      	movs	r1, #1
 8005150:	430a      	orrs	r2, r1
 8005152:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2241      	movs	r2, #65	@ 0x41
 800515e:	2120      	movs	r1, #32
 8005160:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2242      	movs	r2, #66	@ 0x42
 800516c:	2100      	movs	r1, #0
 800516e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	0018      	movs	r0, r3
 8005174:	46bd      	mov	sp, r7
 8005176:	b002      	add	sp, #8
 8005178:	bd80      	pop	{r7, pc}
 800517a:	46c0      	nop			@ (mov r8, r8)
 800517c:	f0ffffff 	.word	0xf0ffffff
 8005180:	ffff7fff 	.word	0xffff7fff
 8005184:	fffff7ff 	.word	0xfffff7ff
 8005188:	02008000 	.word	0x02008000

0800518c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800518c:	b590      	push	{r4, r7, lr}
 800518e:	b089      	sub	sp, #36	@ 0x24
 8005190:	af02      	add	r7, sp, #8
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	000c      	movs	r4, r1
 8005196:	0010      	movs	r0, r2
 8005198:	0019      	movs	r1, r3
 800519a:	230a      	movs	r3, #10
 800519c:	18fb      	adds	r3, r7, r3
 800519e:	1c22      	adds	r2, r4, #0
 80051a0:	801a      	strh	r2, [r3, #0]
 80051a2:	2308      	movs	r3, #8
 80051a4:	18fb      	adds	r3, r7, r3
 80051a6:	1c02      	adds	r2, r0, #0
 80051a8:	801a      	strh	r2, [r3, #0]
 80051aa:	1dbb      	adds	r3, r7, #6
 80051ac:	1c0a      	adds	r2, r1, #0
 80051ae:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2241      	movs	r2, #65	@ 0x41
 80051b4:	5c9b      	ldrb	r3, [r3, r2]
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b20      	cmp	r3, #32
 80051ba:	d000      	beq.n	80051be <HAL_I2C_Mem_Write+0x32>
 80051bc:	e10c      	b.n	80053d8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d004      	beq.n	80051ce <HAL_I2C_Mem_Write+0x42>
 80051c4:	232c      	movs	r3, #44	@ 0x2c
 80051c6:	18fb      	adds	r3, r7, r3
 80051c8:	881b      	ldrh	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d105      	bne.n	80051da <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2280      	movs	r2, #128	@ 0x80
 80051d2:	0092      	lsls	r2, r2, #2
 80051d4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e0ff      	b.n	80053da <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2240      	movs	r2, #64	@ 0x40
 80051de:	5c9b      	ldrb	r3, [r3, r2]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <HAL_I2C_Mem_Write+0x5c>
 80051e4:	2302      	movs	r3, #2
 80051e6:	e0f8      	b.n	80053da <HAL_I2C_Mem_Write+0x24e>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2240      	movs	r2, #64	@ 0x40
 80051ec:	2101      	movs	r1, #1
 80051ee:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80051f0:	f7ff fc8e 	bl	8004b10 <HAL_GetTick>
 80051f4:	0003      	movs	r3, r0
 80051f6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80051f8:	2380      	movs	r3, #128	@ 0x80
 80051fa:	0219      	lsls	r1, r3, #8
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	2319      	movs	r3, #25
 8005204:	2201      	movs	r2, #1
 8005206:	f000 fb0b 	bl	8005820 <I2C_WaitOnFlagUntilTimeout>
 800520a:	1e03      	subs	r3, r0, #0
 800520c:	d001      	beq.n	8005212 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e0e3      	b.n	80053da <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2241      	movs	r2, #65	@ 0x41
 8005216:	2121      	movs	r1, #33	@ 0x21
 8005218:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2242      	movs	r2, #66	@ 0x42
 800521e:	2140      	movs	r1, #64	@ 0x40
 8005220:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800522c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	222c      	movs	r2, #44	@ 0x2c
 8005232:	18ba      	adds	r2, r7, r2
 8005234:	8812      	ldrh	r2, [r2, #0]
 8005236:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800523e:	1dbb      	adds	r3, r7, #6
 8005240:	881c      	ldrh	r4, [r3, #0]
 8005242:	2308      	movs	r3, #8
 8005244:	18fb      	adds	r3, r7, r3
 8005246:	881a      	ldrh	r2, [r3, #0]
 8005248:	230a      	movs	r3, #10
 800524a:	18fb      	adds	r3, r7, r3
 800524c:	8819      	ldrh	r1, [r3, #0]
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	9301      	str	r3, [sp, #4]
 8005254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	0023      	movs	r3, r4
 800525a:	f000 f9f9 	bl	8005650 <I2C_RequestMemoryWrite>
 800525e:	1e03      	subs	r3, r0, #0
 8005260:	d005      	beq.n	800526e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2240      	movs	r2, #64	@ 0x40
 8005266:	2100      	movs	r1, #0
 8005268:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e0b5      	b.n	80053da <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005272:	b29b      	uxth	r3, r3
 8005274:	2bff      	cmp	r3, #255	@ 0xff
 8005276:	d911      	bls.n	800529c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	22ff      	movs	r2, #255	@ 0xff
 800527c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005282:	b2da      	uxtb	r2, r3
 8005284:	2380      	movs	r3, #128	@ 0x80
 8005286:	045c      	lsls	r4, r3, #17
 8005288:	230a      	movs	r3, #10
 800528a:	18fb      	adds	r3, r7, r3
 800528c:	8819      	ldrh	r1, [r3, #0]
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	2300      	movs	r3, #0
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	0023      	movs	r3, r4
 8005296:	f000 fc9d 	bl	8005bd4 <I2C_TransferConfig>
 800529a:	e012      	b.n	80052c2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	2380      	movs	r3, #128	@ 0x80
 80052ae:	049c      	lsls	r4, r3, #18
 80052b0:	230a      	movs	r3, #10
 80052b2:	18fb      	adds	r3, r7, r3
 80052b4:	8819      	ldrh	r1, [r3, #0]
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	2300      	movs	r3, #0
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	0023      	movs	r3, r4
 80052be:	f000 fc89 	bl	8005bd4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	0018      	movs	r0, r3
 80052ca:	f000 fb01 	bl	80058d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80052ce:	1e03      	subs	r3, r0, #0
 80052d0:	d001      	beq.n	80052d6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e081      	b.n	80053da <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052da:	781a      	ldrb	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e6:	1c5a      	adds	r2, r3, #1
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052fe:	3b01      	subs	r3, #1
 8005300:	b29a      	uxth	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800530a:	b29b      	uxth	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d03a      	beq.n	8005386 <HAL_I2C_Mem_Write+0x1fa>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005314:	2b00      	cmp	r3, #0
 8005316:	d136      	bne.n	8005386 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005318:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	0013      	movs	r3, r2
 8005322:	2200      	movs	r2, #0
 8005324:	2180      	movs	r1, #128	@ 0x80
 8005326:	f000 fa7b 	bl	8005820 <I2C_WaitOnFlagUntilTimeout>
 800532a:	1e03      	subs	r3, r0, #0
 800532c:	d001      	beq.n	8005332 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e053      	b.n	80053da <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005336:	b29b      	uxth	r3, r3
 8005338:	2bff      	cmp	r3, #255	@ 0xff
 800533a:	d911      	bls.n	8005360 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	22ff      	movs	r2, #255	@ 0xff
 8005340:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005346:	b2da      	uxtb	r2, r3
 8005348:	2380      	movs	r3, #128	@ 0x80
 800534a:	045c      	lsls	r4, r3, #17
 800534c:	230a      	movs	r3, #10
 800534e:	18fb      	adds	r3, r7, r3
 8005350:	8819      	ldrh	r1, [r3, #0]
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	2300      	movs	r3, #0
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	0023      	movs	r3, r4
 800535a:	f000 fc3b 	bl	8005bd4 <I2C_TransferConfig>
 800535e:	e012      	b.n	8005386 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800536e:	b2da      	uxtb	r2, r3
 8005370:	2380      	movs	r3, #128	@ 0x80
 8005372:	049c      	lsls	r4, r3, #18
 8005374:	230a      	movs	r3, #10
 8005376:	18fb      	adds	r3, r7, r3
 8005378:	8819      	ldrh	r1, [r3, #0]
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	2300      	movs	r3, #0
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	0023      	movs	r3, r4
 8005382:	f000 fc27 	bl	8005bd4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800538a:	b29b      	uxth	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d198      	bne.n	80052c2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	0018      	movs	r0, r3
 8005398:	f000 fae0 	bl	800595c <I2C_WaitOnSTOPFlagUntilTimeout>
 800539c:	1e03      	subs	r3, r0, #0
 800539e:	d001      	beq.n	80053a4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e01a      	b.n	80053da <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2220      	movs	r2, #32
 80053aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	490b      	ldr	r1, [pc, #44]	@ (80053e4 <HAL_I2C_Mem_Write+0x258>)
 80053b8:	400a      	ands	r2, r1
 80053ba:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2241      	movs	r2, #65	@ 0x41
 80053c0:	2120      	movs	r1, #32
 80053c2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2242      	movs	r2, #66	@ 0x42
 80053c8:	2100      	movs	r1, #0
 80053ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2240      	movs	r2, #64	@ 0x40
 80053d0:	2100      	movs	r1, #0
 80053d2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80053d4:	2300      	movs	r3, #0
 80053d6:	e000      	b.n	80053da <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80053d8:	2302      	movs	r3, #2
  }
}
 80053da:	0018      	movs	r0, r3
 80053dc:	46bd      	mov	sp, r7
 80053de:	b007      	add	sp, #28
 80053e0:	bd90      	pop	{r4, r7, pc}
 80053e2:	46c0      	nop			@ (mov r8, r8)
 80053e4:	fe00e800 	.word	0xfe00e800

080053e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053e8:	b590      	push	{r4, r7, lr}
 80053ea:	b089      	sub	sp, #36	@ 0x24
 80053ec:	af02      	add	r7, sp, #8
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	000c      	movs	r4, r1
 80053f2:	0010      	movs	r0, r2
 80053f4:	0019      	movs	r1, r3
 80053f6:	230a      	movs	r3, #10
 80053f8:	18fb      	adds	r3, r7, r3
 80053fa:	1c22      	adds	r2, r4, #0
 80053fc:	801a      	strh	r2, [r3, #0]
 80053fe:	2308      	movs	r3, #8
 8005400:	18fb      	adds	r3, r7, r3
 8005402:	1c02      	adds	r2, r0, #0
 8005404:	801a      	strh	r2, [r3, #0]
 8005406:	1dbb      	adds	r3, r7, #6
 8005408:	1c0a      	adds	r2, r1, #0
 800540a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2241      	movs	r2, #65	@ 0x41
 8005410:	5c9b      	ldrb	r3, [r3, r2]
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b20      	cmp	r3, #32
 8005416:	d000      	beq.n	800541a <HAL_I2C_Mem_Read+0x32>
 8005418:	e110      	b.n	800563c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800541a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541c:	2b00      	cmp	r3, #0
 800541e:	d004      	beq.n	800542a <HAL_I2C_Mem_Read+0x42>
 8005420:	232c      	movs	r3, #44	@ 0x2c
 8005422:	18fb      	adds	r3, r7, r3
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d105      	bne.n	8005436 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2280      	movs	r2, #128	@ 0x80
 800542e:	0092      	lsls	r2, r2, #2
 8005430:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e103      	b.n	800563e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2240      	movs	r2, #64	@ 0x40
 800543a:	5c9b      	ldrb	r3, [r3, r2]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d101      	bne.n	8005444 <HAL_I2C_Mem_Read+0x5c>
 8005440:	2302      	movs	r3, #2
 8005442:	e0fc      	b.n	800563e <HAL_I2C_Mem_Read+0x256>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2240      	movs	r2, #64	@ 0x40
 8005448:	2101      	movs	r1, #1
 800544a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800544c:	f7ff fb60 	bl	8004b10 <HAL_GetTick>
 8005450:	0003      	movs	r3, r0
 8005452:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005454:	2380      	movs	r3, #128	@ 0x80
 8005456:	0219      	lsls	r1, r3, #8
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	2319      	movs	r3, #25
 8005460:	2201      	movs	r2, #1
 8005462:	f000 f9dd 	bl	8005820 <I2C_WaitOnFlagUntilTimeout>
 8005466:	1e03      	subs	r3, r0, #0
 8005468:	d001      	beq.n	800546e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e0e7      	b.n	800563e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2241      	movs	r2, #65	@ 0x41
 8005472:	2122      	movs	r1, #34	@ 0x22
 8005474:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2242      	movs	r2, #66	@ 0x42
 800547a:	2140      	movs	r1, #64	@ 0x40
 800547c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005488:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	222c      	movs	r2, #44	@ 0x2c
 800548e:	18ba      	adds	r2, r7, r2
 8005490:	8812      	ldrh	r2, [r2, #0]
 8005492:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800549a:	1dbb      	adds	r3, r7, #6
 800549c:	881c      	ldrh	r4, [r3, #0]
 800549e:	2308      	movs	r3, #8
 80054a0:	18fb      	adds	r3, r7, r3
 80054a2:	881a      	ldrh	r2, [r3, #0]
 80054a4:	230a      	movs	r3, #10
 80054a6:	18fb      	adds	r3, r7, r3
 80054a8:	8819      	ldrh	r1, [r3, #0]
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	9301      	str	r3, [sp, #4]
 80054b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	0023      	movs	r3, r4
 80054b6:	f000 f92f 	bl	8005718 <I2C_RequestMemoryRead>
 80054ba:	1e03      	subs	r3, r0, #0
 80054bc:	d005      	beq.n	80054ca <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2240      	movs	r2, #64	@ 0x40
 80054c2:	2100      	movs	r1, #0
 80054c4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e0b9      	b.n	800563e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	2bff      	cmp	r3, #255	@ 0xff
 80054d2:	d911      	bls.n	80054f8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2201      	movs	r2, #1
 80054d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	2380      	movs	r3, #128	@ 0x80
 80054e2:	045c      	lsls	r4, r3, #17
 80054e4:	230a      	movs	r3, #10
 80054e6:	18fb      	adds	r3, r7, r3
 80054e8:	8819      	ldrh	r1, [r3, #0]
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	4b56      	ldr	r3, [pc, #344]	@ (8005648 <HAL_I2C_Mem_Read+0x260>)
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	0023      	movs	r3, r4
 80054f2:	f000 fb6f 	bl	8005bd4 <I2C_TransferConfig>
 80054f6:	e012      	b.n	800551e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005506:	b2da      	uxtb	r2, r3
 8005508:	2380      	movs	r3, #128	@ 0x80
 800550a:	049c      	lsls	r4, r3, #18
 800550c:	230a      	movs	r3, #10
 800550e:	18fb      	adds	r3, r7, r3
 8005510:	8819      	ldrh	r1, [r3, #0]
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	4b4c      	ldr	r3, [pc, #304]	@ (8005648 <HAL_I2C_Mem_Read+0x260>)
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	0023      	movs	r3, r4
 800551a:	f000 fb5b 	bl	8005bd4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800551e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	0013      	movs	r3, r2
 8005528:	2200      	movs	r2, #0
 800552a:	2104      	movs	r1, #4
 800552c:	f000 f978 	bl	8005820 <I2C_WaitOnFlagUntilTimeout>
 8005530:	1e03      	subs	r3, r0, #0
 8005532:	d001      	beq.n	8005538 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e082      	b.n	800563e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005542:	b2d2      	uxtb	r2, r2
 8005544:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554a:	1c5a      	adds	r2, r3, #1
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005554:	3b01      	subs	r3, #1
 8005556:	b29a      	uxth	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005560:	b29b      	uxth	r3, r3
 8005562:	3b01      	subs	r3, #1
 8005564:	b29a      	uxth	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800556e:	b29b      	uxth	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d03a      	beq.n	80055ea <HAL_I2C_Mem_Read+0x202>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005578:	2b00      	cmp	r3, #0
 800557a:	d136      	bne.n	80055ea <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800557c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	0013      	movs	r3, r2
 8005586:	2200      	movs	r2, #0
 8005588:	2180      	movs	r1, #128	@ 0x80
 800558a:	f000 f949 	bl	8005820 <I2C_WaitOnFlagUntilTimeout>
 800558e:	1e03      	subs	r3, r0, #0
 8005590:	d001      	beq.n	8005596 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e053      	b.n	800563e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800559a:	b29b      	uxth	r3, r3
 800559c:	2bff      	cmp	r3, #255	@ 0xff
 800559e:	d911      	bls.n	80055c4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2201      	movs	r2, #1
 80055a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	2380      	movs	r3, #128	@ 0x80
 80055ae:	045c      	lsls	r4, r3, #17
 80055b0:	230a      	movs	r3, #10
 80055b2:	18fb      	adds	r3, r7, r3
 80055b4:	8819      	ldrh	r1, [r3, #0]
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	2300      	movs	r3, #0
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	0023      	movs	r3, r4
 80055be:	f000 fb09 	bl	8005bd4 <I2C_TransferConfig>
 80055c2:	e012      	b.n	80055ea <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	2380      	movs	r3, #128	@ 0x80
 80055d6:	049c      	lsls	r4, r3, #18
 80055d8:	230a      	movs	r3, #10
 80055da:	18fb      	adds	r3, r7, r3
 80055dc:	8819      	ldrh	r1, [r3, #0]
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	2300      	movs	r3, #0
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	0023      	movs	r3, r4
 80055e6:	f000 faf5 	bl	8005bd4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d194      	bne.n	800551e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	0018      	movs	r0, r3
 80055fc:	f000 f9ae 	bl	800595c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005600:	1e03      	subs	r3, r0, #0
 8005602:	d001      	beq.n	8005608 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e01a      	b.n	800563e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2220      	movs	r2, #32
 800560e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	490c      	ldr	r1, [pc, #48]	@ (800564c <HAL_I2C_Mem_Read+0x264>)
 800561c:	400a      	ands	r2, r1
 800561e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2241      	movs	r2, #65	@ 0x41
 8005624:	2120      	movs	r1, #32
 8005626:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2242      	movs	r2, #66	@ 0x42
 800562c:	2100      	movs	r1, #0
 800562e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2240      	movs	r2, #64	@ 0x40
 8005634:	2100      	movs	r1, #0
 8005636:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005638:	2300      	movs	r3, #0
 800563a:	e000      	b.n	800563e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800563c:	2302      	movs	r3, #2
  }
}
 800563e:	0018      	movs	r0, r3
 8005640:	46bd      	mov	sp, r7
 8005642:	b007      	add	sp, #28
 8005644:	bd90      	pop	{r4, r7, pc}
 8005646:	46c0      	nop			@ (mov r8, r8)
 8005648:	80002400 	.word	0x80002400
 800564c:	fe00e800 	.word	0xfe00e800

08005650 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005650:	b5b0      	push	{r4, r5, r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af02      	add	r7, sp, #8
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	000c      	movs	r4, r1
 800565a:	0010      	movs	r0, r2
 800565c:	0019      	movs	r1, r3
 800565e:	250a      	movs	r5, #10
 8005660:	197b      	adds	r3, r7, r5
 8005662:	1c22      	adds	r2, r4, #0
 8005664:	801a      	strh	r2, [r3, #0]
 8005666:	2308      	movs	r3, #8
 8005668:	18fb      	adds	r3, r7, r3
 800566a:	1c02      	adds	r2, r0, #0
 800566c:	801a      	strh	r2, [r3, #0]
 800566e:	1dbb      	adds	r3, r7, #6
 8005670:	1c0a      	adds	r2, r1, #0
 8005672:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005674:	1dbb      	adds	r3, r7, #6
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	b2da      	uxtb	r2, r3
 800567a:	2380      	movs	r3, #128	@ 0x80
 800567c:	045c      	lsls	r4, r3, #17
 800567e:	197b      	adds	r3, r7, r5
 8005680:	8819      	ldrh	r1, [r3, #0]
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	4b23      	ldr	r3, [pc, #140]	@ (8005714 <I2C_RequestMemoryWrite+0xc4>)
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	0023      	movs	r3, r4
 800568a:	f000 faa3 	bl	8005bd4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800568e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005690:	6a39      	ldr	r1, [r7, #32]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	0018      	movs	r0, r3
 8005696:	f000 f91b 	bl	80058d0 <I2C_WaitOnTXISFlagUntilTimeout>
 800569a:	1e03      	subs	r3, r0, #0
 800569c:	d001      	beq.n	80056a2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e033      	b.n	800570a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056a2:	1dbb      	adds	r3, r7, #6
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d107      	bne.n	80056ba <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056aa:	2308      	movs	r3, #8
 80056ac:	18fb      	adds	r3, r7, r3
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80056b8:	e019      	b.n	80056ee <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80056ba:	2308      	movs	r3, #8
 80056bc:	18fb      	adds	r3, r7, r3
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	0a1b      	lsrs	r3, r3, #8
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ce:	6a39      	ldr	r1, [r7, #32]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	0018      	movs	r0, r3
 80056d4:	f000 f8fc 	bl	80058d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80056d8:	1e03      	subs	r3, r0, #0
 80056da:	d001      	beq.n	80056e0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e014      	b.n	800570a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056e0:	2308      	movs	r3, #8
 80056e2:	18fb      	adds	r3, r7, r3
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80056ee:	6a3a      	ldr	r2, [r7, #32]
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	0013      	movs	r3, r2
 80056f8:	2200      	movs	r2, #0
 80056fa:	2180      	movs	r1, #128	@ 0x80
 80056fc:	f000 f890 	bl	8005820 <I2C_WaitOnFlagUntilTimeout>
 8005700:	1e03      	subs	r3, r0, #0
 8005702:	d001      	beq.n	8005708 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e000      	b.n	800570a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	0018      	movs	r0, r3
 800570c:	46bd      	mov	sp, r7
 800570e:	b004      	add	sp, #16
 8005710:	bdb0      	pop	{r4, r5, r7, pc}
 8005712:	46c0      	nop			@ (mov r8, r8)
 8005714:	80002000 	.word	0x80002000

08005718 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005718:	b5b0      	push	{r4, r5, r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af02      	add	r7, sp, #8
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	000c      	movs	r4, r1
 8005722:	0010      	movs	r0, r2
 8005724:	0019      	movs	r1, r3
 8005726:	250a      	movs	r5, #10
 8005728:	197b      	adds	r3, r7, r5
 800572a:	1c22      	adds	r2, r4, #0
 800572c:	801a      	strh	r2, [r3, #0]
 800572e:	2308      	movs	r3, #8
 8005730:	18fb      	adds	r3, r7, r3
 8005732:	1c02      	adds	r2, r0, #0
 8005734:	801a      	strh	r2, [r3, #0]
 8005736:	1dbb      	adds	r3, r7, #6
 8005738:	1c0a      	adds	r2, r1, #0
 800573a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800573c:	1dbb      	adds	r3, r7, #6
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	b2da      	uxtb	r2, r3
 8005742:	197b      	adds	r3, r7, r5
 8005744:	8819      	ldrh	r1, [r3, #0]
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	4b23      	ldr	r3, [pc, #140]	@ (80057d8 <I2C_RequestMemoryRead+0xc0>)
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	2300      	movs	r3, #0
 800574e:	f000 fa41 	bl	8005bd4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005754:	6a39      	ldr	r1, [r7, #32]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	0018      	movs	r0, r3
 800575a:	f000 f8b9 	bl	80058d0 <I2C_WaitOnTXISFlagUntilTimeout>
 800575e:	1e03      	subs	r3, r0, #0
 8005760:	d001      	beq.n	8005766 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e033      	b.n	80057ce <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005766:	1dbb      	adds	r3, r7, #6
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d107      	bne.n	800577e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800576e:	2308      	movs	r3, #8
 8005770:	18fb      	adds	r3, r7, r3
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	b2da      	uxtb	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	629a      	str	r2, [r3, #40]	@ 0x28
 800577c:	e019      	b.n	80057b2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800577e:	2308      	movs	r3, #8
 8005780:	18fb      	adds	r3, r7, r3
 8005782:	881b      	ldrh	r3, [r3, #0]
 8005784:	0a1b      	lsrs	r3, r3, #8
 8005786:	b29b      	uxth	r3, r3
 8005788:	b2da      	uxtb	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005790:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005792:	6a39      	ldr	r1, [r7, #32]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	0018      	movs	r0, r3
 8005798:	f000 f89a 	bl	80058d0 <I2C_WaitOnTXISFlagUntilTimeout>
 800579c:	1e03      	subs	r3, r0, #0
 800579e:	d001      	beq.n	80057a4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e014      	b.n	80057ce <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057a4:	2308      	movs	r3, #8
 80057a6:	18fb      	adds	r3, r7, r3
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80057b2:	6a3a      	ldr	r2, [r7, #32]
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	0013      	movs	r3, r2
 80057bc:	2200      	movs	r2, #0
 80057be:	2140      	movs	r1, #64	@ 0x40
 80057c0:	f000 f82e 	bl	8005820 <I2C_WaitOnFlagUntilTimeout>
 80057c4:	1e03      	subs	r3, r0, #0
 80057c6:	d001      	beq.n	80057cc <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e000      	b.n	80057ce <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	0018      	movs	r0, r3
 80057d0:	46bd      	mov	sp, r7
 80057d2:	b004      	add	sp, #16
 80057d4:	bdb0      	pop	{r4, r5, r7, pc}
 80057d6:	46c0      	nop			@ (mov r8, r8)
 80057d8:	80002000 	.word	0x80002000

080057dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	2202      	movs	r2, #2
 80057ec:	4013      	ands	r3, r2
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d103      	bne.n	80057fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2200      	movs	r2, #0
 80057f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	2201      	movs	r2, #1
 8005802:	4013      	ands	r3, r2
 8005804:	2b01      	cmp	r3, #1
 8005806:	d007      	beq.n	8005818 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699a      	ldr	r2, [r3, #24]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2101      	movs	r1, #1
 8005814:	430a      	orrs	r2, r1
 8005816:	619a      	str	r2, [r3, #24]
  }
}
 8005818:	46c0      	nop			@ (mov r8, r8)
 800581a:	46bd      	mov	sp, r7
 800581c:	b002      	add	sp, #8
 800581e:	bd80      	pop	{r7, pc}

08005820 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	603b      	str	r3, [r7, #0]
 800582c:	1dfb      	adds	r3, r7, #7
 800582e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005830:	e03a      	b.n	80058a8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	6839      	ldr	r1, [r7, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	0018      	movs	r0, r3
 800583a:	f000 f8d3 	bl	80059e4 <I2C_IsErrorOccurred>
 800583e:	1e03      	subs	r3, r0, #0
 8005840:	d001      	beq.n	8005846 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e040      	b.n	80058c8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	3301      	adds	r3, #1
 800584a:	d02d      	beq.n	80058a8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800584c:	f7ff f960 	bl	8004b10 <HAL_GetTick>
 8005850:	0002      	movs	r2, r0
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	429a      	cmp	r2, r3
 800585a:	d302      	bcc.n	8005862 <I2C_WaitOnFlagUntilTimeout+0x42>
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d122      	bne.n	80058a8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	4013      	ands	r3, r2
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	425a      	negs	r2, r3
 8005872:	4153      	adcs	r3, r2
 8005874:	b2db      	uxtb	r3, r3
 8005876:	001a      	movs	r2, r3
 8005878:	1dfb      	adds	r3, r7, #7
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	429a      	cmp	r2, r3
 800587e:	d113      	bne.n	80058a8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005884:	2220      	movs	r2, #32
 8005886:	431a      	orrs	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2241      	movs	r2, #65	@ 0x41
 8005890:	2120      	movs	r1, #32
 8005892:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2242      	movs	r2, #66	@ 0x42
 8005898:	2100      	movs	r1, #0
 800589a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2240      	movs	r2, #64	@ 0x40
 80058a0:	2100      	movs	r1, #0
 80058a2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e00f      	b.n	80058c8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	4013      	ands	r3, r2
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	425a      	negs	r2, r3
 80058b8:	4153      	adcs	r3, r2
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	001a      	movs	r2, r3
 80058be:	1dfb      	adds	r3, r7, #7
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d0b5      	beq.n	8005832 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	0018      	movs	r0, r3
 80058ca:	46bd      	mov	sp, r7
 80058cc:	b004      	add	sp, #16
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058dc:	e032      	b.n	8005944 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	68b9      	ldr	r1, [r7, #8]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	0018      	movs	r0, r3
 80058e6:	f000 f87d 	bl	80059e4 <I2C_IsErrorOccurred>
 80058ea:	1e03      	subs	r3, r0, #0
 80058ec:	d001      	beq.n	80058f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e030      	b.n	8005954 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	3301      	adds	r3, #1
 80058f6:	d025      	beq.n	8005944 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058f8:	f7ff f90a 	bl	8004b10 <HAL_GetTick>
 80058fc:	0002      	movs	r2, r0
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	429a      	cmp	r2, r3
 8005906:	d302      	bcc.n	800590e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d11a      	bne.n	8005944 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	2202      	movs	r2, #2
 8005916:	4013      	ands	r3, r2
 8005918:	2b02      	cmp	r3, #2
 800591a:	d013      	beq.n	8005944 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005920:	2220      	movs	r2, #32
 8005922:	431a      	orrs	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2241      	movs	r2, #65	@ 0x41
 800592c:	2120      	movs	r1, #32
 800592e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2242      	movs	r2, #66	@ 0x42
 8005934:	2100      	movs	r1, #0
 8005936:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2240      	movs	r2, #64	@ 0x40
 800593c:	2100      	movs	r1, #0
 800593e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e007      	b.n	8005954 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	2202      	movs	r2, #2
 800594c:	4013      	ands	r3, r2
 800594e:	2b02      	cmp	r3, #2
 8005950:	d1c5      	bne.n	80058de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	0018      	movs	r0, r3
 8005956:	46bd      	mov	sp, r7
 8005958:	b004      	add	sp, #16
 800595a:	bd80      	pop	{r7, pc}

0800595c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005968:	e02f      	b.n	80059ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	68b9      	ldr	r1, [r7, #8]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	0018      	movs	r0, r3
 8005972:	f000 f837 	bl	80059e4 <I2C_IsErrorOccurred>
 8005976:	1e03      	subs	r3, r0, #0
 8005978:	d001      	beq.n	800597e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e02d      	b.n	80059da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800597e:	f7ff f8c7 	bl	8004b10 <HAL_GetTick>
 8005982:	0002      	movs	r2, r0
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	429a      	cmp	r2, r3
 800598c:	d302      	bcc.n	8005994 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d11a      	bne.n	80059ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	2220      	movs	r2, #32
 800599c:	4013      	ands	r3, r2
 800599e:	2b20      	cmp	r3, #32
 80059a0:	d013      	beq.n	80059ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059a6:	2220      	movs	r2, #32
 80059a8:	431a      	orrs	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2241      	movs	r2, #65	@ 0x41
 80059b2:	2120      	movs	r1, #32
 80059b4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2242      	movs	r2, #66	@ 0x42
 80059ba:	2100      	movs	r1, #0
 80059bc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2240      	movs	r2, #64	@ 0x40
 80059c2:	2100      	movs	r1, #0
 80059c4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e007      	b.n	80059da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	2220      	movs	r2, #32
 80059d2:	4013      	ands	r3, r2
 80059d4:	2b20      	cmp	r3, #32
 80059d6:	d1c8      	bne.n	800596a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	0018      	movs	r0, r3
 80059dc:	46bd      	mov	sp, r7
 80059de:	b004      	add	sp, #16
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08a      	sub	sp, #40	@ 0x28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059f0:	2327      	movs	r3, #39	@ 0x27
 80059f2:	18fb      	adds	r3, r7, r3
 80059f4:	2200      	movs	r2, #0
 80059f6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005a00:	2300      	movs	r3, #0
 8005a02:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	2210      	movs	r2, #16
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	d100      	bne.n	8005a12 <I2C_IsErrorOccurred+0x2e>
 8005a10:	e079      	b.n	8005b06 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2210      	movs	r2, #16
 8005a18:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a1a:	e057      	b.n	8005acc <I2C_IsErrorOccurred+0xe8>
 8005a1c:	2227      	movs	r2, #39	@ 0x27
 8005a1e:	18bb      	adds	r3, r7, r2
 8005a20:	18ba      	adds	r2, r7, r2
 8005a22:	7812      	ldrb	r2, [r2, #0]
 8005a24:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	d04f      	beq.n	8005acc <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a2c:	f7ff f870 	bl	8004b10 <HAL_GetTick>
 8005a30:	0002      	movs	r2, r0
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d302      	bcc.n	8005a42 <I2C_IsErrorOccurred+0x5e>
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d144      	bne.n	8005acc <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	2380      	movs	r3, #128	@ 0x80
 8005a4a:	01db      	lsls	r3, r3, #7
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005a50:	2013      	movs	r0, #19
 8005a52:	183b      	adds	r3, r7, r0
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	2142      	movs	r1, #66	@ 0x42
 8005a58:	5c52      	ldrb	r2, [r2, r1]
 8005a5a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	699a      	ldr	r2, [r3, #24]
 8005a62:	2380      	movs	r3, #128	@ 0x80
 8005a64:	021b      	lsls	r3, r3, #8
 8005a66:	401a      	ands	r2, r3
 8005a68:	2380      	movs	r3, #128	@ 0x80
 8005a6a:	021b      	lsls	r3, r3, #8
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d126      	bne.n	8005abe <I2C_IsErrorOccurred+0xda>
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	2380      	movs	r3, #128	@ 0x80
 8005a74:	01db      	lsls	r3, r3, #7
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d021      	beq.n	8005abe <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8005a7a:	183b      	adds	r3, r7, r0
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b20      	cmp	r3, #32
 8005a80:	d01d      	beq.n	8005abe <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2180      	movs	r1, #128	@ 0x80
 8005a8e:	01c9      	lsls	r1, r1, #7
 8005a90:	430a      	orrs	r2, r1
 8005a92:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005a94:	f7ff f83c 	bl	8004b10 <HAL_GetTick>
 8005a98:	0003      	movs	r3, r0
 8005a9a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a9c:	e00f      	b.n	8005abe <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005a9e:	f7ff f837 	bl	8004b10 <HAL_GetTick>
 8005aa2:	0002      	movs	r2, r0
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	2b19      	cmp	r3, #25
 8005aaa:	d908      	bls.n	8005abe <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005ab4:	2327      	movs	r3, #39	@ 0x27
 8005ab6:	18fb      	adds	r3, r7, r3
 8005ab8:	2201      	movs	r2, #1
 8005aba:	701a      	strb	r2, [r3, #0]

              break;
 8005abc:	e006      	b.n	8005acc <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	2220      	movs	r2, #32
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	d1e8      	bne.n	8005a9e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	2b20      	cmp	r3, #32
 8005ad8:	d004      	beq.n	8005ae4 <I2C_IsErrorOccurred+0x100>
 8005ada:	2327      	movs	r3, #39	@ 0x27
 8005adc:	18fb      	adds	r3, r7, r3
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d09b      	beq.n	8005a1c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005ae4:	2327      	movs	r3, #39	@ 0x27
 8005ae6:	18fb      	adds	r3, r7, r3
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d103      	bne.n	8005af6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2220      	movs	r2, #32
 8005af4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	2204      	movs	r2, #4
 8005afa:	4313      	orrs	r3, r2
 8005afc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005afe:	2327      	movs	r3, #39	@ 0x27
 8005b00:	18fb      	adds	r3, r7, r3
 8005b02:	2201      	movs	r2, #1
 8005b04:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	2380      	movs	r3, #128	@ 0x80
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	4013      	ands	r3, r2
 8005b16:	d00c      	beq.n	8005b32 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2280      	movs	r2, #128	@ 0x80
 8005b26:	0052      	lsls	r2, r2, #1
 8005b28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b2a:	2327      	movs	r3, #39	@ 0x27
 8005b2c:	18fb      	adds	r3, r7, r3
 8005b2e:	2201      	movs	r2, #1
 8005b30:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	2380      	movs	r3, #128	@ 0x80
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	4013      	ands	r3, r2
 8005b3a:	d00c      	beq.n	8005b56 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	2208      	movs	r2, #8
 8005b40:	4313      	orrs	r3, r2
 8005b42:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2280      	movs	r2, #128	@ 0x80
 8005b4a:	00d2      	lsls	r2, r2, #3
 8005b4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b4e:	2327      	movs	r3, #39	@ 0x27
 8005b50:	18fb      	adds	r3, r7, r3
 8005b52:	2201      	movs	r2, #1
 8005b54:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	2380      	movs	r3, #128	@ 0x80
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	d00c      	beq.n	8005b7a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	2202      	movs	r2, #2
 8005b64:	4313      	orrs	r3, r2
 8005b66:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2280      	movs	r2, #128	@ 0x80
 8005b6e:	0092      	lsls	r2, r2, #2
 8005b70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b72:	2327      	movs	r3, #39	@ 0x27
 8005b74:	18fb      	adds	r3, r7, r3
 8005b76:	2201      	movs	r2, #1
 8005b78:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005b7a:	2327      	movs	r3, #39	@ 0x27
 8005b7c:	18fb      	adds	r3, r7, r3
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d01d      	beq.n	8005bc0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	0018      	movs	r0, r3
 8005b88:	f7ff fe28 	bl	80057dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	490e      	ldr	r1, [pc, #56]	@ (8005bd0 <I2C_IsErrorOccurred+0x1ec>)
 8005b98:	400a      	ands	r2, r1
 8005b9a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2241      	movs	r2, #65	@ 0x41
 8005bac:	2120      	movs	r1, #32
 8005bae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2242      	movs	r2, #66	@ 0x42
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2240      	movs	r2, #64	@ 0x40
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005bc0:	2327      	movs	r3, #39	@ 0x27
 8005bc2:	18fb      	adds	r3, r7, r3
 8005bc4:	781b      	ldrb	r3, [r3, #0]
}
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	b00a      	add	sp, #40	@ 0x28
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	46c0      	nop			@ (mov r8, r8)
 8005bd0:	fe00e800 	.word	0xfe00e800

08005bd4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005bd4:	b590      	push	{r4, r7, lr}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	0008      	movs	r0, r1
 8005bde:	0011      	movs	r1, r2
 8005be0:	607b      	str	r3, [r7, #4]
 8005be2:	240a      	movs	r4, #10
 8005be4:	193b      	adds	r3, r7, r4
 8005be6:	1c02      	adds	r2, r0, #0
 8005be8:	801a      	strh	r2, [r3, #0]
 8005bea:	2009      	movs	r0, #9
 8005bec:	183b      	adds	r3, r7, r0
 8005bee:	1c0a      	adds	r2, r1, #0
 8005bf0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005bf2:	193b      	adds	r3, r7, r4
 8005bf4:	881b      	ldrh	r3, [r3, #0]
 8005bf6:	059b      	lsls	r3, r3, #22
 8005bf8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005bfa:	183b      	adds	r3, r7, r0
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	0419      	lsls	r1, r3, #16
 8005c00:	23ff      	movs	r3, #255	@ 0xff
 8005c02:	041b      	lsls	r3, r3, #16
 8005c04:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c06:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	085b      	lsrs	r3, r3, #1
 8005c14:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c1e:	0d51      	lsrs	r1, r2, #21
 8005c20:	2280      	movs	r2, #128	@ 0x80
 8005c22:	00d2      	lsls	r2, r2, #3
 8005c24:	400a      	ands	r2, r1
 8005c26:	4907      	ldr	r1, [pc, #28]	@ (8005c44 <I2C_TransferConfig+0x70>)
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	43d2      	mvns	r2, r2
 8005c2c:	401a      	ands	r2, r3
 8005c2e:	0011      	movs	r1, r2
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005c3a:	46c0      	nop			@ (mov r8, r8)
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	b007      	add	sp, #28
 8005c40:	bd90      	pop	{r4, r7, pc}
 8005c42:	46c0      	nop			@ (mov r8, r8)
 8005c44:	03ff63ff 	.word	0x03ff63ff

08005c48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2241      	movs	r2, #65	@ 0x41
 8005c56:	5c9b      	ldrb	r3, [r3, r2]
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b20      	cmp	r3, #32
 8005c5c:	d138      	bne.n	8005cd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2240      	movs	r2, #64	@ 0x40
 8005c62:	5c9b      	ldrb	r3, [r3, r2]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d101      	bne.n	8005c6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	e032      	b.n	8005cd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2240      	movs	r2, #64	@ 0x40
 8005c70:	2101      	movs	r1, #1
 8005c72:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2241      	movs	r2, #65	@ 0x41
 8005c78:	2124      	movs	r1, #36	@ 0x24
 8005c7a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2101      	movs	r1, #1
 8005c88:	438a      	bics	r2, r1
 8005c8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4911      	ldr	r1, [pc, #68]	@ (8005cdc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005c98:	400a      	ands	r2, r1
 8005c9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6819      	ldr	r1, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2241      	movs	r2, #65	@ 0x41
 8005cc0:	2120      	movs	r1, #32
 8005cc2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2240      	movs	r2, #64	@ 0x40
 8005cc8:	2100      	movs	r1, #0
 8005cca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	e000      	b.n	8005cd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005cd0:	2302      	movs	r3, #2
  }
}
 8005cd2:	0018      	movs	r0, r3
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	b002      	add	sp, #8
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	46c0      	nop			@ (mov r8, r8)
 8005cdc:	ffffefff 	.word	0xffffefff

08005ce0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2241      	movs	r2, #65	@ 0x41
 8005cee:	5c9b      	ldrb	r3, [r3, r2]
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b20      	cmp	r3, #32
 8005cf4:	d139      	bne.n	8005d6a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2240      	movs	r2, #64	@ 0x40
 8005cfa:	5c9b      	ldrb	r3, [r3, r2]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d101      	bne.n	8005d04 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d00:	2302      	movs	r3, #2
 8005d02:	e033      	b.n	8005d6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2240      	movs	r2, #64	@ 0x40
 8005d08:	2101      	movs	r1, #1
 8005d0a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2241      	movs	r2, #65	@ 0x41
 8005d10:	2124      	movs	r1, #36	@ 0x24
 8005d12:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2101      	movs	r1, #1
 8005d20:	438a      	bics	r2, r1
 8005d22:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	4a11      	ldr	r2, [pc, #68]	@ (8005d74 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005d30:	4013      	ands	r3, r2
 8005d32:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	021b      	lsls	r3, r3, #8
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2101      	movs	r1, #1
 8005d52:	430a      	orrs	r2, r1
 8005d54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2241      	movs	r2, #65	@ 0x41
 8005d5a:	2120      	movs	r1, #32
 8005d5c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2240      	movs	r2, #64	@ 0x40
 8005d62:	2100      	movs	r1, #0
 8005d64:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005d66:	2300      	movs	r3, #0
 8005d68:	e000      	b.n	8005d6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005d6a:	2302      	movs	r3, #2
  }
}
 8005d6c:	0018      	movs	r0, r3
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	b004      	add	sp, #16
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	fffff0ff 	.word	0xfffff0ff

08005d78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d78:	b5b0      	push	{r4, r5, r7, lr}
 8005d7a:	b08a      	sub	sp, #40	@ 0x28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d102      	bne.n	8005d8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	f000 fbbf 	bl	800650a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d8c:	4bc9      	ldr	r3, [pc, #804]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	220c      	movs	r2, #12
 8005d92:	4013      	ands	r3, r2
 8005d94:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d96:	4bc7      	ldr	r3, [pc, #796]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	2380      	movs	r3, #128	@ 0x80
 8005d9c:	025b      	lsls	r3, r3, #9
 8005d9e:	4013      	ands	r3, r2
 8005da0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2201      	movs	r2, #1
 8005da8:	4013      	ands	r3, r2
 8005daa:	d100      	bne.n	8005dae <HAL_RCC_OscConfig+0x36>
 8005dac:	e07e      	b.n	8005eac <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	2b08      	cmp	r3, #8
 8005db2:	d007      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	2b0c      	cmp	r3, #12
 8005db8:	d112      	bne.n	8005de0 <HAL_RCC_OscConfig+0x68>
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	2380      	movs	r3, #128	@ 0x80
 8005dbe:	025b      	lsls	r3, r3, #9
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d10d      	bne.n	8005de0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dc4:	4bbb      	ldr	r3, [pc, #748]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	2380      	movs	r3, #128	@ 0x80
 8005dca:	029b      	lsls	r3, r3, #10
 8005dcc:	4013      	ands	r3, r2
 8005dce:	d100      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x5a>
 8005dd0:	e06b      	b.n	8005eaa <HAL_RCC_OscConfig+0x132>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d167      	bne.n	8005eaa <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	f000 fb95 	bl	800650a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	2380      	movs	r3, #128	@ 0x80
 8005de6:	025b      	lsls	r3, r3, #9
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d107      	bne.n	8005dfc <HAL_RCC_OscConfig+0x84>
 8005dec:	4bb1      	ldr	r3, [pc, #708]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	4bb0      	ldr	r3, [pc, #704]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005df2:	2180      	movs	r1, #128	@ 0x80
 8005df4:	0249      	lsls	r1, r1, #9
 8005df6:	430a      	orrs	r2, r1
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	e027      	b.n	8005e4c <HAL_RCC_OscConfig+0xd4>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	23a0      	movs	r3, #160	@ 0xa0
 8005e02:	02db      	lsls	r3, r3, #11
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d10e      	bne.n	8005e26 <HAL_RCC_OscConfig+0xae>
 8005e08:	4baa      	ldr	r3, [pc, #680]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	4ba9      	ldr	r3, [pc, #676]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005e0e:	2180      	movs	r1, #128	@ 0x80
 8005e10:	02c9      	lsls	r1, r1, #11
 8005e12:	430a      	orrs	r2, r1
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	4ba7      	ldr	r3, [pc, #668]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	4ba6      	ldr	r3, [pc, #664]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005e1c:	2180      	movs	r1, #128	@ 0x80
 8005e1e:	0249      	lsls	r1, r1, #9
 8005e20:	430a      	orrs	r2, r1
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	e012      	b.n	8005e4c <HAL_RCC_OscConfig+0xd4>
 8005e26:	4ba3      	ldr	r3, [pc, #652]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	4ba2      	ldr	r3, [pc, #648]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005e2c:	49a2      	ldr	r1, [pc, #648]	@ (80060b8 <HAL_RCC_OscConfig+0x340>)
 8005e2e:	400a      	ands	r2, r1
 8005e30:	601a      	str	r2, [r3, #0]
 8005e32:	4ba0      	ldr	r3, [pc, #640]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	2380      	movs	r3, #128	@ 0x80
 8005e38:	025b      	lsls	r3, r3, #9
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4b9c      	ldr	r3, [pc, #624]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	4b9b      	ldr	r3, [pc, #620]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005e46:	499d      	ldr	r1, [pc, #628]	@ (80060bc <HAL_RCC_OscConfig+0x344>)
 8005e48:	400a      	ands	r2, r1
 8005e4a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d015      	beq.n	8005e80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e54:	f7fe fe5c 	bl	8004b10 <HAL_GetTick>
 8005e58:	0003      	movs	r3, r0
 8005e5a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e5c:	e009      	b.n	8005e72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e5e:	f7fe fe57 	bl	8004b10 <HAL_GetTick>
 8005e62:	0002      	movs	r2, r0
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b64      	cmp	r3, #100	@ 0x64
 8005e6a:	d902      	bls.n	8005e72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	f000 fb4c 	bl	800650a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e72:	4b90      	ldr	r3, [pc, #576]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	2380      	movs	r3, #128	@ 0x80
 8005e78:	029b      	lsls	r3, r3, #10
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	d0ef      	beq.n	8005e5e <HAL_RCC_OscConfig+0xe6>
 8005e7e:	e015      	b.n	8005eac <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e80:	f7fe fe46 	bl	8004b10 <HAL_GetTick>
 8005e84:	0003      	movs	r3, r0
 8005e86:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e88:	e008      	b.n	8005e9c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e8a:	f7fe fe41 	bl	8004b10 <HAL_GetTick>
 8005e8e:	0002      	movs	r2, r0
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	2b64      	cmp	r3, #100	@ 0x64
 8005e96:	d901      	bls.n	8005e9c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e336      	b.n	800650a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e9c:	4b85      	ldr	r3, [pc, #532]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	2380      	movs	r3, #128	@ 0x80
 8005ea2:	029b      	lsls	r3, r3, #10
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	d1f0      	bne.n	8005e8a <HAL_RCC_OscConfig+0x112>
 8005ea8:	e000      	b.n	8005eac <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eaa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	d100      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x140>
 8005eb6:	e099      	b.n	8005fec <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	d009      	beq.n	8005eda <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005ec6:	4b7b      	ldr	r3, [pc, #492]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	4b7a      	ldr	r3, [pc, #488]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005ecc:	2120      	movs	r1, #32
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	4393      	bics	r3, r2
 8005ed8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	2b04      	cmp	r3, #4
 8005ede:	d005      	beq.n	8005eec <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	2b0c      	cmp	r3, #12
 8005ee4:	d13e      	bne.n	8005f64 <HAL_RCC_OscConfig+0x1ec>
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d13b      	bne.n	8005f64 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005eec:	4b71      	ldr	r3, [pc, #452]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2204      	movs	r2, #4
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	d004      	beq.n	8005f00 <HAL_RCC_OscConfig+0x188>
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e304      	b.n	800650a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f00:	4b6c      	ldr	r3, [pc, #432]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	4a6e      	ldr	r2, [pc, #440]	@ (80060c0 <HAL_RCC_OscConfig+0x348>)
 8005f06:	4013      	ands	r3, r2
 8005f08:	0019      	movs	r1, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	021a      	lsls	r2, r3, #8
 8005f10:	4b68      	ldr	r3, [pc, #416]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005f12:	430a      	orrs	r2, r1
 8005f14:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005f16:	4b67      	ldr	r3, [pc, #412]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2209      	movs	r2, #9
 8005f1c:	4393      	bics	r3, r2
 8005f1e:	0019      	movs	r1, r3
 8005f20:	4b64      	ldr	r3, [pc, #400]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f24:	430a      	orrs	r2, r1
 8005f26:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f28:	f000 fc42 	bl	80067b0 <HAL_RCC_GetSysClockFreq>
 8005f2c:	0001      	movs	r1, r0
 8005f2e:	4b61      	ldr	r3, [pc, #388]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	091b      	lsrs	r3, r3, #4
 8005f34:	220f      	movs	r2, #15
 8005f36:	4013      	ands	r3, r2
 8005f38:	4a62      	ldr	r2, [pc, #392]	@ (80060c4 <HAL_RCC_OscConfig+0x34c>)
 8005f3a:	5cd3      	ldrb	r3, [r2, r3]
 8005f3c:	000a      	movs	r2, r1
 8005f3e:	40da      	lsrs	r2, r3
 8005f40:	4b61      	ldr	r3, [pc, #388]	@ (80060c8 <HAL_RCC_OscConfig+0x350>)
 8005f42:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005f44:	4b61      	ldr	r3, [pc, #388]	@ (80060cc <HAL_RCC_OscConfig+0x354>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2513      	movs	r5, #19
 8005f4a:	197c      	adds	r4, r7, r5
 8005f4c:	0018      	movs	r0, r3
 8005f4e:	f7fe fd99 	bl	8004a84 <HAL_InitTick>
 8005f52:	0003      	movs	r3, r0
 8005f54:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005f56:	197b      	adds	r3, r7, r5
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d046      	beq.n	8005fec <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8005f5e:	197b      	adds	r3, r7, r5
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	e2d2      	b.n	800650a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d027      	beq.n	8005fba <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005f6a:	4b52      	ldr	r3, [pc, #328]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2209      	movs	r2, #9
 8005f70:	4393      	bics	r3, r2
 8005f72:	0019      	movs	r1, r3
 8005f74:	4b4f      	ldr	r3, [pc, #316]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f7c:	f7fe fdc8 	bl	8004b10 <HAL_GetTick>
 8005f80:	0003      	movs	r3, r0
 8005f82:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f84:	e008      	b.n	8005f98 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f86:	f7fe fdc3 	bl	8004b10 <HAL_GetTick>
 8005f8a:	0002      	movs	r2, r0
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d901      	bls.n	8005f98 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e2b8      	b.n	800650a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f98:	4b46      	ldr	r3, [pc, #280]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2204      	movs	r2, #4
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	d0f1      	beq.n	8005f86 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fa2:	4b44      	ldr	r3, [pc, #272]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	4a46      	ldr	r2, [pc, #280]	@ (80060c0 <HAL_RCC_OscConfig+0x348>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	0019      	movs	r1, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	021a      	lsls	r2, r3, #8
 8005fb2:	4b40      	ldr	r3, [pc, #256]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	605a      	str	r2, [r3, #4]
 8005fb8:	e018      	b.n	8005fec <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fba:	4b3e      	ldr	r3, [pc, #248]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	4b3d      	ldr	r3, [pc, #244]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005fc0:	2101      	movs	r1, #1
 8005fc2:	438a      	bics	r2, r1
 8005fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fc6:	f7fe fda3 	bl	8004b10 <HAL_GetTick>
 8005fca:	0003      	movs	r3, r0
 8005fcc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fce:	e008      	b.n	8005fe2 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fd0:	f7fe fd9e 	bl	8004b10 <HAL_GetTick>
 8005fd4:	0002      	movs	r2, r0
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e293      	b.n	800650a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fe2:	4b34      	ldr	r3, [pc, #208]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2204      	movs	r2, #4
 8005fe8:	4013      	ands	r3, r2
 8005fea:	d1f1      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2210      	movs	r2, #16
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	d100      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x280>
 8005ff6:	e0a2      	b.n	800613e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d140      	bne.n	8006080 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005ffe:	4b2d      	ldr	r3, [pc, #180]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	2380      	movs	r3, #128	@ 0x80
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4013      	ands	r3, r2
 8006008:	d005      	beq.n	8006016 <HAL_RCC_OscConfig+0x29e>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e279      	b.n	800650a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006016:	4b27      	ldr	r3, [pc, #156]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	4a2d      	ldr	r2, [pc, #180]	@ (80060d0 <HAL_RCC_OscConfig+0x358>)
 800601c:	4013      	ands	r3, r2
 800601e:	0019      	movs	r1, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006024:	4b23      	ldr	r3, [pc, #140]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 8006026:	430a      	orrs	r2, r1
 8006028:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800602a:	4b22      	ldr	r3, [pc, #136]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	021b      	lsls	r3, r3, #8
 8006030:	0a19      	lsrs	r1, r3, #8
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	061a      	lsls	r2, r3, #24
 8006038:	4b1e      	ldr	r3, [pc, #120]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 800603a:	430a      	orrs	r2, r1
 800603c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006042:	0b5b      	lsrs	r3, r3, #13
 8006044:	3301      	adds	r3, #1
 8006046:	2280      	movs	r2, #128	@ 0x80
 8006048:	0212      	lsls	r2, r2, #8
 800604a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800604c:	4b19      	ldr	r3, [pc, #100]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	091b      	lsrs	r3, r3, #4
 8006052:	210f      	movs	r1, #15
 8006054:	400b      	ands	r3, r1
 8006056:	491b      	ldr	r1, [pc, #108]	@ (80060c4 <HAL_RCC_OscConfig+0x34c>)
 8006058:	5ccb      	ldrb	r3, [r1, r3]
 800605a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800605c:	4b1a      	ldr	r3, [pc, #104]	@ (80060c8 <HAL_RCC_OscConfig+0x350>)
 800605e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8006060:	4b1a      	ldr	r3, [pc, #104]	@ (80060cc <HAL_RCC_OscConfig+0x354>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2513      	movs	r5, #19
 8006066:	197c      	adds	r4, r7, r5
 8006068:	0018      	movs	r0, r3
 800606a:	f7fe fd0b 	bl	8004a84 <HAL_InitTick>
 800606e:	0003      	movs	r3, r0
 8006070:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8006072:	197b      	adds	r3, r7, r5
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d061      	beq.n	800613e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800607a:	197b      	adds	r3, r7, r5
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	e244      	b.n	800650a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	69db      	ldr	r3, [r3, #28]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d040      	beq.n	800610a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006088:	4b0a      	ldr	r3, [pc, #40]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	4b09      	ldr	r3, [pc, #36]	@ (80060b4 <HAL_RCC_OscConfig+0x33c>)
 800608e:	2180      	movs	r1, #128	@ 0x80
 8006090:	0049      	lsls	r1, r1, #1
 8006092:	430a      	orrs	r2, r1
 8006094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006096:	f7fe fd3b 	bl	8004b10 <HAL_GetTick>
 800609a:	0003      	movs	r3, r0
 800609c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800609e:	e019      	b.n	80060d4 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80060a0:	f7fe fd36 	bl	8004b10 <HAL_GetTick>
 80060a4:	0002      	movs	r2, r0
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d912      	bls.n	80060d4 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e22b      	b.n	800650a <HAL_RCC_OscConfig+0x792>
 80060b2:	46c0      	nop			@ (mov r8, r8)
 80060b4:	40021000 	.word	0x40021000
 80060b8:	fffeffff 	.word	0xfffeffff
 80060bc:	fffbffff 	.word	0xfffbffff
 80060c0:	ffffe0ff 	.word	0xffffe0ff
 80060c4:	0800b09c 	.word	0x0800b09c
 80060c8:	20000000 	.word	0x20000000
 80060cc:	20000004 	.word	0x20000004
 80060d0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80060d4:	4bca      	ldr	r3, [pc, #808]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	2380      	movs	r3, #128	@ 0x80
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4013      	ands	r3, r2
 80060de:	d0df      	beq.n	80060a0 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060e0:	4bc7      	ldr	r3, [pc, #796]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	4ac7      	ldr	r2, [pc, #796]	@ (8006404 <HAL_RCC_OscConfig+0x68c>)
 80060e6:	4013      	ands	r3, r2
 80060e8:	0019      	movs	r1, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80060ee:	4bc4      	ldr	r3, [pc, #784]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 80060f0:	430a      	orrs	r2, r1
 80060f2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060f4:	4bc2      	ldr	r3, [pc, #776]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	021b      	lsls	r3, r3, #8
 80060fa:	0a19      	lsrs	r1, r3, #8
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	061a      	lsls	r2, r3, #24
 8006102:	4bbf      	ldr	r3, [pc, #764]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 8006104:	430a      	orrs	r2, r1
 8006106:	605a      	str	r2, [r3, #4]
 8006108:	e019      	b.n	800613e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800610a:	4bbd      	ldr	r3, [pc, #756]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	4bbc      	ldr	r3, [pc, #752]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 8006110:	49bd      	ldr	r1, [pc, #756]	@ (8006408 <HAL_RCC_OscConfig+0x690>)
 8006112:	400a      	ands	r2, r1
 8006114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006116:	f7fe fcfb 	bl	8004b10 <HAL_GetTick>
 800611a:	0003      	movs	r3, r0
 800611c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800611e:	e008      	b.n	8006132 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006120:	f7fe fcf6 	bl	8004b10 <HAL_GetTick>
 8006124:	0002      	movs	r2, r0
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	2b02      	cmp	r3, #2
 800612c:	d901      	bls.n	8006132 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e1eb      	b.n	800650a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006132:	4bb3      	ldr	r3, [pc, #716]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	2380      	movs	r3, #128	@ 0x80
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4013      	ands	r3, r2
 800613c:	d1f0      	bne.n	8006120 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2208      	movs	r2, #8
 8006144:	4013      	ands	r3, r2
 8006146:	d036      	beq.n	80061b6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d019      	beq.n	8006184 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006150:	4bab      	ldr	r3, [pc, #684]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 8006152:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006154:	4baa      	ldr	r3, [pc, #680]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 8006156:	2101      	movs	r1, #1
 8006158:	430a      	orrs	r2, r1
 800615a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800615c:	f7fe fcd8 	bl	8004b10 <HAL_GetTick>
 8006160:	0003      	movs	r3, r0
 8006162:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006164:	e008      	b.n	8006178 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006166:	f7fe fcd3 	bl	8004b10 <HAL_GetTick>
 800616a:	0002      	movs	r2, r0
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	2b02      	cmp	r3, #2
 8006172:	d901      	bls.n	8006178 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e1c8      	b.n	800650a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006178:	4ba1      	ldr	r3, [pc, #644]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 800617a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800617c:	2202      	movs	r2, #2
 800617e:	4013      	ands	r3, r2
 8006180:	d0f1      	beq.n	8006166 <HAL_RCC_OscConfig+0x3ee>
 8006182:	e018      	b.n	80061b6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006184:	4b9e      	ldr	r3, [pc, #632]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 8006186:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006188:	4b9d      	ldr	r3, [pc, #628]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 800618a:	2101      	movs	r1, #1
 800618c:	438a      	bics	r2, r1
 800618e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006190:	f7fe fcbe 	bl	8004b10 <HAL_GetTick>
 8006194:	0003      	movs	r3, r0
 8006196:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006198:	e008      	b.n	80061ac <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800619a:	f7fe fcb9 	bl	8004b10 <HAL_GetTick>
 800619e:	0002      	movs	r2, r0
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d901      	bls.n	80061ac <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e1ae      	b.n	800650a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061ac:	4b94      	ldr	r3, [pc, #592]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 80061ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061b0:	2202      	movs	r2, #2
 80061b2:	4013      	ands	r3, r2
 80061b4:	d1f1      	bne.n	800619a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2204      	movs	r2, #4
 80061bc:	4013      	ands	r3, r2
 80061be:	d100      	bne.n	80061c2 <HAL_RCC_OscConfig+0x44a>
 80061c0:	e0ae      	b.n	8006320 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061c2:	2023      	movs	r0, #35	@ 0x23
 80061c4:	183b      	adds	r3, r7, r0
 80061c6:	2200      	movs	r2, #0
 80061c8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061ca:	4b8d      	ldr	r3, [pc, #564]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 80061cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061ce:	2380      	movs	r3, #128	@ 0x80
 80061d0:	055b      	lsls	r3, r3, #21
 80061d2:	4013      	ands	r3, r2
 80061d4:	d109      	bne.n	80061ea <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061d6:	4b8a      	ldr	r3, [pc, #552]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 80061d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061da:	4b89      	ldr	r3, [pc, #548]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 80061dc:	2180      	movs	r1, #128	@ 0x80
 80061de:	0549      	lsls	r1, r1, #21
 80061e0:	430a      	orrs	r2, r1
 80061e2:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80061e4:	183b      	adds	r3, r7, r0
 80061e6:	2201      	movs	r2, #1
 80061e8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ea:	4b88      	ldr	r3, [pc, #544]	@ (800640c <HAL_RCC_OscConfig+0x694>)
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	2380      	movs	r3, #128	@ 0x80
 80061f0:	005b      	lsls	r3, r3, #1
 80061f2:	4013      	ands	r3, r2
 80061f4:	d11a      	bne.n	800622c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061f6:	4b85      	ldr	r3, [pc, #532]	@ (800640c <HAL_RCC_OscConfig+0x694>)
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	4b84      	ldr	r3, [pc, #528]	@ (800640c <HAL_RCC_OscConfig+0x694>)
 80061fc:	2180      	movs	r1, #128	@ 0x80
 80061fe:	0049      	lsls	r1, r1, #1
 8006200:	430a      	orrs	r2, r1
 8006202:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006204:	f7fe fc84 	bl	8004b10 <HAL_GetTick>
 8006208:	0003      	movs	r3, r0
 800620a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800620c:	e008      	b.n	8006220 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800620e:	f7fe fc7f 	bl	8004b10 <HAL_GetTick>
 8006212:	0002      	movs	r2, r0
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b64      	cmp	r3, #100	@ 0x64
 800621a:	d901      	bls.n	8006220 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e174      	b.n	800650a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006220:	4b7a      	ldr	r3, [pc, #488]	@ (800640c <HAL_RCC_OscConfig+0x694>)
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	2380      	movs	r3, #128	@ 0x80
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	4013      	ands	r3, r2
 800622a:	d0f0      	beq.n	800620e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	2380      	movs	r3, #128	@ 0x80
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	429a      	cmp	r2, r3
 8006236:	d107      	bne.n	8006248 <HAL_RCC_OscConfig+0x4d0>
 8006238:	4b71      	ldr	r3, [pc, #452]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 800623a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800623c:	4b70      	ldr	r3, [pc, #448]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 800623e:	2180      	movs	r1, #128	@ 0x80
 8006240:	0049      	lsls	r1, r1, #1
 8006242:	430a      	orrs	r2, r1
 8006244:	651a      	str	r2, [r3, #80]	@ 0x50
 8006246:	e031      	b.n	80062ac <HAL_RCC_OscConfig+0x534>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10c      	bne.n	800626a <HAL_RCC_OscConfig+0x4f2>
 8006250:	4b6b      	ldr	r3, [pc, #428]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 8006252:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006254:	4b6a      	ldr	r3, [pc, #424]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 8006256:	496c      	ldr	r1, [pc, #432]	@ (8006408 <HAL_RCC_OscConfig+0x690>)
 8006258:	400a      	ands	r2, r1
 800625a:	651a      	str	r2, [r3, #80]	@ 0x50
 800625c:	4b68      	ldr	r3, [pc, #416]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 800625e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006260:	4b67      	ldr	r3, [pc, #412]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 8006262:	496b      	ldr	r1, [pc, #428]	@ (8006410 <HAL_RCC_OscConfig+0x698>)
 8006264:	400a      	ands	r2, r1
 8006266:	651a      	str	r2, [r3, #80]	@ 0x50
 8006268:	e020      	b.n	80062ac <HAL_RCC_OscConfig+0x534>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689a      	ldr	r2, [r3, #8]
 800626e:	23a0      	movs	r3, #160	@ 0xa0
 8006270:	00db      	lsls	r3, r3, #3
 8006272:	429a      	cmp	r2, r3
 8006274:	d10e      	bne.n	8006294 <HAL_RCC_OscConfig+0x51c>
 8006276:	4b62      	ldr	r3, [pc, #392]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 8006278:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800627a:	4b61      	ldr	r3, [pc, #388]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 800627c:	2180      	movs	r1, #128	@ 0x80
 800627e:	00c9      	lsls	r1, r1, #3
 8006280:	430a      	orrs	r2, r1
 8006282:	651a      	str	r2, [r3, #80]	@ 0x50
 8006284:	4b5e      	ldr	r3, [pc, #376]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 8006286:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006288:	4b5d      	ldr	r3, [pc, #372]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 800628a:	2180      	movs	r1, #128	@ 0x80
 800628c:	0049      	lsls	r1, r1, #1
 800628e:	430a      	orrs	r2, r1
 8006290:	651a      	str	r2, [r3, #80]	@ 0x50
 8006292:	e00b      	b.n	80062ac <HAL_RCC_OscConfig+0x534>
 8006294:	4b5a      	ldr	r3, [pc, #360]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 8006296:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006298:	4b59      	ldr	r3, [pc, #356]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 800629a:	495b      	ldr	r1, [pc, #364]	@ (8006408 <HAL_RCC_OscConfig+0x690>)
 800629c:	400a      	ands	r2, r1
 800629e:	651a      	str	r2, [r3, #80]	@ 0x50
 80062a0:	4b57      	ldr	r3, [pc, #348]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 80062a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80062a4:	4b56      	ldr	r3, [pc, #344]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 80062a6:	495a      	ldr	r1, [pc, #360]	@ (8006410 <HAL_RCC_OscConfig+0x698>)
 80062a8:	400a      	ands	r2, r1
 80062aa:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d015      	beq.n	80062e0 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062b4:	f7fe fc2c 	bl	8004b10 <HAL_GetTick>
 80062b8:	0003      	movs	r3, r0
 80062ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062bc:	e009      	b.n	80062d2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062be:	f7fe fc27 	bl	8004b10 <HAL_GetTick>
 80062c2:	0002      	movs	r2, r0
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	4a52      	ldr	r2, [pc, #328]	@ (8006414 <HAL_RCC_OscConfig+0x69c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e11b      	b.n	800650a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062d2:	4b4b      	ldr	r3, [pc, #300]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 80062d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80062d6:	2380      	movs	r3, #128	@ 0x80
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4013      	ands	r3, r2
 80062dc:	d0ef      	beq.n	80062be <HAL_RCC_OscConfig+0x546>
 80062de:	e014      	b.n	800630a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062e0:	f7fe fc16 	bl	8004b10 <HAL_GetTick>
 80062e4:	0003      	movs	r3, r0
 80062e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062e8:	e009      	b.n	80062fe <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062ea:	f7fe fc11 	bl	8004b10 <HAL_GetTick>
 80062ee:	0002      	movs	r2, r0
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	4a47      	ldr	r2, [pc, #284]	@ (8006414 <HAL_RCC_OscConfig+0x69c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d901      	bls.n	80062fe <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e105      	b.n	800650a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062fe:	4b40      	ldr	r3, [pc, #256]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 8006300:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006302:	2380      	movs	r3, #128	@ 0x80
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4013      	ands	r3, r2
 8006308:	d1ef      	bne.n	80062ea <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800630a:	2323      	movs	r3, #35	@ 0x23
 800630c:	18fb      	adds	r3, r7, r3
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d105      	bne.n	8006320 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006314:	4b3a      	ldr	r3, [pc, #232]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 8006316:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006318:	4b39      	ldr	r3, [pc, #228]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 800631a:	493f      	ldr	r1, [pc, #252]	@ (8006418 <HAL_RCC_OscConfig+0x6a0>)
 800631c:	400a      	ands	r2, r1
 800631e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2220      	movs	r2, #32
 8006326:	4013      	ands	r3, r2
 8006328:	d049      	beq.n	80063be <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d026      	beq.n	8006380 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006332:	4b33      	ldr	r3, [pc, #204]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 8006334:	689a      	ldr	r2, [r3, #8]
 8006336:	4b32      	ldr	r3, [pc, #200]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 8006338:	2101      	movs	r1, #1
 800633a:	430a      	orrs	r2, r1
 800633c:	609a      	str	r2, [r3, #8]
 800633e:	4b30      	ldr	r3, [pc, #192]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 8006340:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006342:	4b2f      	ldr	r3, [pc, #188]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 8006344:	2101      	movs	r1, #1
 8006346:	430a      	orrs	r2, r1
 8006348:	635a      	str	r2, [r3, #52]	@ 0x34
 800634a:	4b34      	ldr	r3, [pc, #208]	@ (800641c <HAL_RCC_OscConfig+0x6a4>)
 800634c:	6a1a      	ldr	r2, [r3, #32]
 800634e:	4b33      	ldr	r3, [pc, #204]	@ (800641c <HAL_RCC_OscConfig+0x6a4>)
 8006350:	2180      	movs	r1, #128	@ 0x80
 8006352:	0189      	lsls	r1, r1, #6
 8006354:	430a      	orrs	r2, r1
 8006356:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006358:	f7fe fbda 	bl	8004b10 <HAL_GetTick>
 800635c:	0003      	movs	r3, r0
 800635e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006360:	e008      	b.n	8006374 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006362:	f7fe fbd5 	bl	8004b10 <HAL_GetTick>
 8006366:	0002      	movs	r2, r0
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	2b02      	cmp	r3, #2
 800636e:	d901      	bls.n	8006374 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e0ca      	b.n	800650a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006374:	4b22      	ldr	r3, [pc, #136]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	2202      	movs	r2, #2
 800637a:	4013      	ands	r3, r2
 800637c:	d0f1      	beq.n	8006362 <HAL_RCC_OscConfig+0x5ea>
 800637e:	e01e      	b.n	80063be <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8006380:	4b1f      	ldr	r3, [pc, #124]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	4b1e      	ldr	r3, [pc, #120]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 8006386:	2101      	movs	r1, #1
 8006388:	438a      	bics	r2, r1
 800638a:	609a      	str	r2, [r3, #8]
 800638c:	4b23      	ldr	r3, [pc, #140]	@ (800641c <HAL_RCC_OscConfig+0x6a4>)
 800638e:	6a1a      	ldr	r2, [r3, #32]
 8006390:	4b22      	ldr	r3, [pc, #136]	@ (800641c <HAL_RCC_OscConfig+0x6a4>)
 8006392:	4923      	ldr	r1, [pc, #140]	@ (8006420 <HAL_RCC_OscConfig+0x6a8>)
 8006394:	400a      	ands	r2, r1
 8006396:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006398:	f7fe fbba 	bl	8004b10 <HAL_GetTick>
 800639c:	0003      	movs	r3, r0
 800639e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063a0:	e008      	b.n	80063b4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063a2:	f7fe fbb5 	bl	8004b10 <HAL_GetTick>
 80063a6:	0002      	movs	r2, r0
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d901      	bls.n	80063b4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e0aa      	b.n	800650a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063b4:	4b12      	ldr	r3, [pc, #72]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	2202      	movs	r2, #2
 80063ba:	4013      	ands	r3, r2
 80063bc:	d1f1      	bne.n	80063a2 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d100      	bne.n	80063c8 <HAL_RCC_OscConfig+0x650>
 80063c6:	e09f      	b.n	8006508 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	2b0c      	cmp	r3, #12
 80063cc:	d100      	bne.n	80063d0 <HAL_RCC_OscConfig+0x658>
 80063ce:	e078      	b.n	80064c2 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d159      	bne.n	800648c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063d8:	4b09      	ldr	r3, [pc, #36]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	4b08      	ldr	r3, [pc, #32]	@ (8006400 <HAL_RCC_OscConfig+0x688>)
 80063de:	4911      	ldr	r1, [pc, #68]	@ (8006424 <HAL_RCC_OscConfig+0x6ac>)
 80063e0:	400a      	ands	r2, r1
 80063e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063e4:	f7fe fb94 	bl	8004b10 <HAL_GetTick>
 80063e8:	0003      	movs	r3, r0
 80063ea:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80063ec:	e01c      	b.n	8006428 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063ee:	f7fe fb8f 	bl	8004b10 <HAL_GetTick>
 80063f2:	0002      	movs	r2, r0
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d915      	bls.n	8006428 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e084      	b.n	800650a <HAL_RCC_OscConfig+0x792>
 8006400:	40021000 	.word	0x40021000
 8006404:	ffff1fff 	.word	0xffff1fff
 8006408:	fffffeff 	.word	0xfffffeff
 800640c:	40007000 	.word	0x40007000
 8006410:	fffffbff 	.word	0xfffffbff
 8006414:	00001388 	.word	0x00001388
 8006418:	efffffff 	.word	0xefffffff
 800641c:	40010000 	.word	0x40010000
 8006420:	ffffdfff 	.word	0xffffdfff
 8006424:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006428:	4b3a      	ldr	r3, [pc, #232]	@ (8006514 <HAL_RCC_OscConfig+0x79c>)
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	2380      	movs	r3, #128	@ 0x80
 800642e:	049b      	lsls	r3, r3, #18
 8006430:	4013      	ands	r3, r2
 8006432:	d1dc      	bne.n	80063ee <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006434:	4b37      	ldr	r3, [pc, #220]	@ (8006514 <HAL_RCC_OscConfig+0x79c>)
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	4a37      	ldr	r2, [pc, #220]	@ (8006518 <HAL_RCC_OscConfig+0x7a0>)
 800643a:	4013      	ands	r3, r2
 800643c:	0019      	movs	r1, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006446:	431a      	orrs	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800644c:	431a      	orrs	r2, r3
 800644e:	4b31      	ldr	r3, [pc, #196]	@ (8006514 <HAL_RCC_OscConfig+0x79c>)
 8006450:	430a      	orrs	r2, r1
 8006452:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006454:	4b2f      	ldr	r3, [pc, #188]	@ (8006514 <HAL_RCC_OscConfig+0x79c>)
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	4b2e      	ldr	r3, [pc, #184]	@ (8006514 <HAL_RCC_OscConfig+0x79c>)
 800645a:	2180      	movs	r1, #128	@ 0x80
 800645c:	0449      	lsls	r1, r1, #17
 800645e:	430a      	orrs	r2, r1
 8006460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006462:	f7fe fb55 	bl	8004b10 <HAL_GetTick>
 8006466:	0003      	movs	r3, r0
 8006468:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800646a:	e008      	b.n	800647e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800646c:	f7fe fb50 	bl	8004b10 <HAL_GetTick>
 8006470:	0002      	movs	r2, r0
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b02      	cmp	r3, #2
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e045      	b.n	800650a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800647e:	4b25      	ldr	r3, [pc, #148]	@ (8006514 <HAL_RCC_OscConfig+0x79c>)
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	2380      	movs	r3, #128	@ 0x80
 8006484:	049b      	lsls	r3, r3, #18
 8006486:	4013      	ands	r3, r2
 8006488:	d0f0      	beq.n	800646c <HAL_RCC_OscConfig+0x6f4>
 800648a:	e03d      	b.n	8006508 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800648c:	4b21      	ldr	r3, [pc, #132]	@ (8006514 <HAL_RCC_OscConfig+0x79c>)
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	4b20      	ldr	r3, [pc, #128]	@ (8006514 <HAL_RCC_OscConfig+0x79c>)
 8006492:	4922      	ldr	r1, [pc, #136]	@ (800651c <HAL_RCC_OscConfig+0x7a4>)
 8006494:	400a      	ands	r2, r1
 8006496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006498:	f7fe fb3a 	bl	8004b10 <HAL_GetTick>
 800649c:	0003      	movs	r3, r0
 800649e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80064a0:	e008      	b.n	80064b4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064a2:	f7fe fb35 	bl	8004b10 <HAL_GetTick>
 80064a6:	0002      	movs	r2, r0
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d901      	bls.n	80064b4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e02a      	b.n	800650a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80064b4:	4b17      	ldr	r3, [pc, #92]	@ (8006514 <HAL_RCC_OscConfig+0x79c>)
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	2380      	movs	r3, #128	@ 0x80
 80064ba:	049b      	lsls	r3, r3, #18
 80064bc:	4013      	ands	r3, r2
 80064be:	d1f0      	bne.n	80064a2 <HAL_RCC_OscConfig+0x72a>
 80064c0:	e022      	b.n	8006508 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d101      	bne.n	80064ce <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e01d      	b.n	800650a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80064ce:	4b11      	ldr	r3, [pc, #68]	@ (8006514 <HAL_RCC_OscConfig+0x79c>)
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	2380      	movs	r3, #128	@ 0x80
 80064d8:	025b      	lsls	r3, r3, #9
 80064da:	401a      	ands	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d10f      	bne.n	8006504 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80064e4:	69ba      	ldr	r2, [r7, #24]
 80064e6:	23f0      	movs	r3, #240	@ 0xf0
 80064e8:	039b      	lsls	r3, r3, #14
 80064ea:	401a      	ands	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d107      	bne.n	8006504 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	23c0      	movs	r3, #192	@ 0xc0
 80064f8:	041b      	lsls	r3, r3, #16
 80064fa:	401a      	ands	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006500:	429a      	cmp	r2, r3
 8006502:	d001      	beq.n	8006508 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e000      	b.n	800650a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	0018      	movs	r0, r3
 800650c:	46bd      	mov	sp, r7
 800650e:	b00a      	add	sp, #40	@ 0x28
 8006510:	bdb0      	pop	{r4, r5, r7, pc}
 8006512:	46c0      	nop			@ (mov r8, r8)
 8006514:	40021000 	.word	0x40021000
 8006518:	ff02ffff 	.word	0xff02ffff
 800651c:	feffffff 	.word	0xfeffffff

08006520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006520:	b5b0      	push	{r4, r5, r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e128      	b.n	8006786 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006534:	4b96      	ldr	r3, [pc, #600]	@ (8006790 <HAL_RCC_ClockConfig+0x270>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2201      	movs	r2, #1
 800653a:	4013      	ands	r3, r2
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	429a      	cmp	r2, r3
 8006540:	d91e      	bls.n	8006580 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006542:	4b93      	ldr	r3, [pc, #588]	@ (8006790 <HAL_RCC_ClockConfig+0x270>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2201      	movs	r2, #1
 8006548:	4393      	bics	r3, r2
 800654a:	0019      	movs	r1, r3
 800654c:	4b90      	ldr	r3, [pc, #576]	@ (8006790 <HAL_RCC_ClockConfig+0x270>)
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	430a      	orrs	r2, r1
 8006552:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006554:	f7fe fadc 	bl	8004b10 <HAL_GetTick>
 8006558:	0003      	movs	r3, r0
 800655a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800655c:	e009      	b.n	8006572 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800655e:	f7fe fad7 	bl	8004b10 <HAL_GetTick>
 8006562:	0002      	movs	r2, r0
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	4a8a      	ldr	r2, [pc, #552]	@ (8006794 <HAL_RCC_ClockConfig+0x274>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e109      	b.n	8006786 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006572:	4b87      	ldr	r3, [pc, #540]	@ (8006790 <HAL_RCC_ClockConfig+0x270>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2201      	movs	r2, #1
 8006578:	4013      	ands	r3, r2
 800657a:	683a      	ldr	r2, [r7, #0]
 800657c:	429a      	cmp	r2, r3
 800657e:	d1ee      	bne.n	800655e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2202      	movs	r2, #2
 8006586:	4013      	ands	r3, r2
 8006588:	d009      	beq.n	800659e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800658a:	4b83      	ldr	r3, [pc, #524]	@ (8006798 <HAL_RCC_ClockConfig+0x278>)
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	22f0      	movs	r2, #240	@ 0xf0
 8006590:	4393      	bics	r3, r2
 8006592:	0019      	movs	r1, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689a      	ldr	r2, [r3, #8]
 8006598:	4b7f      	ldr	r3, [pc, #508]	@ (8006798 <HAL_RCC_ClockConfig+0x278>)
 800659a:	430a      	orrs	r2, r1
 800659c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2201      	movs	r2, #1
 80065a4:	4013      	ands	r3, r2
 80065a6:	d100      	bne.n	80065aa <HAL_RCC_ClockConfig+0x8a>
 80065a8:	e089      	b.n	80066be <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d107      	bne.n	80065c2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065b2:	4b79      	ldr	r3, [pc, #484]	@ (8006798 <HAL_RCC_ClockConfig+0x278>)
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	2380      	movs	r3, #128	@ 0x80
 80065b8:	029b      	lsls	r3, r3, #10
 80065ba:	4013      	ands	r3, r2
 80065bc:	d120      	bne.n	8006600 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e0e1      	b.n	8006786 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d107      	bne.n	80065da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065ca:	4b73      	ldr	r3, [pc, #460]	@ (8006798 <HAL_RCC_ClockConfig+0x278>)
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	2380      	movs	r3, #128	@ 0x80
 80065d0:	049b      	lsls	r3, r3, #18
 80065d2:	4013      	ands	r3, r2
 80065d4:	d114      	bne.n	8006600 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e0d5      	b.n	8006786 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d106      	bne.n	80065f0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065e2:	4b6d      	ldr	r3, [pc, #436]	@ (8006798 <HAL_RCC_ClockConfig+0x278>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2204      	movs	r2, #4
 80065e8:	4013      	ands	r3, r2
 80065ea:	d109      	bne.n	8006600 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e0ca      	b.n	8006786 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80065f0:	4b69      	ldr	r3, [pc, #420]	@ (8006798 <HAL_RCC_ClockConfig+0x278>)
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	2380      	movs	r3, #128	@ 0x80
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4013      	ands	r3, r2
 80065fa:	d101      	bne.n	8006600 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e0c2      	b.n	8006786 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006600:	4b65      	ldr	r3, [pc, #404]	@ (8006798 <HAL_RCC_ClockConfig+0x278>)
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	2203      	movs	r2, #3
 8006606:	4393      	bics	r3, r2
 8006608:	0019      	movs	r1, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	4b62      	ldr	r3, [pc, #392]	@ (8006798 <HAL_RCC_ClockConfig+0x278>)
 8006610:	430a      	orrs	r2, r1
 8006612:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006614:	f7fe fa7c 	bl	8004b10 <HAL_GetTick>
 8006618:	0003      	movs	r3, r0
 800661a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	2b02      	cmp	r3, #2
 8006622:	d111      	bne.n	8006648 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006624:	e009      	b.n	800663a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006626:	f7fe fa73 	bl	8004b10 <HAL_GetTick>
 800662a:	0002      	movs	r2, r0
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	4a58      	ldr	r2, [pc, #352]	@ (8006794 <HAL_RCC_ClockConfig+0x274>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d901      	bls.n	800663a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e0a5      	b.n	8006786 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800663a:	4b57      	ldr	r3, [pc, #348]	@ (8006798 <HAL_RCC_ClockConfig+0x278>)
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	220c      	movs	r2, #12
 8006640:	4013      	ands	r3, r2
 8006642:	2b08      	cmp	r3, #8
 8006644:	d1ef      	bne.n	8006626 <HAL_RCC_ClockConfig+0x106>
 8006646:	e03a      	b.n	80066be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	2b03      	cmp	r3, #3
 800664e:	d111      	bne.n	8006674 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006650:	e009      	b.n	8006666 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006652:	f7fe fa5d 	bl	8004b10 <HAL_GetTick>
 8006656:	0002      	movs	r2, r0
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	4a4d      	ldr	r2, [pc, #308]	@ (8006794 <HAL_RCC_ClockConfig+0x274>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d901      	bls.n	8006666 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e08f      	b.n	8006786 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006666:	4b4c      	ldr	r3, [pc, #304]	@ (8006798 <HAL_RCC_ClockConfig+0x278>)
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	220c      	movs	r2, #12
 800666c:	4013      	ands	r3, r2
 800666e:	2b0c      	cmp	r3, #12
 8006670:	d1ef      	bne.n	8006652 <HAL_RCC_ClockConfig+0x132>
 8006672:	e024      	b.n	80066be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d11b      	bne.n	80066b4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800667c:	e009      	b.n	8006692 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800667e:	f7fe fa47 	bl	8004b10 <HAL_GetTick>
 8006682:	0002      	movs	r2, r0
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	4a42      	ldr	r2, [pc, #264]	@ (8006794 <HAL_RCC_ClockConfig+0x274>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d901      	bls.n	8006692 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e079      	b.n	8006786 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006692:	4b41      	ldr	r3, [pc, #260]	@ (8006798 <HAL_RCC_ClockConfig+0x278>)
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	220c      	movs	r2, #12
 8006698:	4013      	ands	r3, r2
 800669a:	2b04      	cmp	r3, #4
 800669c:	d1ef      	bne.n	800667e <HAL_RCC_ClockConfig+0x15e>
 800669e:	e00e      	b.n	80066be <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066a0:	f7fe fa36 	bl	8004b10 <HAL_GetTick>
 80066a4:	0002      	movs	r2, r0
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	4a3a      	ldr	r2, [pc, #232]	@ (8006794 <HAL_RCC_ClockConfig+0x274>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d901      	bls.n	80066b4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e068      	b.n	8006786 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80066b4:	4b38      	ldr	r3, [pc, #224]	@ (8006798 <HAL_RCC_ClockConfig+0x278>)
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	220c      	movs	r2, #12
 80066ba:	4013      	ands	r3, r2
 80066bc:	d1f0      	bne.n	80066a0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066be:	4b34      	ldr	r3, [pc, #208]	@ (8006790 <HAL_RCC_ClockConfig+0x270>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2201      	movs	r2, #1
 80066c4:	4013      	ands	r3, r2
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d21e      	bcs.n	800670a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066cc:	4b30      	ldr	r3, [pc, #192]	@ (8006790 <HAL_RCC_ClockConfig+0x270>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2201      	movs	r2, #1
 80066d2:	4393      	bics	r3, r2
 80066d4:	0019      	movs	r1, r3
 80066d6:	4b2e      	ldr	r3, [pc, #184]	@ (8006790 <HAL_RCC_ClockConfig+0x270>)
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80066de:	f7fe fa17 	bl	8004b10 <HAL_GetTick>
 80066e2:	0003      	movs	r3, r0
 80066e4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066e6:	e009      	b.n	80066fc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066e8:	f7fe fa12 	bl	8004b10 <HAL_GetTick>
 80066ec:	0002      	movs	r2, r0
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	4a28      	ldr	r2, [pc, #160]	@ (8006794 <HAL_RCC_ClockConfig+0x274>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d901      	bls.n	80066fc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e044      	b.n	8006786 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066fc:	4b24      	ldr	r3, [pc, #144]	@ (8006790 <HAL_RCC_ClockConfig+0x270>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2201      	movs	r2, #1
 8006702:	4013      	ands	r3, r2
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	429a      	cmp	r2, r3
 8006708:	d1ee      	bne.n	80066e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2204      	movs	r2, #4
 8006710:	4013      	ands	r3, r2
 8006712:	d009      	beq.n	8006728 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006714:	4b20      	ldr	r3, [pc, #128]	@ (8006798 <HAL_RCC_ClockConfig+0x278>)
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	4a20      	ldr	r2, [pc, #128]	@ (800679c <HAL_RCC_ClockConfig+0x27c>)
 800671a:	4013      	ands	r3, r2
 800671c:	0019      	movs	r1, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68da      	ldr	r2, [r3, #12]
 8006722:	4b1d      	ldr	r3, [pc, #116]	@ (8006798 <HAL_RCC_ClockConfig+0x278>)
 8006724:	430a      	orrs	r2, r1
 8006726:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2208      	movs	r2, #8
 800672e:	4013      	ands	r3, r2
 8006730:	d00a      	beq.n	8006748 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006732:	4b19      	ldr	r3, [pc, #100]	@ (8006798 <HAL_RCC_ClockConfig+0x278>)
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	4a1a      	ldr	r2, [pc, #104]	@ (80067a0 <HAL_RCC_ClockConfig+0x280>)
 8006738:	4013      	ands	r3, r2
 800673a:	0019      	movs	r1, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	00da      	lsls	r2, r3, #3
 8006742:	4b15      	ldr	r3, [pc, #84]	@ (8006798 <HAL_RCC_ClockConfig+0x278>)
 8006744:	430a      	orrs	r2, r1
 8006746:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006748:	f000 f832 	bl	80067b0 <HAL_RCC_GetSysClockFreq>
 800674c:	0001      	movs	r1, r0
 800674e:	4b12      	ldr	r3, [pc, #72]	@ (8006798 <HAL_RCC_ClockConfig+0x278>)
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	091b      	lsrs	r3, r3, #4
 8006754:	220f      	movs	r2, #15
 8006756:	4013      	ands	r3, r2
 8006758:	4a12      	ldr	r2, [pc, #72]	@ (80067a4 <HAL_RCC_ClockConfig+0x284>)
 800675a:	5cd3      	ldrb	r3, [r2, r3]
 800675c:	000a      	movs	r2, r1
 800675e:	40da      	lsrs	r2, r3
 8006760:	4b11      	ldr	r3, [pc, #68]	@ (80067a8 <HAL_RCC_ClockConfig+0x288>)
 8006762:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006764:	4b11      	ldr	r3, [pc, #68]	@ (80067ac <HAL_RCC_ClockConfig+0x28c>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	250b      	movs	r5, #11
 800676a:	197c      	adds	r4, r7, r5
 800676c:	0018      	movs	r0, r3
 800676e:	f7fe f989 	bl	8004a84 <HAL_InitTick>
 8006772:	0003      	movs	r3, r0
 8006774:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8006776:	197b      	adds	r3, r7, r5
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d002      	beq.n	8006784 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800677e:	197b      	adds	r3, r7, r5
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	e000      	b.n	8006786 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	0018      	movs	r0, r3
 8006788:	46bd      	mov	sp, r7
 800678a:	b004      	add	sp, #16
 800678c:	bdb0      	pop	{r4, r5, r7, pc}
 800678e:	46c0      	nop			@ (mov r8, r8)
 8006790:	40022000 	.word	0x40022000
 8006794:	00001388 	.word	0x00001388
 8006798:	40021000 	.word	0x40021000
 800679c:	fffff8ff 	.word	0xfffff8ff
 80067a0:	ffffc7ff 	.word	0xffffc7ff
 80067a4:	0800b09c 	.word	0x0800b09c
 80067a8:	20000000 	.word	0x20000000
 80067ac:	20000004 	.word	0x20000004

080067b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80067b6:	4b3c      	ldr	r3, [pc, #240]	@ (80068a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	220c      	movs	r2, #12
 80067c0:	4013      	ands	r3, r2
 80067c2:	2b0c      	cmp	r3, #12
 80067c4:	d013      	beq.n	80067ee <HAL_RCC_GetSysClockFreq+0x3e>
 80067c6:	d85c      	bhi.n	8006882 <HAL_RCC_GetSysClockFreq+0xd2>
 80067c8:	2b04      	cmp	r3, #4
 80067ca:	d002      	beq.n	80067d2 <HAL_RCC_GetSysClockFreq+0x22>
 80067cc:	2b08      	cmp	r3, #8
 80067ce:	d00b      	beq.n	80067e8 <HAL_RCC_GetSysClockFreq+0x38>
 80067d0:	e057      	b.n	8006882 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80067d2:	4b35      	ldr	r3, [pc, #212]	@ (80068a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2210      	movs	r2, #16
 80067d8:	4013      	ands	r3, r2
 80067da:	d002      	beq.n	80067e2 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80067dc:	4b33      	ldr	r3, [pc, #204]	@ (80068ac <HAL_RCC_GetSysClockFreq+0xfc>)
 80067de:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80067e0:	e05d      	b.n	800689e <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80067e2:	4b33      	ldr	r3, [pc, #204]	@ (80068b0 <HAL_RCC_GetSysClockFreq+0x100>)
 80067e4:	613b      	str	r3, [r7, #16]
      break;
 80067e6:	e05a      	b.n	800689e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80067e8:	4b32      	ldr	r3, [pc, #200]	@ (80068b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80067ea:	613b      	str	r3, [r7, #16]
      break;
 80067ec:	e057      	b.n	800689e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	0c9b      	lsrs	r3, r3, #18
 80067f2:	220f      	movs	r2, #15
 80067f4:	4013      	ands	r3, r2
 80067f6:	4a30      	ldr	r2, [pc, #192]	@ (80068b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80067f8:	5cd3      	ldrb	r3, [r2, r3]
 80067fa:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	0d9b      	lsrs	r3, r3, #22
 8006800:	2203      	movs	r2, #3
 8006802:	4013      	ands	r3, r2
 8006804:	3301      	adds	r3, #1
 8006806:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006808:	4b27      	ldr	r3, [pc, #156]	@ (80068a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800680a:	68da      	ldr	r2, [r3, #12]
 800680c:	2380      	movs	r3, #128	@ 0x80
 800680e:	025b      	lsls	r3, r3, #9
 8006810:	4013      	ands	r3, r2
 8006812:	d00f      	beq.n	8006834 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8006814:	68b9      	ldr	r1, [r7, #8]
 8006816:	000a      	movs	r2, r1
 8006818:	0152      	lsls	r2, r2, #5
 800681a:	1a52      	subs	r2, r2, r1
 800681c:	0193      	lsls	r3, r2, #6
 800681e:	1a9b      	subs	r3, r3, r2
 8006820:	00db      	lsls	r3, r3, #3
 8006822:	185b      	adds	r3, r3, r1
 8006824:	025b      	lsls	r3, r3, #9
 8006826:	6879      	ldr	r1, [r7, #4]
 8006828:	0018      	movs	r0, r3
 800682a:	f7f9 fc89 	bl	8000140 <__udivsi3>
 800682e:	0003      	movs	r3, r0
 8006830:	617b      	str	r3, [r7, #20]
 8006832:	e023      	b.n	800687c <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006834:	4b1c      	ldr	r3, [pc, #112]	@ (80068a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2210      	movs	r2, #16
 800683a:	4013      	ands	r3, r2
 800683c:	d00f      	beq.n	800685e <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 800683e:	68b9      	ldr	r1, [r7, #8]
 8006840:	000a      	movs	r2, r1
 8006842:	0152      	lsls	r2, r2, #5
 8006844:	1a52      	subs	r2, r2, r1
 8006846:	0193      	lsls	r3, r2, #6
 8006848:	1a9b      	subs	r3, r3, r2
 800684a:	00db      	lsls	r3, r3, #3
 800684c:	185b      	adds	r3, r3, r1
 800684e:	021b      	lsls	r3, r3, #8
 8006850:	6879      	ldr	r1, [r7, #4]
 8006852:	0018      	movs	r0, r3
 8006854:	f7f9 fc74 	bl	8000140 <__udivsi3>
 8006858:	0003      	movs	r3, r0
 800685a:	617b      	str	r3, [r7, #20]
 800685c:	e00e      	b.n	800687c <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 800685e:	68b9      	ldr	r1, [r7, #8]
 8006860:	000a      	movs	r2, r1
 8006862:	0152      	lsls	r2, r2, #5
 8006864:	1a52      	subs	r2, r2, r1
 8006866:	0193      	lsls	r3, r2, #6
 8006868:	1a9b      	subs	r3, r3, r2
 800686a:	00db      	lsls	r3, r3, #3
 800686c:	185b      	adds	r3, r3, r1
 800686e:	029b      	lsls	r3, r3, #10
 8006870:	6879      	ldr	r1, [r7, #4]
 8006872:	0018      	movs	r0, r3
 8006874:	f7f9 fc64 	bl	8000140 <__udivsi3>
 8006878:	0003      	movs	r3, r0
 800687a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	613b      	str	r3, [r7, #16]
      break;
 8006880:	e00d      	b.n	800689e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006882:	4b09      	ldr	r3, [pc, #36]	@ (80068a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	0b5b      	lsrs	r3, r3, #13
 8006888:	2207      	movs	r2, #7
 800688a:	4013      	ands	r3, r2
 800688c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	3301      	adds	r3, #1
 8006892:	2280      	movs	r2, #128	@ 0x80
 8006894:	0212      	lsls	r2, r2, #8
 8006896:	409a      	lsls	r2, r3
 8006898:	0013      	movs	r3, r2
 800689a:	613b      	str	r3, [r7, #16]
      break;
 800689c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800689e:	693b      	ldr	r3, [r7, #16]
}
 80068a0:	0018      	movs	r0, r3
 80068a2:	46bd      	mov	sp, r7
 80068a4:	b006      	add	sp, #24
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	40021000 	.word	0x40021000
 80068ac:	003d0900 	.word	0x003d0900
 80068b0:	00f42400 	.word	0x00f42400
 80068b4:	007a1200 	.word	0x007a1200
 80068b8:	0800b0b4 	.word	0x0800b0b4

080068bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068c0:	4b02      	ldr	r3, [pc, #8]	@ (80068cc <HAL_RCC_GetHCLKFreq+0x10>)
 80068c2:	681b      	ldr	r3, [r3, #0]
}
 80068c4:	0018      	movs	r0, r3
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	46c0      	nop			@ (mov r8, r8)
 80068cc:	20000000 	.word	0x20000000

080068d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80068d4:	f7ff fff2 	bl	80068bc <HAL_RCC_GetHCLKFreq>
 80068d8:	0001      	movs	r1, r0
 80068da:	4b06      	ldr	r3, [pc, #24]	@ (80068f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	0a1b      	lsrs	r3, r3, #8
 80068e0:	2207      	movs	r2, #7
 80068e2:	4013      	ands	r3, r2
 80068e4:	4a04      	ldr	r2, [pc, #16]	@ (80068f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80068e6:	5cd3      	ldrb	r3, [r2, r3]
 80068e8:	40d9      	lsrs	r1, r3
 80068ea:	000b      	movs	r3, r1
}
 80068ec:	0018      	movs	r0, r3
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	46c0      	nop			@ (mov r8, r8)
 80068f4:	40021000 	.word	0x40021000
 80068f8:	0800b0ac 	.word	0x0800b0ac

080068fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006900:	f7ff ffdc 	bl	80068bc <HAL_RCC_GetHCLKFreq>
 8006904:	0001      	movs	r1, r0
 8006906:	4b06      	ldr	r3, [pc, #24]	@ (8006920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	0adb      	lsrs	r3, r3, #11
 800690c:	2207      	movs	r2, #7
 800690e:	4013      	ands	r3, r2
 8006910:	4a04      	ldr	r2, [pc, #16]	@ (8006924 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006912:	5cd3      	ldrb	r3, [r2, r3]
 8006914:	40d9      	lsrs	r1, r3
 8006916:	000b      	movs	r3, r1
}
 8006918:	0018      	movs	r0, r3
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	46c0      	nop			@ (mov r8, r8)
 8006920:	40021000 	.word	0x40021000
 8006924:	0800b0ac 	.word	0x0800b0ac

08006928 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8006930:	2317      	movs	r3, #23
 8006932:	18fb      	adds	r3, r7, r3
 8006934:	2200      	movs	r2, #0
 8006936:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2220      	movs	r2, #32
 800693e:	4013      	ands	r3, r2
 8006940:	d106      	bne.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	2380      	movs	r3, #128	@ 0x80
 8006948:	011b      	lsls	r3, r3, #4
 800694a:	4013      	ands	r3, r2
 800694c:	d100      	bne.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800694e:	e104      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006950:	4bb9      	ldr	r3, [pc, #740]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006952:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006954:	2380      	movs	r3, #128	@ 0x80
 8006956:	055b      	lsls	r3, r3, #21
 8006958:	4013      	ands	r3, r2
 800695a:	d10a      	bne.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800695c:	4bb6      	ldr	r3, [pc, #728]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800695e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006960:	4bb5      	ldr	r3, [pc, #724]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006962:	2180      	movs	r1, #128	@ 0x80
 8006964:	0549      	lsls	r1, r1, #21
 8006966:	430a      	orrs	r2, r1
 8006968:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800696a:	2317      	movs	r3, #23
 800696c:	18fb      	adds	r3, r7, r3
 800696e:	2201      	movs	r2, #1
 8006970:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006972:	4bb2      	ldr	r3, [pc, #712]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	2380      	movs	r3, #128	@ 0x80
 8006978:	005b      	lsls	r3, r3, #1
 800697a:	4013      	ands	r3, r2
 800697c:	d11a      	bne.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800697e:	4baf      	ldr	r3, [pc, #700]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	4bae      	ldr	r3, [pc, #696]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006984:	2180      	movs	r1, #128	@ 0x80
 8006986:	0049      	lsls	r1, r1, #1
 8006988:	430a      	orrs	r2, r1
 800698a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800698c:	f7fe f8c0 	bl	8004b10 <HAL_GetTick>
 8006990:	0003      	movs	r3, r0
 8006992:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006994:	e008      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006996:	f7fe f8bb 	bl	8004b10 <HAL_GetTick>
 800699a:	0002      	movs	r2, r0
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	2b64      	cmp	r3, #100	@ 0x64
 80069a2:	d901      	bls.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e143      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069a8:	4ba4      	ldr	r3, [pc, #656]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	2380      	movs	r3, #128	@ 0x80
 80069ae:	005b      	lsls	r3, r3, #1
 80069b0:	4013      	ands	r3, r2
 80069b2:	d0f0      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80069b4:	4ba0      	ldr	r3, [pc, #640]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	23c0      	movs	r3, #192	@ 0xc0
 80069ba:	039b      	lsls	r3, r3, #14
 80069bc:	4013      	ands	r3, r2
 80069be:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	23c0      	movs	r3, #192	@ 0xc0
 80069c6:	039b      	lsls	r3, r3, #14
 80069c8:	4013      	ands	r3, r2
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d107      	bne.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	23c0      	movs	r3, #192	@ 0xc0
 80069d6:	039b      	lsls	r3, r3, #14
 80069d8:	4013      	ands	r3, r2
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d013      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	23c0      	movs	r3, #192	@ 0xc0
 80069e6:	029b      	lsls	r3, r3, #10
 80069e8:	401a      	ands	r2, r3
 80069ea:	23c0      	movs	r3, #192	@ 0xc0
 80069ec:	029b      	lsls	r3, r3, #10
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d10a      	bne.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80069f2:	4b91      	ldr	r3, [pc, #580]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	2380      	movs	r3, #128	@ 0x80
 80069f8:	029b      	lsls	r3, r3, #10
 80069fa:	401a      	ands	r2, r3
 80069fc:	2380      	movs	r3, #128	@ 0x80
 80069fe:	029b      	lsls	r3, r3, #10
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d101      	bne.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e113      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006a08:	4b8b      	ldr	r3, [pc, #556]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006a0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a0c:	23c0      	movs	r3, #192	@ 0xc0
 8006a0e:	029b      	lsls	r3, r3, #10
 8006a10:	4013      	ands	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d049      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	23c0      	movs	r3, #192	@ 0xc0
 8006a20:	029b      	lsls	r3, r3, #10
 8006a22:	4013      	ands	r3, r2
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d004      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	4013      	ands	r3, r2
 8006a32:	d10d      	bne.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	689a      	ldr	r2, [r3, #8]
 8006a38:	23c0      	movs	r3, #192	@ 0xc0
 8006a3a:	029b      	lsls	r3, r3, #10
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d034      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	2380      	movs	r3, #128	@ 0x80
 8006a4a:	011b      	lsls	r3, r3, #4
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	d02e      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006a50:	4b79      	ldr	r3, [pc, #484]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a54:	4a7a      	ldr	r2, [pc, #488]	@ (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8006a56:	4013      	ands	r3, r2
 8006a58:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a5a:	4b77      	ldr	r3, [pc, #476]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006a5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a5e:	4b76      	ldr	r3, [pc, #472]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006a60:	2180      	movs	r1, #128	@ 0x80
 8006a62:	0309      	lsls	r1, r1, #12
 8006a64:	430a      	orrs	r2, r1
 8006a66:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a68:	4b73      	ldr	r3, [pc, #460]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006a6a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a6c:	4b72      	ldr	r3, [pc, #456]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006a6e:	4975      	ldr	r1, [pc, #468]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006a70:	400a      	ands	r2, r1
 8006a72:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006a74:	4b70      	ldr	r3, [pc, #448]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	2380      	movs	r3, #128	@ 0x80
 8006a7e:	005b      	lsls	r3, r3, #1
 8006a80:	4013      	ands	r3, r2
 8006a82:	d014      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a84:	f7fe f844 	bl	8004b10 <HAL_GetTick>
 8006a88:	0003      	movs	r3, r0
 8006a8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a8c:	e009      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a8e:	f7fe f83f 	bl	8004b10 <HAL_GetTick>
 8006a92:	0002      	movs	r2, r0
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	4a6b      	ldr	r2, [pc, #428]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d901      	bls.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e0c6      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006aa2:	4b65      	ldr	r3, [pc, #404]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006aa4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006aa6:	2380      	movs	r3, #128	@ 0x80
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4013      	ands	r3, r2
 8006aac:	d0ef      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	2380      	movs	r3, #128	@ 0x80
 8006ab4:	011b      	lsls	r3, r3, #4
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	d01f      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	689a      	ldr	r2, [r3, #8]
 8006abe:	23c0      	movs	r3, #192	@ 0xc0
 8006ac0:	029b      	lsls	r3, r3, #10
 8006ac2:	401a      	ands	r2, r3
 8006ac4:	23c0      	movs	r3, #192	@ 0xc0
 8006ac6:	029b      	lsls	r3, r3, #10
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d10c      	bne.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8006acc:	4b5a      	ldr	r3, [pc, #360]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a5e      	ldr	r2, [pc, #376]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	0019      	movs	r1, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	689a      	ldr	r2, [r3, #8]
 8006ada:	23c0      	movs	r3, #192	@ 0xc0
 8006adc:	039b      	lsls	r3, r3, #14
 8006ade:	401a      	ands	r2, r3
 8006ae0:	4b55      	ldr	r3, [pc, #340]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	601a      	str	r2, [r3, #0]
 8006ae6:	4b54      	ldr	r3, [pc, #336]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006ae8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	689a      	ldr	r2, [r3, #8]
 8006aee:	23c0      	movs	r3, #192	@ 0xc0
 8006af0:	029b      	lsls	r3, r3, #10
 8006af2:	401a      	ands	r2, r3
 8006af4:	4b50      	ldr	r3, [pc, #320]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006af6:	430a      	orrs	r2, r1
 8006af8:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2220      	movs	r2, #32
 8006b00:	4013      	ands	r3, r2
 8006b02:	d01f      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685a      	ldr	r2, [r3, #4]
 8006b08:	23c0      	movs	r3, #192	@ 0xc0
 8006b0a:	029b      	lsls	r3, r3, #10
 8006b0c:	401a      	ands	r2, r3
 8006b0e:	23c0      	movs	r3, #192	@ 0xc0
 8006b10:	029b      	lsls	r3, r3, #10
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d10c      	bne.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8006b16:	4b48      	ldr	r3, [pc, #288]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a4c      	ldr	r2, [pc, #304]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	0019      	movs	r1, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	23c0      	movs	r3, #192	@ 0xc0
 8006b26:	039b      	lsls	r3, r3, #14
 8006b28:	401a      	ands	r2, r3
 8006b2a:	4b43      	ldr	r3, [pc, #268]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006b2c:	430a      	orrs	r2, r1
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	4b41      	ldr	r3, [pc, #260]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006b32:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	23c0      	movs	r3, #192	@ 0xc0
 8006b3a:	029b      	lsls	r3, r3, #10
 8006b3c:	401a      	ands	r2, r3
 8006b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006b40:	430a      	orrs	r2, r1
 8006b42:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006b44:	2317      	movs	r3, #23
 8006b46:	18fb      	adds	r3, r7, r3
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d105      	bne.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b4e:	4b3a      	ldr	r3, [pc, #232]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006b50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b52:	4b39      	ldr	r3, [pc, #228]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006b54:	493e      	ldr	r1, [pc, #248]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006b56:	400a      	ands	r2, r1
 8006b58:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	4013      	ands	r3, r2
 8006b62:	d009      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b64:	4b34      	ldr	r3, [pc, #208]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b68:	2203      	movs	r2, #3
 8006b6a:	4393      	bics	r3, r2
 8006b6c:	0019      	movs	r1, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	68da      	ldr	r2, [r3, #12]
 8006b72:	4b31      	ldr	r3, [pc, #196]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006b74:	430a      	orrs	r2, r1
 8006b76:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2202      	movs	r2, #2
 8006b7e:	4013      	ands	r3, r2
 8006b80:	d009      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b82:	4b2d      	ldr	r3, [pc, #180]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b86:	220c      	movs	r2, #12
 8006b88:	4393      	bics	r3, r2
 8006b8a:	0019      	movs	r1, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	691a      	ldr	r2, [r3, #16]
 8006b90:	4b29      	ldr	r3, [pc, #164]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006b92:	430a      	orrs	r2, r1
 8006b94:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2204      	movs	r2, #4
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	d009      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ba0:	4b25      	ldr	r3, [pc, #148]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ba4:	4a2b      	ldr	r2, [pc, #172]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	0019      	movs	r1, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	695a      	ldr	r2, [r3, #20]
 8006bae:	4b22      	ldr	r3, [pc, #136]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006bb0:	430a      	orrs	r2, r1
 8006bb2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2208      	movs	r2, #8
 8006bba:	4013      	ands	r3, r2
 8006bbc:	d009      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bc2:	4a25      	ldr	r2, [pc, #148]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	0019      	movs	r1, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	699a      	ldr	r2, [r3, #24]
 8006bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006bce:	430a      	orrs	r2, r1
 8006bd0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	2380      	movs	r3, #128	@ 0x80
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	4013      	ands	r3, r2
 8006bdc:	d009      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006bde:	4b16      	ldr	r3, [pc, #88]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006be2:	4a17      	ldr	r2, [pc, #92]	@ (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8006be4:	4013      	ands	r3, r2
 8006be6:	0019      	movs	r1, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	69da      	ldr	r2, [r3, #28]
 8006bec:	4b12      	ldr	r3, [pc, #72]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2240      	movs	r2, #64	@ 0x40
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	d009      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c00:	4a16      	ldr	r2, [pc, #88]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006c02:	4013      	ands	r3, r2
 8006c04:	0019      	movs	r1, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2280      	movs	r2, #128	@ 0x80
 8006c16:	4013      	ands	r3, r2
 8006c18:	d009      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006c1a:	4b07      	ldr	r3, [pc, #28]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c1e:	4a10      	ldr	r2, [pc, #64]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c20:	4013      	ands	r3, r2
 8006c22:	0019      	movs	r1, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a1a      	ldr	r2, [r3, #32]
 8006c28:	4b03      	ldr	r3, [pc, #12]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	0018      	movs	r0, r3
 8006c32:	46bd      	mov	sp, r7
 8006c34:	b006      	add	sp, #24
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	40021000 	.word	0x40021000
 8006c3c:	40007000 	.word	0x40007000
 8006c40:	fffcffff 	.word	0xfffcffff
 8006c44:	fff7ffff 	.word	0xfff7ffff
 8006c48:	00001388 	.word	0x00001388
 8006c4c:	ffcfffff 	.word	0xffcfffff
 8006c50:	efffffff 	.word	0xefffffff
 8006c54:	fffff3ff 	.word	0xfffff3ff
 8006c58:	ffffcfff 	.word	0xffffcfff
 8006c5c:	fbffffff 	.word	0xfbffffff
 8006c60:	fff3ffff 	.word	0xfff3ffff

08006c64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e044      	b.n	8006d00 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d107      	bne.n	8006c8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2278      	movs	r2, #120	@ 0x78
 8006c82:	2100      	movs	r1, #0
 8006c84:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	0018      	movs	r0, r3
 8006c8a:	f7fd fd8f 	bl	80047ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2224      	movs	r2, #36	@ 0x24
 8006c92:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	438a      	bics	r2, r1
 8006ca2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	0018      	movs	r0, r3
 8006cb0:	f000 fb6a 	bl	8007388 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	0018      	movs	r0, r3
 8006cb8:	f000 f8c8 	bl	8006e4c <UART_SetConfig>
 8006cbc:	0003      	movs	r3, r0
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d101      	bne.n	8006cc6 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e01c      	b.n	8006d00 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	490d      	ldr	r1, [pc, #52]	@ (8006d08 <HAL_UART_Init+0xa4>)
 8006cd2:	400a      	ands	r2, r1
 8006cd4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689a      	ldr	r2, [r3, #8]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	212a      	movs	r1, #42	@ 0x2a
 8006ce2:	438a      	bics	r2, r1
 8006ce4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	0018      	movs	r0, r3
 8006cfa:	f000 fbf9 	bl	80074f0 <UART_CheckIdleState>
 8006cfe:	0003      	movs	r3, r0
}
 8006d00:	0018      	movs	r0, r3
 8006d02:	46bd      	mov	sp, r7
 8006d04:	b002      	add	sp, #8
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	ffffb7ff 	.word	0xffffb7ff

08006d0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b08a      	sub	sp, #40	@ 0x28
 8006d10:	af02      	add	r7, sp, #8
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	603b      	str	r3, [r7, #0]
 8006d18:	1dbb      	adds	r3, r7, #6
 8006d1a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d20:	2b20      	cmp	r3, #32
 8006d22:	d000      	beq.n	8006d26 <HAL_UART_Transmit+0x1a>
 8006d24:	e08c      	b.n	8006e40 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d003      	beq.n	8006d34 <HAL_UART_Transmit+0x28>
 8006d2c:	1dbb      	adds	r3, r7, #6
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e084      	b.n	8006e42 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	689a      	ldr	r2, [r3, #8]
 8006d3c:	2380      	movs	r3, #128	@ 0x80
 8006d3e:	015b      	lsls	r3, r3, #5
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d109      	bne.n	8006d58 <HAL_UART_Transmit+0x4c>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d105      	bne.n	8006d58 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	4013      	ands	r3, r2
 8006d52:	d001      	beq.n	8006d58 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e074      	b.n	8006e42 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2284      	movs	r2, #132	@ 0x84
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2221      	movs	r2, #33	@ 0x21
 8006d64:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d66:	f7fd fed3 	bl	8004b10 <HAL_GetTick>
 8006d6a:	0003      	movs	r3, r0
 8006d6c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	1dba      	adds	r2, r7, #6
 8006d72:	2150      	movs	r1, #80	@ 0x50
 8006d74:	8812      	ldrh	r2, [r2, #0]
 8006d76:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	1dba      	adds	r2, r7, #6
 8006d7c:	2152      	movs	r1, #82	@ 0x52
 8006d7e:	8812      	ldrh	r2, [r2, #0]
 8006d80:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	689a      	ldr	r2, [r3, #8]
 8006d86:	2380      	movs	r3, #128	@ 0x80
 8006d88:	015b      	lsls	r3, r3, #5
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d108      	bne.n	8006da0 <HAL_UART_Transmit+0x94>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d104      	bne.n	8006da0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8006d96:	2300      	movs	r3, #0
 8006d98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	61bb      	str	r3, [r7, #24]
 8006d9e:	e003      	b.n	8006da8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006da4:	2300      	movs	r3, #0
 8006da6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006da8:	e02f      	b.n	8006e0a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	0013      	movs	r3, r2
 8006db4:	2200      	movs	r2, #0
 8006db6:	2180      	movs	r1, #128	@ 0x80
 8006db8:	f000 fc42 	bl	8007640 <UART_WaitOnFlagUntilTimeout>
 8006dbc:	1e03      	subs	r3, r0, #0
 8006dbe:	d004      	beq.n	8006dca <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e03b      	b.n	8006e42 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10b      	bne.n	8006de8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	881b      	ldrh	r3, [r3, #0]
 8006dd4:	001a      	movs	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	05d2      	lsls	r2, r2, #23
 8006ddc:	0dd2      	lsrs	r2, r2, #23
 8006dde:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	3302      	adds	r3, #2
 8006de4:	61bb      	str	r3, [r7, #24]
 8006de6:	e007      	b.n	8006df8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	781a      	ldrb	r2, [r3, #0]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	3301      	adds	r3, #1
 8006df6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2252      	movs	r2, #82	@ 0x52
 8006dfc:	5a9b      	ldrh	r3, [r3, r2]
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	3b01      	subs	r3, #1
 8006e02:	b299      	uxth	r1, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2252      	movs	r2, #82	@ 0x52
 8006e08:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2252      	movs	r2, #82	@ 0x52
 8006e0e:	5a9b      	ldrh	r3, [r3, r2]
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1c9      	bne.n	8006daa <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	0013      	movs	r3, r2
 8006e20:	2200      	movs	r2, #0
 8006e22:	2140      	movs	r1, #64	@ 0x40
 8006e24:	f000 fc0c 	bl	8007640 <UART_WaitOnFlagUntilTimeout>
 8006e28:	1e03      	subs	r3, r0, #0
 8006e2a:	d004      	beq.n	8006e36 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e005      	b.n	8006e42 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2220      	movs	r2, #32
 8006e3a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	e000      	b.n	8006e42 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8006e40:	2302      	movs	r3, #2
  }
}
 8006e42:	0018      	movs	r0, r3
 8006e44:	46bd      	mov	sp, r7
 8006e46:	b008      	add	sp, #32
 8006e48:	bd80      	pop	{r7, pc}
	...

08006e4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e4c:	b5b0      	push	{r4, r5, r7, lr}
 8006e4e:	b08e      	sub	sp, #56	@ 0x38
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e54:	231a      	movs	r3, #26
 8006e56:	2218      	movs	r2, #24
 8006e58:	189b      	adds	r3, r3, r2
 8006e5a:	19db      	adds	r3, r3, r7
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	689a      	ldr	r2, [r3, #8]
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	431a      	orrs	r2, r3
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	431a      	orrs	r2, r3
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4ac3      	ldr	r2, [pc, #780]	@ (800718c <UART_SetConfig+0x340>)
 8006e80:	4013      	ands	r3, r2
 8006e82:	0019      	movs	r1, r3
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	4abe      	ldr	r2, [pc, #760]	@ (8007190 <UART_SetConfig+0x344>)
 8006e96:	4013      	ands	r3, r2
 8006e98:	0019      	movs	r1, r3
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	68da      	ldr	r2, [r3, #12]
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4ab8      	ldr	r2, [pc, #736]	@ (8007194 <UART_SetConfig+0x348>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d004      	beq.n	8006ec0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	4ab4      	ldr	r2, [pc, #720]	@ (8007198 <UART_SetConfig+0x34c>)
 8006ec8:	4013      	ands	r3, r2
 8006eca:	0019      	movs	r1, r3
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4ab0      	ldr	r2, [pc, #704]	@ (800719c <UART_SetConfig+0x350>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d131      	bne.n	8006f44 <UART_SetConfig+0xf8>
 8006ee0:	4baf      	ldr	r3, [pc, #700]	@ (80071a0 <UART_SetConfig+0x354>)
 8006ee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ee4:	2203      	movs	r2, #3
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	2b03      	cmp	r3, #3
 8006eea:	d01d      	beq.n	8006f28 <UART_SetConfig+0xdc>
 8006eec:	d823      	bhi.n	8006f36 <UART_SetConfig+0xea>
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d00c      	beq.n	8006f0c <UART_SetConfig+0xc0>
 8006ef2:	d820      	bhi.n	8006f36 <UART_SetConfig+0xea>
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <UART_SetConfig+0xb2>
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d00e      	beq.n	8006f1a <UART_SetConfig+0xce>
 8006efc:	e01b      	b.n	8006f36 <UART_SetConfig+0xea>
 8006efe:	231b      	movs	r3, #27
 8006f00:	2218      	movs	r2, #24
 8006f02:	189b      	adds	r3, r3, r2
 8006f04:	19db      	adds	r3, r3, r7
 8006f06:	2201      	movs	r2, #1
 8006f08:	701a      	strb	r2, [r3, #0]
 8006f0a:	e0b4      	b.n	8007076 <UART_SetConfig+0x22a>
 8006f0c:	231b      	movs	r3, #27
 8006f0e:	2218      	movs	r2, #24
 8006f10:	189b      	adds	r3, r3, r2
 8006f12:	19db      	adds	r3, r3, r7
 8006f14:	2202      	movs	r2, #2
 8006f16:	701a      	strb	r2, [r3, #0]
 8006f18:	e0ad      	b.n	8007076 <UART_SetConfig+0x22a>
 8006f1a:	231b      	movs	r3, #27
 8006f1c:	2218      	movs	r2, #24
 8006f1e:	189b      	adds	r3, r3, r2
 8006f20:	19db      	adds	r3, r3, r7
 8006f22:	2204      	movs	r2, #4
 8006f24:	701a      	strb	r2, [r3, #0]
 8006f26:	e0a6      	b.n	8007076 <UART_SetConfig+0x22a>
 8006f28:	231b      	movs	r3, #27
 8006f2a:	2218      	movs	r2, #24
 8006f2c:	189b      	adds	r3, r3, r2
 8006f2e:	19db      	adds	r3, r3, r7
 8006f30:	2208      	movs	r2, #8
 8006f32:	701a      	strb	r2, [r3, #0]
 8006f34:	e09f      	b.n	8007076 <UART_SetConfig+0x22a>
 8006f36:	231b      	movs	r3, #27
 8006f38:	2218      	movs	r2, #24
 8006f3a:	189b      	adds	r3, r3, r2
 8006f3c:	19db      	adds	r3, r3, r7
 8006f3e:	2210      	movs	r2, #16
 8006f40:	701a      	strb	r2, [r3, #0]
 8006f42:	e098      	b.n	8007076 <UART_SetConfig+0x22a>
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a96      	ldr	r2, [pc, #600]	@ (80071a4 <UART_SetConfig+0x358>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d131      	bne.n	8006fb2 <UART_SetConfig+0x166>
 8006f4e:	4b94      	ldr	r3, [pc, #592]	@ (80071a0 <UART_SetConfig+0x354>)
 8006f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f52:	220c      	movs	r2, #12
 8006f54:	4013      	ands	r3, r2
 8006f56:	2b0c      	cmp	r3, #12
 8006f58:	d01d      	beq.n	8006f96 <UART_SetConfig+0x14a>
 8006f5a:	d823      	bhi.n	8006fa4 <UART_SetConfig+0x158>
 8006f5c:	2b08      	cmp	r3, #8
 8006f5e:	d00c      	beq.n	8006f7a <UART_SetConfig+0x12e>
 8006f60:	d820      	bhi.n	8006fa4 <UART_SetConfig+0x158>
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d002      	beq.n	8006f6c <UART_SetConfig+0x120>
 8006f66:	2b04      	cmp	r3, #4
 8006f68:	d00e      	beq.n	8006f88 <UART_SetConfig+0x13c>
 8006f6a:	e01b      	b.n	8006fa4 <UART_SetConfig+0x158>
 8006f6c:	231b      	movs	r3, #27
 8006f6e:	2218      	movs	r2, #24
 8006f70:	189b      	adds	r3, r3, r2
 8006f72:	19db      	adds	r3, r3, r7
 8006f74:	2200      	movs	r2, #0
 8006f76:	701a      	strb	r2, [r3, #0]
 8006f78:	e07d      	b.n	8007076 <UART_SetConfig+0x22a>
 8006f7a:	231b      	movs	r3, #27
 8006f7c:	2218      	movs	r2, #24
 8006f7e:	189b      	adds	r3, r3, r2
 8006f80:	19db      	adds	r3, r3, r7
 8006f82:	2202      	movs	r2, #2
 8006f84:	701a      	strb	r2, [r3, #0]
 8006f86:	e076      	b.n	8007076 <UART_SetConfig+0x22a>
 8006f88:	231b      	movs	r3, #27
 8006f8a:	2218      	movs	r2, #24
 8006f8c:	189b      	adds	r3, r3, r2
 8006f8e:	19db      	adds	r3, r3, r7
 8006f90:	2204      	movs	r2, #4
 8006f92:	701a      	strb	r2, [r3, #0]
 8006f94:	e06f      	b.n	8007076 <UART_SetConfig+0x22a>
 8006f96:	231b      	movs	r3, #27
 8006f98:	2218      	movs	r2, #24
 8006f9a:	189b      	adds	r3, r3, r2
 8006f9c:	19db      	adds	r3, r3, r7
 8006f9e:	2208      	movs	r2, #8
 8006fa0:	701a      	strb	r2, [r3, #0]
 8006fa2:	e068      	b.n	8007076 <UART_SetConfig+0x22a>
 8006fa4:	231b      	movs	r3, #27
 8006fa6:	2218      	movs	r2, #24
 8006fa8:	189b      	adds	r3, r3, r2
 8006faa:	19db      	adds	r3, r3, r7
 8006fac:	2210      	movs	r2, #16
 8006fae:	701a      	strb	r2, [r3, #0]
 8006fb0:	e061      	b.n	8007076 <UART_SetConfig+0x22a>
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a7c      	ldr	r2, [pc, #496]	@ (80071a8 <UART_SetConfig+0x35c>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d106      	bne.n	8006fca <UART_SetConfig+0x17e>
 8006fbc:	231b      	movs	r3, #27
 8006fbe:	2218      	movs	r2, #24
 8006fc0:	189b      	adds	r3, r3, r2
 8006fc2:	19db      	adds	r3, r3, r7
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	701a      	strb	r2, [r3, #0]
 8006fc8:	e055      	b.n	8007076 <UART_SetConfig+0x22a>
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a77      	ldr	r2, [pc, #476]	@ (80071ac <UART_SetConfig+0x360>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d106      	bne.n	8006fe2 <UART_SetConfig+0x196>
 8006fd4:	231b      	movs	r3, #27
 8006fd6:	2218      	movs	r2, #24
 8006fd8:	189b      	adds	r3, r3, r2
 8006fda:	19db      	adds	r3, r3, r7
 8006fdc:	2200      	movs	r2, #0
 8006fde:	701a      	strb	r2, [r3, #0]
 8006fe0:	e049      	b.n	8007076 <UART_SetConfig+0x22a>
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a6b      	ldr	r2, [pc, #428]	@ (8007194 <UART_SetConfig+0x348>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d13e      	bne.n	800706a <UART_SetConfig+0x21e>
 8006fec:	4b6c      	ldr	r3, [pc, #432]	@ (80071a0 <UART_SetConfig+0x354>)
 8006fee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ff0:	23c0      	movs	r3, #192	@ 0xc0
 8006ff2:	011b      	lsls	r3, r3, #4
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	22c0      	movs	r2, #192	@ 0xc0
 8006ff8:	0112      	lsls	r2, r2, #4
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d027      	beq.n	800704e <UART_SetConfig+0x202>
 8006ffe:	22c0      	movs	r2, #192	@ 0xc0
 8007000:	0112      	lsls	r2, r2, #4
 8007002:	4293      	cmp	r3, r2
 8007004:	d82a      	bhi.n	800705c <UART_SetConfig+0x210>
 8007006:	2280      	movs	r2, #128	@ 0x80
 8007008:	0112      	lsls	r2, r2, #4
 800700a:	4293      	cmp	r3, r2
 800700c:	d011      	beq.n	8007032 <UART_SetConfig+0x1e6>
 800700e:	2280      	movs	r2, #128	@ 0x80
 8007010:	0112      	lsls	r2, r2, #4
 8007012:	4293      	cmp	r3, r2
 8007014:	d822      	bhi.n	800705c <UART_SetConfig+0x210>
 8007016:	2b00      	cmp	r3, #0
 8007018:	d004      	beq.n	8007024 <UART_SetConfig+0x1d8>
 800701a:	2280      	movs	r2, #128	@ 0x80
 800701c:	00d2      	lsls	r2, r2, #3
 800701e:	4293      	cmp	r3, r2
 8007020:	d00e      	beq.n	8007040 <UART_SetConfig+0x1f4>
 8007022:	e01b      	b.n	800705c <UART_SetConfig+0x210>
 8007024:	231b      	movs	r3, #27
 8007026:	2218      	movs	r2, #24
 8007028:	189b      	adds	r3, r3, r2
 800702a:	19db      	adds	r3, r3, r7
 800702c:	2200      	movs	r2, #0
 800702e:	701a      	strb	r2, [r3, #0]
 8007030:	e021      	b.n	8007076 <UART_SetConfig+0x22a>
 8007032:	231b      	movs	r3, #27
 8007034:	2218      	movs	r2, #24
 8007036:	189b      	adds	r3, r3, r2
 8007038:	19db      	adds	r3, r3, r7
 800703a:	2202      	movs	r2, #2
 800703c:	701a      	strb	r2, [r3, #0]
 800703e:	e01a      	b.n	8007076 <UART_SetConfig+0x22a>
 8007040:	231b      	movs	r3, #27
 8007042:	2218      	movs	r2, #24
 8007044:	189b      	adds	r3, r3, r2
 8007046:	19db      	adds	r3, r3, r7
 8007048:	2204      	movs	r2, #4
 800704a:	701a      	strb	r2, [r3, #0]
 800704c:	e013      	b.n	8007076 <UART_SetConfig+0x22a>
 800704e:	231b      	movs	r3, #27
 8007050:	2218      	movs	r2, #24
 8007052:	189b      	adds	r3, r3, r2
 8007054:	19db      	adds	r3, r3, r7
 8007056:	2208      	movs	r2, #8
 8007058:	701a      	strb	r2, [r3, #0]
 800705a:	e00c      	b.n	8007076 <UART_SetConfig+0x22a>
 800705c:	231b      	movs	r3, #27
 800705e:	2218      	movs	r2, #24
 8007060:	189b      	adds	r3, r3, r2
 8007062:	19db      	adds	r3, r3, r7
 8007064:	2210      	movs	r2, #16
 8007066:	701a      	strb	r2, [r3, #0]
 8007068:	e005      	b.n	8007076 <UART_SetConfig+0x22a>
 800706a:	231b      	movs	r3, #27
 800706c:	2218      	movs	r2, #24
 800706e:	189b      	adds	r3, r3, r2
 8007070:	19db      	adds	r3, r3, r7
 8007072:	2210      	movs	r2, #16
 8007074:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a46      	ldr	r2, [pc, #280]	@ (8007194 <UART_SetConfig+0x348>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d000      	beq.n	8007082 <UART_SetConfig+0x236>
 8007080:	e09a      	b.n	80071b8 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007082:	231b      	movs	r3, #27
 8007084:	2218      	movs	r2, #24
 8007086:	189b      	adds	r3, r3, r2
 8007088:	19db      	adds	r3, r3, r7
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	2b08      	cmp	r3, #8
 800708e:	d01d      	beq.n	80070cc <UART_SetConfig+0x280>
 8007090:	dc20      	bgt.n	80070d4 <UART_SetConfig+0x288>
 8007092:	2b04      	cmp	r3, #4
 8007094:	d015      	beq.n	80070c2 <UART_SetConfig+0x276>
 8007096:	dc1d      	bgt.n	80070d4 <UART_SetConfig+0x288>
 8007098:	2b00      	cmp	r3, #0
 800709a:	d002      	beq.n	80070a2 <UART_SetConfig+0x256>
 800709c:	2b02      	cmp	r3, #2
 800709e:	d005      	beq.n	80070ac <UART_SetConfig+0x260>
 80070a0:	e018      	b.n	80070d4 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070a2:	f7ff fc15 	bl	80068d0 <HAL_RCC_GetPCLK1Freq>
 80070a6:	0003      	movs	r3, r0
 80070a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80070aa:	e01c      	b.n	80070e6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070ac:	4b3c      	ldr	r3, [pc, #240]	@ (80071a0 <UART_SetConfig+0x354>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2210      	movs	r2, #16
 80070b2:	4013      	ands	r3, r2
 80070b4:	d002      	beq.n	80070bc <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80070b6:	4b3e      	ldr	r3, [pc, #248]	@ (80071b0 <UART_SetConfig+0x364>)
 80070b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80070ba:	e014      	b.n	80070e6 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80070bc:	4b3d      	ldr	r3, [pc, #244]	@ (80071b4 <UART_SetConfig+0x368>)
 80070be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80070c0:	e011      	b.n	80070e6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070c2:	f7ff fb75 	bl	80067b0 <HAL_RCC_GetSysClockFreq>
 80070c6:	0003      	movs	r3, r0
 80070c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80070ca:	e00c      	b.n	80070e6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070cc:	2380      	movs	r3, #128	@ 0x80
 80070ce:	021b      	lsls	r3, r3, #8
 80070d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80070d2:	e008      	b.n	80070e6 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80070d4:	2300      	movs	r3, #0
 80070d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80070d8:	231a      	movs	r3, #26
 80070da:	2218      	movs	r2, #24
 80070dc:	189b      	adds	r3, r3, r2
 80070de:	19db      	adds	r3, r3, r7
 80070e0:	2201      	movs	r2, #1
 80070e2:	701a      	strb	r2, [r3, #0]
        break;
 80070e4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d100      	bne.n	80070ee <UART_SetConfig+0x2a2>
 80070ec:	e133      	b.n	8007356 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	685a      	ldr	r2, [r3, #4]
 80070f2:	0013      	movs	r3, r2
 80070f4:	005b      	lsls	r3, r3, #1
 80070f6:	189b      	adds	r3, r3, r2
 80070f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d305      	bcc.n	800710a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007104:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007106:	429a      	cmp	r2, r3
 8007108:	d906      	bls.n	8007118 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800710a:	231a      	movs	r3, #26
 800710c:	2218      	movs	r2, #24
 800710e:	189b      	adds	r3, r3, r2
 8007110:	19db      	adds	r3, r3, r7
 8007112:	2201      	movs	r2, #1
 8007114:	701a      	strb	r2, [r3, #0]
 8007116:	e11e      	b.n	8007356 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800711a:	613b      	str	r3, [r7, #16]
 800711c:	2300      	movs	r3, #0
 800711e:	617b      	str	r3, [r7, #20]
 8007120:	6939      	ldr	r1, [r7, #16]
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	000b      	movs	r3, r1
 8007126:	0e1b      	lsrs	r3, r3, #24
 8007128:	0010      	movs	r0, r2
 800712a:	0205      	lsls	r5, r0, #8
 800712c:	431d      	orrs	r5, r3
 800712e:	000b      	movs	r3, r1
 8007130:	021c      	lsls	r4, r3, #8
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	085b      	lsrs	r3, r3, #1
 8007138:	60bb      	str	r3, [r7, #8]
 800713a:	2300      	movs	r3, #0
 800713c:	60fb      	str	r3, [r7, #12]
 800713e:	68b8      	ldr	r0, [r7, #8]
 8007140:	68f9      	ldr	r1, [r7, #12]
 8007142:	1900      	adds	r0, r0, r4
 8007144:	4169      	adcs	r1, r5
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	603b      	str	r3, [r7, #0]
 800714c:	2300      	movs	r3, #0
 800714e:	607b      	str	r3, [r7, #4]
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f7f9 f9cc 	bl	80004f0 <__aeabi_uldivmod>
 8007158:	0002      	movs	r2, r0
 800715a:	000b      	movs	r3, r1
 800715c:	0013      	movs	r3, r2
 800715e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007160:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007162:	23c0      	movs	r3, #192	@ 0xc0
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	429a      	cmp	r2, r3
 8007168:	d309      	bcc.n	800717e <UART_SetConfig+0x332>
 800716a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800716c:	2380      	movs	r3, #128	@ 0x80
 800716e:	035b      	lsls	r3, r3, #13
 8007170:	429a      	cmp	r2, r3
 8007172:	d204      	bcs.n	800717e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800717a:	60da      	str	r2, [r3, #12]
 800717c:	e0eb      	b.n	8007356 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800717e:	231a      	movs	r3, #26
 8007180:	2218      	movs	r2, #24
 8007182:	189b      	adds	r3, r3, r2
 8007184:	19db      	adds	r3, r3, r7
 8007186:	2201      	movs	r2, #1
 8007188:	701a      	strb	r2, [r3, #0]
 800718a:	e0e4      	b.n	8007356 <UART_SetConfig+0x50a>
 800718c:	efff69f3 	.word	0xefff69f3
 8007190:	ffffcfff 	.word	0xffffcfff
 8007194:	40004800 	.word	0x40004800
 8007198:	fffff4ff 	.word	0xfffff4ff
 800719c:	40013800 	.word	0x40013800
 80071a0:	40021000 	.word	0x40021000
 80071a4:	40004400 	.word	0x40004400
 80071a8:	40004c00 	.word	0x40004c00
 80071ac:	40005000 	.word	0x40005000
 80071b0:	003d0900 	.word	0x003d0900
 80071b4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	69da      	ldr	r2, [r3, #28]
 80071bc:	2380      	movs	r3, #128	@ 0x80
 80071be:	021b      	lsls	r3, r3, #8
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d000      	beq.n	80071c6 <UART_SetConfig+0x37a>
 80071c4:	e070      	b.n	80072a8 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80071c6:	231b      	movs	r3, #27
 80071c8:	2218      	movs	r2, #24
 80071ca:	189b      	adds	r3, r3, r2
 80071cc:	19db      	adds	r3, r3, r7
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	2b08      	cmp	r3, #8
 80071d2:	d822      	bhi.n	800721a <UART_SetConfig+0x3ce>
 80071d4:	009a      	lsls	r2, r3, #2
 80071d6:	4b67      	ldr	r3, [pc, #412]	@ (8007374 <UART_SetConfig+0x528>)
 80071d8:	18d3      	adds	r3, r2, r3
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071de:	f7ff fb77 	bl	80068d0 <HAL_RCC_GetPCLK1Freq>
 80071e2:	0003      	movs	r3, r0
 80071e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80071e6:	e021      	b.n	800722c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071e8:	f7ff fb88 	bl	80068fc <HAL_RCC_GetPCLK2Freq>
 80071ec:	0003      	movs	r3, r0
 80071ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80071f0:	e01c      	b.n	800722c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071f2:	4b61      	ldr	r3, [pc, #388]	@ (8007378 <UART_SetConfig+0x52c>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2210      	movs	r2, #16
 80071f8:	4013      	ands	r3, r2
 80071fa:	d002      	beq.n	8007202 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80071fc:	4b5f      	ldr	r3, [pc, #380]	@ (800737c <UART_SetConfig+0x530>)
 80071fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007200:	e014      	b.n	800722c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8007202:	4b5f      	ldr	r3, [pc, #380]	@ (8007380 <UART_SetConfig+0x534>)
 8007204:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007206:	e011      	b.n	800722c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007208:	f7ff fad2 	bl	80067b0 <HAL_RCC_GetSysClockFreq>
 800720c:	0003      	movs	r3, r0
 800720e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007210:	e00c      	b.n	800722c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007212:	2380      	movs	r3, #128	@ 0x80
 8007214:	021b      	lsls	r3, r3, #8
 8007216:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007218:	e008      	b.n	800722c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800721a:	2300      	movs	r3, #0
 800721c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800721e:	231a      	movs	r3, #26
 8007220:	2218      	movs	r2, #24
 8007222:	189b      	adds	r3, r3, r2
 8007224:	19db      	adds	r3, r3, r7
 8007226:	2201      	movs	r2, #1
 8007228:	701a      	strb	r2, [r3, #0]
        break;
 800722a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800722c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800722e:	2b00      	cmp	r3, #0
 8007230:	d100      	bne.n	8007234 <UART_SetConfig+0x3e8>
 8007232:	e090      	b.n	8007356 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007236:	005a      	lsls	r2, r3, #1
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	085b      	lsrs	r3, r3, #1
 800723e:	18d2      	adds	r2, r2, r3
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	0019      	movs	r1, r3
 8007246:	0010      	movs	r0, r2
 8007248:	f7f8 ff7a 	bl	8000140 <__udivsi3>
 800724c:	0003      	movs	r3, r0
 800724e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007252:	2b0f      	cmp	r3, #15
 8007254:	d921      	bls.n	800729a <UART_SetConfig+0x44e>
 8007256:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007258:	2380      	movs	r3, #128	@ 0x80
 800725a:	025b      	lsls	r3, r3, #9
 800725c:	429a      	cmp	r2, r3
 800725e:	d21c      	bcs.n	800729a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007262:	b29a      	uxth	r2, r3
 8007264:	200e      	movs	r0, #14
 8007266:	2418      	movs	r4, #24
 8007268:	1903      	adds	r3, r0, r4
 800726a:	19db      	adds	r3, r3, r7
 800726c:	210f      	movs	r1, #15
 800726e:	438a      	bics	r2, r1
 8007270:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007274:	085b      	lsrs	r3, r3, #1
 8007276:	b29b      	uxth	r3, r3
 8007278:	2207      	movs	r2, #7
 800727a:	4013      	ands	r3, r2
 800727c:	b299      	uxth	r1, r3
 800727e:	1903      	adds	r3, r0, r4
 8007280:	19db      	adds	r3, r3, r7
 8007282:	1902      	adds	r2, r0, r4
 8007284:	19d2      	adds	r2, r2, r7
 8007286:	8812      	ldrh	r2, [r2, #0]
 8007288:	430a      	orrs	r2, r1
 800728a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	1902      	adds	r2, r0, r4
 8007292:	19d2      	adds	r2, r2, r7
 8007294:	8812      	ldrh	r2, [r2, #0]
 8007296:	60da      	str	r2, [r3, #12]
 8007298:	e05d      	b.n	8007356 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800729a:	231a      	movs	r3, #26
 800729c:	2218      	movs	r2, #24
 800729e:	189b      	adds	r3, r3, r2
 80072a0:	19db      	adds	r3, r3, r7
 80072a2:	2201      	movs	r2, #1
 80072a4:	701a      	strb	r2, [r3, #0]
 80072a6:	e056      	b.n	8007356 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072a8:	231b      	movs	r3, #27
 80072aa:	2218      	movs	r2, #24
 80072ac:	189b      	adds	r3, r3, r2
 80072ae:	19db      	adds	r3, r3, r7
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	2b08      	cmp	r3, #8
 80072b4:	d822      	bhi.n	80072fc <UART_SetConfig+0x4b0>
 80072b6:	009a      	lsls	r2, r3, #2
 80072b8:	4b32      	ldr	r3, [pc, #200]	@ (8007384 <UART_SetConfig+0x538>)
 80072ba:	18d3      	adds	r3, r2, r3
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072c0:	f7ff fb06 	bl	80068d0 <HAL_RCC_GetPCLK1Freq>
 80072c4:	0003      	movs	r3, r0
 80072c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80072c8:	e021      	b.n	800730e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072ca:	f7ff fb17 	bl	80068fc <HAL_RCC_GetPCLK2Freq>
 80072ce:	0003      	movs	r3, r0
 80072d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80072d2:	e01c      	b.n	800730e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072d4:	4b28      	ldr	r3, [pc, #160]	@ (8007378 <UART_SetConfig+0x52c>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2210      	movs	r2, #16
 80072da:	4013      	ands	r3, r2
 80072dc:	d002      	beq.n	80072e4 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80072de:	4b27      	ldr	r3, [pc, #156]	@ (800737c <UART_SetConfig+0x530>)
 80072e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80072e2:	e014      	b.n	800730e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80072e4:	4b26      	ldr	r3, [pc, #152]	@ (8007380 <UART_SetConfig+0x534>)
 80072e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80072e8:	e011      	b.n	800730e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072ea:	f7ff fa61 	bl	80067b0 <HAL_RCC_GetSysClockFreq>
 80072ee:	0003      	movs	r3, r0
 80072f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80072f2:	e00c      	b.n	800730e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072f4:	2380      	movs	r3, #128	@ 0x80
 80072f6:	021b      	lsls	r3, r3, #8
 80072f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80072fa:	e008      	b.n	800730e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80072fc:	2300      	movs	r3, #0
 80072fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8007300:	231a      	movs	r3, #26
 8007302:	2218      	movs	r2, #24
 8007304:	189b      	adds	r3, r3, r2
 8007306:	19db      	adds	r3, r3, r7
 8007308:	2201      	movs	r2, #1
 800730a:	701a      	strb	r2, [r3, #0]
        break;
 800730c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800730e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007310:	2b00      	cmp	r3, #0
 8007312:	d020      	beq.n	8007356 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	085a      	lsrs	r2, r3, #1
 800731a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800731c:	18d2      	adds	r2, r2, r3
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	0019      	movs	r1, r3
 8007324:	0010      	movs	r0, r2
 8007326:	f7f8 ff0b 	bl	8000140 <__udivsi3>
 800732a:	0003      	movs	r3, r0
 800732c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800732e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007330:	2b0f      	cmp	r3, #15
 8007332:	d90a      	bls.n	800734a <UART_SetConfig+0x4fe>
 8007334:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007336:	2380      	movs	r3, #128	@ 0x80
 8007338:	025b      	lsls	r3, r3, #9
 800733a:	429a      	cmp	r2, r3
 800733c:	d205      	bcs.n	800734a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800733e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007340:	b29a      	uxth	r2, r3
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	60da      	str	r2, [r3, #12]
 8007348:	e005      	b.n	8007356 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800734a:	231a      	movs	r3, #26
 800734c:	2218      	movs	r2, #24
 800734e:	189b      	adds	r3, r3, r2
 8007350:	19db      	adds	r3, r3, r7
 8007352:	2201      	movs	r2, #1
 8007354:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	2200      	movs	r2, #0
 800735a:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	2200      	movs	r2, #0
 8007360:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007362:	231a      	movs	r3, #26
 8007364:	2218      	movs	r2, #24
 8007366:	189b      	adds	r3, r3, r2
 8007368:	19db      	adds	r3, r3, r7
 800736a:	781b      	ldrb	r3, [r3, #0]
}
 800736c:	0018      	movs	r0, r3
 800736e:	46bd      	mov	sp, r7
 8007370:	b00e      	add	sp, #56	@ 0x38
 8007372:	bdb0      	pop	{r4, r5, r7, pc}
 8007374:	0800b0c0 	.word	0x0800b0c0
 8007378:	40021000 	.word	0x40021000
 800737c:	003d0900 	.word	0x003d0900
 8007380:	00f42400 	.word	0x00f42400
 8007384:	0800b0e4 	.word	0x0800b0e4

08007388 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007394:	2208      	movs	r2, #8
 8007396:	4013      	ands	r3, r2
 8007398:	d00b      	beq.n	80073b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	4a4a      	ldr	r2, [pc, #296]	@ (80074cc <UART_AdvFeatureConfig+0x144>)
 80073a2:	4013      	ands	r3, r2
 80073a4:	0019      	movs	r1, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b6:	2201      	movs	r2, #1
 80073b8:	4013      	ands	r3, r2
 80073ba:	d00b      	beq.n	80073d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	4a43      	ldr	r2, [pc, #268]	@ (80074d0 <UART_AdvFeatureConfig+0x148>)
 80073c4:	4013      	ands	r3, r2
 80073c6:	0019      	movs	r1, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	430a      	orrs	r2, r1
 80073d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d8:	2202      	movs	r2, #2
 80073da:	4013      	ands	r3, r2
 80073dc:	d00b      	beq.n	80073f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	4a3b      	ldr	r2, [pc, #236]	@ (80074d4 <UART_AdvFeatureConfig+0x14c>)
 80073e6:	4013      	ands	r3, r2
 80073e8:	0019      	movs	r1, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073fa:	2204      	movs	r2, #4
 80073fc:	4013      	ands	r3, r2
 80073fe:	d00b      	beq.n	8007418 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	4a34      	ldr	r2, [pc, #208]	@ (80074d8 <UART_AdvFeatureConfig+0x150>)
 8007408:	4013      	ands	r3, r2
 800740a:	0019      	movs	r1, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	430a      	orrs	r2, r1
 8007416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800741c:	2210      	movs	r2, #16
 800741e:	4013      	ands	r3, r2
 8007420:	d00b      	beq.n	800743a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	4a2c      	ldr	r2, [pc, #176]	@ (80074dc <UART_AdvFeatureConfig+0x154>)
 800742a:	4013      	ands	r3, r2
 800742c:	0019      	movs	r1, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800743e:	2220      	movs	r2, #32
 8007440:	4013      	ands	r3, r2
 8007442:	d00b      	beq.n	800745c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	4a25      	ldr	r2, [pc, #148]	@ (80074e0 <UART_AdvFeatureConfig+0x158>)
 800744c:	4013      	ands	r3, r2
 800744e:	0019      	movs	r1, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007460:	2240      	movs	r2, #64	@ 0x40
 8007462:	4013      	ands	r3, r2
 8007464:	d01d      	beq.n	80074a2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	4a1d      	ldr	r2, [pc, #116]	@ (80074e4 <UART_AdvFeatureConfig+0x15c>)
 800746e:	4013      	ands	r3, r2
 8007470:	0019      	movs	r1, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007482:	2380      	movs	r3, #128	@ 0x80
 8007484:	035b      	lsls	r3, r3, #13
 8007486:	429a      	cmp	r2, r3
 8007488:	d10b      	bne.n	80074a2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	4a15      	ldr	r2, [pc, #84]	@ (80074e8 <UART_AdvFeatureConfig+0x160>)
 8007492:	4013      	ands	r3, r2
 8007494:	0019      	movs	r1, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	430a      	orrs	r2, r1
 80074a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074a6:	2280      	movs	r2, #128	@ 0x80
 80074a8:	4013      	ands	r3, r2
 80074aa:	d00b      	beq.n	80074c4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	4a0e      	ldr	r2, [pc, #56]	@ (80074ec <UART_AdvFeatureConfig+0x164>)
 80074b4:	4013      	ands	r3, r2
 80074b6:	0019      	movs	r1, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	430a      	orrs	r2, r1
 80074c2:	605a      	str	r2, [r3, #4]
  }
}
 80074c4:	46c0      	nop			@ (mov r8, r8)
 80074c6:	46bd      	mov	sp, r7
 80074c8:	b002      	add	sp, #8
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	ffff7fff 	.word	0xffff7fff
 80074d0:	fffdffff 	.word	0xfffdffff
 80074d4:	fffeffff 	.word	0xfffeffff
 80074d8:	fffbffff 	.word	0xfffbffff
 80074dc:	ffffefff 	.word	0xffffefff
 80074e0:	ffffdfff 	.word	0xffffdfff
 80074e4:	ffefffff 	.word	0xffefffff
 80074e8:	ff9fffff 	.word	0xff9fffff
 80074ec:	fff7ffff 	.word	0xfff7ffff

080074f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b092      	sub	sp, #72	@ 0x48
 80074f4:	af02      	add	r7, sp, #8
 80074f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2284      	movs	r2, #132	@ 0x84
 80074fc:	2100      	movs	r1, #0
 80074fe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007500:	f7fd fb06 	bl	8004b10 <HAL_GetTick>
 8007504:	0003      	movs	r3, r0
 8007506:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2208      	movs	r2, #8
 8007510:	4013      	ands	r3, r2
 8007512:	2b08      	cmp	r3, #8
 8007514:	d12c      	bne.n	8007570 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007518:	2280      	movs	r2, #128	@ 0x80
 800751a:	0391      	lsls	r1, r2, #14
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	4a46      	ldr	r2, [pc, #280]	@ (8007638 <UART_CheckIdleState+0x148>)
 8007520:	9200      	str	r2, [sp, #0]
 8007522:	2200      	movs	r2, #0
 8007524:	f000 f88c 	bl	8007640 <UART_WaitOnFlagUntilTimeout>
 8007528:	1e03      	subs	r3, r0, #0
 800752a:	d021      	beq.n	8007570 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800752c:	f3ef 8310 	mrs	r3, PRIMASK
 8007530:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007534:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007536:	2301      	movs	r3, #1
 8007538:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800753a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800753c:	f383 8810 	msr	PRIMASK, r3
}
 8007540:	46c0      	nop			@ (mov r8, r8)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2180      	movs	r1, #128	@ 0x80
 800754e:	438a      	bics	r2, r1
 8007550:	601a      	str	r2, [r3, #0]
 8007552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007554:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007558:	f383 8810 	msr	PRIMASK, r3
}
 800755c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2220      	movs	r2, #32
 8007562:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2278      	movs	r2, #120	@ 0x78
 8007568:	2100      	movs	r1, #0
 800756a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e05f      	b.n	8007630 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2204      	movs	r2, #4
 8007578:	4013      	ands	r3, r2
 800757a:	2b04      	cmp	r3, #4
 800757c:	d146      	bne.n	800760c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800757e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007580:	2280      	movs	r2, #128	@ 0x80
 8007582:	03d1      	lsls	r1, r2, #15
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	4a2c      	ldr	r2, [pc, #176]	@ (8007638 <UART_CheckIdleState+0x148>)
 8007588:	9200      	str	r2, [sp, #0]
 800758a:	2200      	movs	r2, #0
 800758c:	f000 f858 	bl	8007640 <UART_WaitOnFlagUntilTimeout>
 8007590:	1e03      	subs	r3, r0, #0
 8007592:	d03b      	beq.n	800760c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007594:	f3ef 8310 	mrs	r3, PRIMASK
 8007598:	60fb      	str	r3, [r7, #12]
  return(result);
 800759a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800759c:	637b      	str	r3, [r7, #52]	@ 0x34
 800759e:	2301      	movs	r3, #1
 80075a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	f383 8810 	msr	PRIMASK, r3
}
 80075a8:	46c0      	nop			@ (mov r8, r8)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4921      	ldr	r1, [pc, #132]	@ (800763c <UART_CheckIdleState+0x14c>)
 80075b6:	400a      	ands	r2, r1
 80075b8:	601a      	str	r2, [r3, #0]
 80075ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f383 8810 	msr	PRIMASK, r3
}
 80075c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075c6:	f3ef 8310 	mrs	r3, PRIMASK
 80075ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80075cc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80075d0:	2301      	movs	r3, #1
 80075d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	f383 8810 	msr	PRIMASK, r3
}
 80075da:	46c0      	nop			@ (mov r8, r8)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	689a      	ldr	r2, [r3, #8]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2101      	movs	r1, #1
 80075e8:	438a      	bics	r2, r1
 80075ea:	609a      	str	r2, [r3, #8]
 80075ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075f0:	6a3b      	ldr	r3, [r7, #32]
 80075f2:	f383 8810 	msr	PRIMASK, r3
}
 80075f6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2280      	movs	r2, #128	@ 0x80
 80075fc:	2120      	movs	r1, #32
 80075fe:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2278      	movs	r2, #120	@ 0x78
 8007604:	2100      	movs	r1, #0
 8007606:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007608:	2303      	movs	r3, #3
 800760a:	e011      	b.n	8007630 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2220      	movs	r2, #32
 8007610:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2280      	movs	r2, #128	@ 0x80
 8007616:	2120      	movs	r1, #32
 8007618:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2278      	movs	r2, #120	@ 0x78
 800762a:	2100      	movs	r1, #0
 800762c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	0018      	movs	r0, r3
 8007632:	46bd      	mov	sp, r7
 8007634:	b010      	add	sp, #64	@ 0x40
 8007636:	bd80      	pop	{r7, pc}
 8007638:	01ffffff 	.word	0x01ffffff
 800763c:	fffffedf 	.word	0xfffffedf

08007640 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	603b      	str	r3, [r7, #0]
 800764c:	1dfb      	adds	r3, r7, #7
 800764e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007650:	e051      	b.n	80076f6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	3301      	adds	r3, #1
 8007656:	d04e      	beq.n	80076f6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007658:	f7fd fa5a 	bl	8004b10 <HAL_GetTick>
 800765c:	0002      	movs	r2, r0
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	69ba      	ldr	r2, [r7, #24]
 8007664:	429a      	cmp	r2, r3
 8007666:	d302      	bcc.n	800766e <UART_WaitOnFlagUntilTimeout+0x2e>
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e051      	b.n	8007716 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2204      	movs	r2, #4
 800767a:	4013      	ands	r3, r2
 800767c:	d03b      	beq.n	80076f6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	2b80      	cmp	r3, #128	@ 0x80
 8007682:	d038      	beq.n	80076f6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2b40      	cmp	r3, #64	@ 0x40
 8007688:	d035      	beq.n	80076f6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	69db      	ldr	r3, [r3, #28]
 8007690:	2208      	movs	r2, #8
 8007692:	4013      	ands	r3, r2
 8007694:	2b08      	cmp	r3, #8
 8007696:	d111      	bne.n	80076bc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2208      	movs	r2, #8
 800769e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	0018      	movs	r0, r3
 80076a4:	f000 f83c 	bl	8007720 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2284      	movs	r2, #132	@ 0x84
 80076ac:	2108      	movs	r1, #8
 80076ae:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2278      	movs	r2, #120	@ 0x78
 80076b4:	2100      	movs	r1, #0
 80076b6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e02c      	b.n	8007716 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	69da      	ldr	r2, [r3, #28]
 80076c2:	2380      	movs	r3, #128	@ 0x80
 80076c4:	011b      	lsls	r3, r3, #4
 80076c6:	401a      	ands	r2, r3
 80076c8:	2380      	movs	r3, #128	@ 0x80
 80076ca:	011b      	lsls	r3, r3, #4
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d112      	bne.n	80076f6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2280      	movs	r2, #128	@ 0x80
 80076d6:	0112      	lsls	r2, r2, #4
 80076d8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	0018      	movs	r0, r3
 80076de:	f000 f81f 	bl	8007720 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2284      	movs	r2, #132	@ 0x84
 80076e6:	2120      	movs	r1, #32
 80076e8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2278      	movs	r2, #120	@ 0x78
 80076ee:	2100      	movs	r1, #0
 80076f0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	e00f      	b.n	8007716 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	69db      	ldr	r3, [r3, #28]
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	4013      	ands	r3, r2
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	425a      	negs	r2, r3
 8007706:	4153      	adcs	r3, r2
 8007708:	b2db      	uxtb	r3, r3
 800770a:	001a      	movs	r2, r3
 800770c:	1dfb      	adds	r3, r7, #7
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	429a      	cmp	r2, r3
 8007712:	d09e      	beq.n	8007652 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	0018      	movs	r0, r3
 8007718:	46bd      	mov	sp, r7
 800771a:	b004      	add	sp, #16
 800771c:	bd80      	pop	{r7, pc}
	...

08007720 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b08e      	sub	sp, #56	@ 0x38
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007728:	f3ef 8310 	mrs	r3, PRIMASK
 800772c:	617b      	str	r3, [r7, #20]
  return(result);
 800772e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007730:	637b      	str	r3, [r7, #52]	@ 0x34
 8007732:	2301      	movs	r3, #1
 8007734:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	f383 8810 	msr	PRIMASK, r3
}
 800773c:	46c0      	nop			@ (mov r8, r8)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4926      	ldr	r1, [pc, #152]	@ (80077e4 <UART_EndRxTransfer+0xc4>)
 800774a:	400a      	ands	r2, r1
 800774c:	601a      	str	r2, [r3, #0]
 800774e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007750:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	f383 8810 	msr	PRIMASK, r3
}
 8007758:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800775a:	f3ef 8310 	mrs	r3, PRIMASK
 800775e:	623b      	str	r3, [r7, #32]
  return(result);
 8007760:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007762:	633b      	str	r3, [r7, #48]	@ 0x30
 8007764:	2301      	movs	r3, #1
 8007766:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776a:	f383 8810 	msr	PRIMASK, r3
}
 800776e:	46c0      	nop			@ (mov r8, r8)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	689a      	ldr	r2, [r3, #8]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2101      	movs	r1, #1
 800777c:	438a      	bics	r2, r1
 800777e:	609a      	str	r2, [r3, #8]
 8007780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007782:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007786:	f383 8810 	msr	PRIMASK, r3
}
 800778a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007790:	2b01      	cmp	r3, #1
 8007792:	d118      	bne.n	80077c6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007794:	f3ef 8310 	mrs	r3, PRIMASK
 8007798:	60bb      	str	r3, [r7, #8]
  return(result);
 800779a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800779c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800779e:	2301      	movs	r3, #1
 80077a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f383 8810 	msr	PRIMASK, r3
}
 80077a8:	46c0      	nop			@ (mov r8, r8)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2110      	movs	r1, #16
 80077b6:	438a      	bics	r2, r1
 80077b8:	601a      	str	r2, [r3, #0]
 80077ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	f383 8810 	msr	PRIMASK, r3
}
 80077c4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2280      	movs	r2, #128	@ 0x80
 80077ca:	2120      	movs	r1, #32
 80077cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80077da:	46c0      	nop			@ (mov r8, r8)
 80077dc:	46bd      	mov	sp, r7
 80077de:	b00e      	add	sp, #56	@ 0x38
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	46c0      	nop			@ (mov r8, r8)
 80077e4:	fffffedf 	.word	0xfffffedf

080077e8 <__cvt>:
 80077e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077ea:	001f      	movs	r7, r3
 80077ec:	2300      	movs	r3, #0
 80077ee:	0016      	movs	r6, r2
 80077f0:	b08b      	sub	sp, #44	@ 0x2c
 80077f2:	429f      	cmp	r7, r3
 80077f4:	da04      	bge.n	8007800 <__cvt+0x18>
 80077f6:	2180      	movs	r1, #128	@ 0x80
 80077f8:	0609      	lsls	r1, r1, #24
 80077fa:	187b      	adds	r3, r7, r1
 80077fc:	001f      	movs	r7, r3
 80077fe:	232d      	movs	r3, #45	@ 0x2d
 8007800:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007802:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8007804:	7013      	strb	r3, [r2, #0]
 8007806:	2320      	movs	r3, #32
 8007808:	2203      	movs	r2, #3
 800780a:	439d      	bics	r5, r3
 800780c:	2d46      	cmp	r5, #70	@ 0x46
 800780e:	d007      	beq.n	8007820 <__cvt+0x38>
 8007810:	002b      	movs	r3, r5
 8007812:	3b45      	subs	r3, #69	@ 0x45
 8007814:	4259      	negs	r1, r3
 8007816:	414b      	adcs	r3, r1
 8007818:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800781a:	3a01      	subs	r2, #1
 800781c:	18cb      	adds	r3, r1, r3
 800781e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007820:	ab09      	add	r3, sp, #36	@ 0x24
 8007822:	9304      	str	r3, [sp, #16]
 8007824:	ab08      	add	r3, sp, #32
 8007826:	9303      	str	r3, [sp, #12]
 8007828:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800782a:	9200      	str	r2, [sp, #0]
 800782c:	9302      	str	r3, [sp, #8]
 800782e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007830:	0032      	movs	r2, r6
 8007832:	9301      	str	r3, [sp, #4]
 8007834:	003b      	movs	r3, r7
 8007836:	f000 fe87 	bl	8008548 <_dtoa_r>
 800783a:	0004      	movs	r4, r0
 800783c:	2d47      	cmp	r5, #71	@ 0x47
 800783e:	d11b      	bne.n	8007878 <__cvt+0x90>
 8007840:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007842:	07db      	lsls	r3, r3, #31
 8007844:	d511      	bpl.n	800786a <__cvt+0x82>
 8007846:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007848:	18c3      	adds	r3, r0, r3
 800784a:	9307      	str	r3, [sp, #28]
 800784c:	2200      	movs	r2, #0
 800784e:	2300      	movs	r3, #0
 8007850:	0030      	movs	r0, r6
 8007852:	0039      	movs	r1, r7
 8007854:	f7f8 fdfa 	bl	800044c <__aeabi_dcmpeq>
 8007858:	2800      	cmp	r0, #0
 800785a:	d001      	beq.n	8007860 <__cvt+0x78>
 800785c:	9b07      	ldr	r3, [sp, #28]
 800785e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007860:	2230      	movs	r2, #48	@ 0x30
 8007862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007864:	9907      	ldr	r1, [sp, #28]
 8007866:	428b      	cmp	r3, r1
 8007868:	d320      	bcc.n	80078ac <__cvt+0xc4>
 800786a:	0020      	movs	r0, r4
 800786c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800786e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007870:	1b1b      	subs	r3, r3, r4
 8007872:	6013      	str	r3, [r2, #0]
 8007874:	b00b      	add	sp, #44	@ 0x2c
 8007876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007878:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800787a:	18c3      	adds	r3, r0, r3
 800787c:	9307      	str	r3, [sp, #28]
 800787e:	2d46      	cmp	r5, #70	@ 0x46
 8007880:	d1e4      	bne.n	800784c <__cvt+0x64>
 8007882:	7803      	ldrb	r3, [r0, #0]
 8007884:	2b30      	cmp	r3, #48	@ 0x30
 8007886:	d10c      	bne.n	80078a2 <__cvt+0xba>
 8007888:	2200      	movs	r2, #0
 800788a:	2300      	movs	r3, #0
 800788c:	0030      	movs	r0, r6
 800788e:	0039      	movs	r1, r7
 8007890:	f7f8 fddc 	bl	800044c <__aeabi_dcmpeq>
 8007894:	2800      	cmp	r0, #0
 8007896:	d104      	bne.n	80078a2 <__cvt+0xba>
 8007898:	2301      	movs	r3, #1
 800789a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800789c:	1a9b      	subs	r3, r3, r2
 800789e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80078a0:	6013      	str	r3, [r2, #0]
 80078a2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80078a4:	9a07      	ldr	r2, [sp, #28]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	18d3      	adds	r3, r2, r3
 80078aa:	e7ce      	b.n	800784a <__cvt+0x62>
 80078ac:	1c59      	adds	r1, r3, #1
 80078ae:	9109      	str	r1, [sp, #36]	@ 0x24
 80078b0:	701a      	strb	r2, [r3, #0]
 80078b2:	e7d6      	b.n	8007862 <__cvt+0x7a>

080078b4 <__exponent>:
 80078b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078b6:	232b      	movs	r3, #43	@ 0x2b
 80078b8:	b085      	sub	sp, #20
 80078ba:	0005      	movs	r5, r0
 80078bc:	1e0c      	subs	r4, r1, #0
 80078be:	7002      	strb	r2, [r0, #0]
 80078c0:	da01      	bge.n	80078c6 <__exponent+0x12>
 80078c2:	424c      	negs	r4, r1
 80078c4:	3302      	adds	r3, #2
 80078c6:	706b      	strb	r3, [r5, #1]
 80078c8:	2c09      	cmp	r4, #9
 80078ca:	dd2c      	ble.n	8007926 <__exponent+0x72>
 80078cc:	ab02      	add	r3, sp, #8
 80078ce:	1dde      	adds	r6, r3, #7
 80078d0:	0020      	movs	r0, r4
 80078d2:	210a      	movs	r1, #10
 80078d4:	f7f8 fda4 	bl	8000420 <__aeabi_idivmod>
 80078d8:	0037      	movs	r7, r6
 80078da:	3130      	adds	r1, #48	@ 0x30
 80078dc:	3e01      	subs	r6, #1
 80078de:	0020      	movs	r0, r4
 80078e0:	7031      	strb	r1, [r6, #0]
 80078e2:	210a      	movs	r1, #10
 80078e4:	9401      	str	r4, [sp, #4]
 80078e6:	f7f8 fcb5 	bl	8000254 <__divsi3>
 80078ea:	9b01      	ldr	r3, [sp, #4]
 80078ec:	0004      	movs	r4, r0
 80078ee:	2b63      	cmp	r3, #99	@ 0x63
 80078f0:	dcee      	bgt.n	80078d0 <__exponent+0x1c>
 80078f2:	1eba      	subs	r2, r7, #2
 80078f4:	1ca8      	adds	r0, r5, #2
 80078f6:	0001      	movs	r1, r0
 80078f8:	0013      	movs	r3, r2
 80078fa:	3430      	adds	r4, #48	@ 0x30
 80078fc:	7014      	strb	r4, [r2, #0]
 80078fe:	ac02      	add	r4, sp, #8
 8007900:	3407      	adds	r4, #7
 8007902:	429c      	cmp	r4, r3
 8007904:	d80a      	bhi.n	800791c <__exponent+0x68>
 8007906:	2300      	movs	r3, #0
 8007908:	4294      	cmp	r4, r2
 800790a:	d303      	bcc.n	8007914 <__exponent+0x60>
 800790c:	3309      	adds	r3, #9
 800790e:	aa02      	add	r2, sp, #8
 8007910:	189b      	adds	r3, r3, r2
 8007912:	1bdb      	subs	r3, r3, r7
 8007914:	18c0      	adds	r0, r0, r3
 8007916:	1b40      	subs	r0, r0, r5
 8007918:	b005      	add	sp, #20
 800791a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800791c:	781c      	ldrb	r4, [r3, #0]
 800791e:	3301      	adds	r3, #1
 8007920:	700c      	strb	r4, [r1, #0]
 8007922:	3101      	adds	r1, #1
 8007924:	e7eb      	b.n	80078fe <__exponent+0x4a>
 8007926:	2330      	movs	r3, #48	@ 0x30
 8007928:	18e4      	adds	r4, r4, r3
 800792a:	70ab      	strb	r3, [r5, #2]
 800792c:	1d28      	adds	r0, r5, #4
 800792e:	70ec      	strb	r4, [r5, #3]
 8007930:	e7f1      	b.n	8007916 <__exponent+0x62>
	...

08007934 <_printf_float>:
 8007934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007936:	b097      	sub	sp, #92	@ 0x5c
 8007938:	000d      	movs	r5, r1
 800793a:	920a      	str	r2, [sp, #40]	@ 0x28
 800793c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800793e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007940:	9009      	str	r0, [sp, #36]	@ 0x24
 8007942:	f000 fd63 	bl	800840c <_localeconv_r>
 8007946:	6803      	ldr	r3, [r0, #0]
 8007948:	0018      	movs	r0, r3
 800794a:	930d      	str	r3, [sp, #52]	@ 0x34
 800794c:	f7f8 fbdc 	bl	8000108 <strlen>
 8007950:	2300      	movs	r3, #0
 8007952:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007954:	9314      	str	r3, [sp, #80]	@ 0x50
 8007956:	7e2b      	ldrb	r3, [r5, #24]
 8007958:	2207      	movs	r2, #7
 800795a:	930c      	str	r3, [sp, #48]	@ 0x30
 800795c:	682b      	ldr	r3, [r5, #0]
 800795e:	930e      	str	r3, [sp, #56]	@ 0x38
 8007960:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007962:	6823      	ldr	r3, [r4, #0]
 8007964:	05c9      	lsls	r1, r1, #23
 8007966:	d545      	bpl.n	80079f4 <_printf_float+0xc0>
 8007968:	189b      	adds	r3, r3, r2
 800796a:	4393      	bics	r3, r2
 800796c:	001a      	movs	r2, r3
 800796e:	3208      	adds	r2, #8
 8007970:	6022      	str	r2, [r4, #0]
 8007972:	2201      	movs	r2, #1
 8007974:	681e      	ldr	r6, [r3, #0]
 8007976:	685f      	ldr	r7, [r3, #4]
 8007978:	007b      	lsls	r3, r7, #1
 800797a:	085b      	lsrs	r3, r3, #1
 800797c:	9311      	str	r3, [sp, #68]	@ 0x44
 800797e:	9610      	str	r6, [sp, #64]	@ 0x40
 8007980:	64ae      	str	r6, [r5, #72]	@ 0x48
 8007982:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8007984:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8007986:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8007988:	4ba7      	ldr	r3, [pc, #668]	@ (8007c28 <_printf_float+0x2f4>)
 800798a:	4252      	negs	r2, r2
 800798c:	f7fb f976 	bl	8002c7c <__aeabi_dcmpun>
 8007990:	2800      	cmp	r0, #0
 8007992:	d131      	bne.n	80079f8 <_printf_float+0xc4>
 8007994:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8007996:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8007998:	2201      	movs	r2, #1
 800799a:	4ba3      	ldr	r3, [pc, #652]	@ (8007c28 <_printf_float+0x2f4>)
 800799c:	4252      	negs	r2, r2
 800799e:	f7f8 fd65 	bl	800046c <__aeabi_dcmple>
 80079a2:	2800      	cmp	r0, #0
 80079a4:	d128      	bne.n	80079f8 <_printf_float+0xc4>
 80079a6:	2200      	movs	r2, #0
 80079a8:	2300      	movs	r3, #0
 80079aa:	0030      	movs	r0, r6
 80079ac:	0039      	movs	r1, r7
 80079ae:	f7f8 fd53 	bl	8000458 <__aeabi_dcmplt>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d003      	beq.n	80079be <_printf_float+0x8a>
 80079b6:	002b      	movs	r3, r5
 80079b8:	222d      	movs	r2, #45	@ 0x2d
 80079ba:	3343      	adds	r3, #67	@ 0x43
 80079bc:	701a      	strb	r2, [r3, #0]
 80079be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80079c0:	4f9a      	ldr	r7, [pc, #616]	@ (8007c2c <_printf_float+0x2f8>)
 80079c2:	2b47      	cmp	r3, #71	@ 0x47
 80079c4:	d800      	bhi.n	80079c8 <_printf_float+0x94>
 80079c6:	4f9a      	ldr	r7, [pc, #616]	@ (8007c30 <_printf_float+0x2fc>)
 80079c8:	2303      	movs	r3, #3
 80079ca:	2400      	movs	r4, #0
 80079cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079ce:	612b      	str	r3, [r5, #16]
 80079d0:	3301      	adds	r3, #1
 80079d2:	439a      	bics	r2, r3
 80079d4:	602a      	str	r2, [r5, #0]
 80079d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079d8:	0029      	movs	r1, r5
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80079de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079e0:	aa15      	add	r2, sp, #84	@ 0x54
 80079e2:	f000 f9e5 	bl	8007db0 <_printf_common>
 80079e6:	3001      	adds	r0, #1
 80079e8:	d000      	beq.n	80079ec <_printf_float+0xb8>
 80079ea:	e09e      	b.n	8007b2a <_printf_float+0x1f6>
 80079ec:	2001      	movs	r0, #1
 80079ee:	4240      	negs	r0, r0
 80079f0:	b017      	add	sp, #92	@ 0x5c
 80079f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079f4:	3307      	adds	r3, #7
 80079f6:	e7b8      	b.n	800796a <_printf_float+0x36>
 80079f8:	0032      	movs	r2, r6
 80079fa:	003b      	movs	r3, r7
 80079fc:	0030      	movs	r0, r6
 80079fe:	0039      	movs	r1, r7
 8007a00:	f7fb f93c 	bl	8002c7c <__aeabi_dcmpun>
 8007a04:	2800      	cmp	r0, #0
 8007a06:	d00b      	beq.n	8007a20 <_printf_float+0xec>
 8007a08:	2f00      	cmp	r7, #0
 8007a0a:	da03      	bge.n	8007a14 <_printf_float+0xe0>
 8007a0c:	002b      	movs	r3, r5
 8007a0e:	222d      	movs	r2, #45	@ 0x2d
 8007a10:	3343      	adds	r3, #67	@ 0x43
 8007a12:	701a      	strb	r2, [r3, #0]
 8007a14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a16:	4f87      	ldr	r7, [pc, #540]	@ (8007c34 <_printf_float+0x300>)
 8007a18:	2b47      	cmp	r3, #71	@ 0x47
 8007a1a:	d8d5      	bhi.n	80079c8 <_printf_float+0x94>
 8007a1c:	4f86      	ldr	r7, [pc, #536]	@ (8007c38 <_printf_float+0x304>)
 8007a1e:	e7d3      	b.n	80079c8 <_printf_float+0x94>
 8007a20:	2220      	movs	r2, #32
 8007a22:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8007a24:	686b      	ldr	r3, [r5, #4]
 8007a26:	4394      	bics	r4, r2
 8007a28:	1c5a      	adds	r2, r3, #1
 8007a2a:	d146      	bne.n	8007aba <_printf_float+0x186>
 8007a2c:	3307      	adds	r3, #7
 8007a2e:	606b      	str	r3, [r5, #4]
 8007a30:	2380      	movs	r3, #128	@ 0x80
 8007a32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a34:	00db      	lsls	r3, r3, #3
 8007a36:	4313      	orrs	r3, r2
 8007a38:	2200      	movs	r2, #0
 8007a3a:	602b      	str	r3, [r5, #0]
 8007a3c:	9206      	str	r2, [sp, #24]
 8007a3e:	aa14      	add	r2, sp, #80	@ 0x50
 8007a40:	9205      	str	r2, [sp, #20]
 8007a42:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007a44:	a90a      	add	r1, sp, #40	@ 0x28
 8007a46:	9204      	str	r2, [sp, #16]
 8007a48:	aa13      	add	r2, sp, #76	@ 0x4c
 8007a4a:	9203      	str	r2, [sp, #12]
 8007a4c:	2223      	movs	r2, #35	@ 0x23
 8007a4e:	1852      	adds	r2, r2, r1
 8007a50:	9202      	str	r2, [sp, #8]
 8007a52:	9301      	str	r3, [sp, #4]
 8007a54:	686b      	ldr	r3, [r5, #4]
 8007a56:	0032      	movs	r2, r6
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a5c:	003b      	movs	r3, r7
 8007a5e:	f7ff fec3 	bl	80077e8 <__cvt>
 8007a62:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007a64:	0007      	movs	r7, r0
 8007a66:	2c47      	cmp	r4, #71	@ 0x47
 8007a68:	d12d      	bne.n	8007ac6 <_printf_float+0x192>
 8007a6a:	1cd3      	adds	r3, r2, #3
 8007a6c:	db02      	blt.n	8007a74 <_printf_float+0x140>
 8007a6e:	686b      	ldr	r3, [r5, #4]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	dd47      	ble.n	8007b04 <_printf_float+0x1d0>
 8007a74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a76:	3b02      	subs	r3, #2
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	930c      	str	r3, [sp, #48]	@ 0x30
 8007a7c:	0028      	movs	r0, r5
 8007a7e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007a80:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007a82:	3901      	subs	r1, #1
 8007a84:	3050      	adds	r0, #80	@ 0x50
 8007a86:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007a88:	f7ff ff14 	bl	80078b4 <__exponent>
 8007a8c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007a8e:	0004      	movs	r4, r0
 8007a90:	1813      	adds	r3, r2, r0
 8007a92:	612b      	str	r3, [r5, #16]
 8007a94:	2a01      	cmp	r2, #1
 8007a96:	dc02      	bgt.n	8007a9e <_printf_float+0x16a>
 8007a98:	682a      	ldr	r2, [r5, #0]
 8007a9a:	07d2      	lsls	r2, r2, #31
 8007a9c:	d501      	bpl.n	8007aa2 <_printf_float+0x16e>
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	612b      	str	r3, [r5, #16]
 8007aa2:	2323      	movs	r3, #35	@ 0x23
 8007aa4:	aa0a      	add	r2, sp, #40	@ 0x28
 8007aa6:	189b      	adds	r3, r3, r2
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d100      	bne.n	8007ab0 <_printf_float+0x17c>
 8007aae:	e792      	b.n	80079d6 <_printf_float+0xa2>
 8007ab0:	002b      	movs	r3, r5
 8007ab2:	222d      	movs	r2, #45	@ 0x2d
 8007ab4:	3343      	adds	r3, #67	@ 0x43
 8007ab6:	701a      	strb	r2, [r3, #0]
 8007ab8:	e78d      	b.n	80079d6 <_printf_float+0xa2>
 8007aba:	2c47      	cmp	r4, #71	@ 0x47
 8007abc:	d1b8      	bne.n	8007a30 <_printf_float+0xfc>
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1b6      	bne.n	8007a30 <_printf_float+0xfc>
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	e7b3      	b.n	8007a2e <_printf_float+0xfa>
 8007ac6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ac8:	2b65      	cmp	r3, #101	@ 0x65
 8007aca:	d9d7      	bls.n	8007a7c <_printf_float+0x148>
 8007acc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ace:	2b66      	cmp	r3, #102	@ 0x66
 8007ad0:	d11a      	bne.n	8007b08 <_printf_float+0x1d4>
 8007ad2:	686b      	ldr	r3, [r5, #4]
 8007ad4:	2a00      	cmp	r2, #0
 8007ad6:	dd09      	ble.n	8007aec <_printf_float+0x1b8>
 8007ad8:	612a      	str	r2, [r5, #16]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d102      	bne.n	8007ae4 <_printf_float+0x1b0>
 8007ade:	6829      	ldr	r1, [r5, #0]
 8007ae0:	07c9      	lsls	r1, r1, #31
 8007ae2:	d50b      	bpl.n	8007afc <_printf_float+0x1c8>
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	189b      	adds	r3, r3, r2
 8007ae8:	612b      	str	r3, [r5, #16]
 8007aea:	e007      	b.n	8007afc <_printf_float+0x1c8>
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d103      	bne.n	8007af8 <_printf_float+0x1c4>
 8007af0:	2201      	movs	r2, #1
 8007af2:	6829      	ldr	r1, [r5, #0]
 8007af4:	4211      	tst	r1, r2
 8007af6:	d000      	beq.n	8007afa <_printf_float+0x1c6>
 8007af8:	1c9a      	adds	r2, r3, #2
 8007afa:	612a      	str	r2, [r5, #16]
 8007afc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007afe:	2400      	movs	r4, #0
 8007b00:	65ab      	str	r3, [r5, #88]	@ 0x58
 8007b02:	e7ce      	b.n	8007aa2 <_printf_float+0x16e>
 8007b04:	2367      	movs	r3, #103	@ 0x67
 8007b06:	930c      	str	r3, [sp, #48]	@ 0x30
 8007b08:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007b0a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b0c:	4299      	cmp	r1, r3
 8007b0e:	db06      	blt.n	8007b1e <_printf_float+0x1ea>
 8007b10:	682b      	ldr	r3, [r5, #0]
 8007b12:	6129      	str	r1, [r5, #16]
 8007b14:	07db      	lsls	r3, r3, #31
 8007b16:	d5f1      	bpl.n	8007afc <_printf_float+0x1c8>
 8007b18:	3101      	adds	r1, #1
 8007b1a:	6129      	str	r1, [r5, #16]
 8007b1c:	e7ee      	b.n	8007afc <_printf_float+0x1c8>
 8007b1e:	2201      	movs	r2, #1
 8007b20:	2900      	cmp	r1, #0
 8007b22:	dce0      	bgt.n	8007ae6 <_printf_float+0x1b2>
 8007b24:	1892      	adds	r2, r2, r2
 8007b26:	1a52      	subs	r2, r2, r1
 8007b28:	e7dd      	b.n	8007ae6 <_printf_float+0x1b2>
 8007b2a:	682a      	ldr	r2, [r5, #0]
 8007b2c:	0553      	lsls	r3, r2, #21
 8007b2e:	d408      	bmi.n	8007b42 <_printf_float+0x20e>
 8007b30:	692b      	ldr	r3, [r5, #16]
 8007b32:	003a      	movs	r2, r7
 8007b34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b38:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007b3a:	47a0      	blx	r4
 8007b3c:	3001      	adds	r0, #1
 8007b3e:	d129      	bne.n	8007b94 <_printf_float+0x260>
 8007b40:	e754      	b.n	80079ec <_printf_float+0xb8>
 8007b42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b44:	2b65      	cmp	r3, #101	@ 0x65
 8007b46:	d800      	bhi.n	8007b4a <_printf_float+0x216>
 8007b48:	e0db      	b.n	8007d02 <_printf_float+0x3ce>
 8007b4a:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8007b4c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8007b4e:	2200      	movs	r2, #0
 8007b50:	2300      	movs	r3, #0
 8007b52:	f7f8 fc7b 	bl	800044c <__aeabi_dcmpeq>
 8007b56:	2800      	cmp	r0, #0
 8007b58:	d033      	beq.n	8007bc2 <_printf_float+0x28e>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	4a37      	ldr	r2, [pc, #220]	@ (8007c3c <_printf_float+0x308>)
 8007b5e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b60:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b62:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007b64:	47a0      	blx	r4
 8007b66:	3001      	adds	r0, #1
 8007b68:	d100      	bne.n	8007b6c <_printf_float+0x238>
 8007b6a:	e73f      	b.n	80079ec <_printf_float+0xb8>
 8007b6c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8007b6e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007b70:	42b3      	cmp	r3, r6
 8007b72:	db02      	blt.n	8007b7a <_printf_float+0x246>
 8007b74:	682b      	ldr	r3, [r5, #0]
 8007b76:	07db      	lsls	r3, r3, #31
 8007b78:	d50c      	bpl.n	8007b94 <_printf_float+0x260>
 8007b7a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007b7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b7e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007b80:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b84:	47a0      	blx	r4
 8007b86:	2400      	movs	r4, #0
 8007b88:	3001      	adds	r0, #1
 8007b8a:	d100      	bne.n	8007b8e <_printf_float+0x25a>
 8007b8c:	e72e      	b.n	80079ec <_printf_float+0xb8>
 8007b8e:	1e73      	subs	r3, r6, #1
 8007b90:	42a3      	cmp	r3, r4
 8007b92:	dc0a      	bgt.n	8007baa <_printf_float+0x276>
 8007b94:	682b      	ldr	r3, [r5, #0]
 8007b96:	079b      	lsls	r3, r3, #30
 8007b98:	d500      	bpl.n	8007b9c <_printf_float+0x268>
 8007b9a:	e106      	b.n	8007daa <_printf_float+0x476>
 8007b9c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007b9e:	68e8      	ldr	r0, [r5, #12]
 8007ba0:	4298      	cmp	r0, r3
 8007ba2:	db00      	blt.n	8007ba6 <_printf_float+0x272>
 8007ba4:	e724      	b.n	80079f0 <_printf_float+0xbc>
 8007ba6:	0018      	movs	r0, r3
 8007ba8:	e722      	b.n	80079f0 <_printf_float+0xbc>
 8007baa:	002a      	movs	r2, r5
 8007bac:	2301      	movs	r3, #1
 8007bae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007bb0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007bb2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007bb4:	321a      	adds	r2, #26
 8007bb6:	47b8      	blx	r7
 8007bb8:	3001      	adds	r0, #1
 8007bba:	d100      	bne.n	8007bbe <_printf_float+0x28a>
 8007bbc:	e716      	b.n	80079ec <_printf_float+0xb8>
 8007bbe:	3401      	adds	r4, #1
 8007bc0:	e7e5      	b.n	8007b8e <_printf_float+0x25a>
 8007bc2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	dc3b      	bgt.n	8007c40 <_printf_float+0x30c>
 8007bc8:	2301      	movs	r3, #1
 8007bca:	4a1c      	ldr	r2, [pc, #112]	@ (8007c3c <_printf_float+0x308>)
 8007bcc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007bce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007bd0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007bd2:	47a0      	blx	r4
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	d100      	bne.n	8007bda <_printf_float+0x2a6>
 8007bd8:	e708      	b.n	80079ec <_printf_float+0xb8>
 8007bda:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8007bdc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007bde:	4333      	orrs	r3, r6
 8007be0:	d102      	bne.n	8007be8 <_printf_float+0x2b4>
 8007be2:	682b      	ldr	r3, [r5, #0]
 8007be4:	07db      	lsls	r3, r3, #31
 8007be6:	d5d5      	bpl.n	8007b94 <_printf_float+0x260>
 8007be8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bea:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007bec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007bee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007bf0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007bf2:	47a0      	blx	r4
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	3001      	adds	r0, #1
 8007bf8:	d100      	bne.n	8007bfc <_printf_float+0x2c8>
 8007bfa:	e6f7      	b.n	80079ec <_printf_float+0xb8>
 8007bfc:	930c      	str	r3, [sp, #48]	@ 0x30
 8007bfe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007c00:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007c02:	425b      	negs	r3, r3
 8007c04:	4293      	cmp	r3, r2
 8007c06:	dc01      	bgt.n	8007c0c <_printf_float+0x2d8>
 8007c08:	0033      	movs	r3, r6
 8007c0a:	e792      	b.n	8007b32 <_printf_float+0x1fe>
 8007c0c:	002a      	movs	r2, r5
 8007c0e:	2301      	movs	r3, #1
 8007c10:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c14:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007c16:	321a      	adds	r2, #26
 8007c18:	47a0      	blx	r4
 8007c1a:	3001      	adds	r0, #1
 8007c1c:	d100      	bne.n	8007c20 <_printf_float+0x2ec>
 8007c1e:	e6e5      	b.n	80079ec <_printf_float+0xb8>
 8007c20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c22:	3301      	adds	r3, #1
 8007c24:	e7ea      	b.n	8007bfc <_printf_float+0x2c8>
 8007c26:	46c0      	nop			@ (mov r8, r8)
 8007c28:	7fefffff 	.word	0x7fefffff
 8007c2c:	0800b10c 	.word	0x0800b10c
 8007c30:	0800b108 	.word	0x0800b108
 8007c34:	0800b114 	.word	0x0800b114
 8007c38:	0800b110 	.word	0x0800b110
 8007c3c:	0800b118 	.word	0x0800b118
 8007c40:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007c42:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8007c44:	930c      	str	r3, [sp, #48]	@ 0x30
 8007c46:	429e      	cmp	r6, r3
 8007c48:	dd00      	ble.n	8007c4c <_printf_float+0x318>
 8007c4a:	001e      	movs	r6, r3
 8007c4c:	2e00      	cmp	r6, #0
 8007c4e:	dc31      	bgt.n	8007cb4 <_printf_float+0x380>
 8007c50:	43f3      	mvns	r3, r6
 8007c52:	2400      	movs	r4, #0
 8007c54:	17db      	asrs	r3, r3, #31
 8007c56:	4033      	ands	r3, r6
 8007c58:	930e      	str	r3, [sp, #56]	@ 0x38
 8007c5a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8007c5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c5e:	1af3      	subs	r3, r6, r3
 8007c60:	42a3      	cmp	r3, r4
 8007c62:	dc30      	bgt.n	8007cc6 <_printf_float+0x392>
 8007c64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007c66:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	dc38      	bgt.n	8007cde <_printf_float+0x3aa>
 8007c6c:	682b      	ldr	r3, [r5, #0]
 8007c6e:	07db      	lsls	r3, r3, #31
 8007c70:	d435      	bmi.n	8007cde <_printf_float+0x3aa>
 8007c72:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8007c74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c76:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007c78:	1b9b      	subs	r3, r3, r6
 8007c7a:	1b14      	subs	r4, r2, r4
 8007c7c:	429c      	cmp	r4, r3
 8007c7e:	dd00      	ble.n	8007c82 <_printf_float+0x34e>
 8007c80:	001c      	movs	r4, r3
 8007c82:	2c00      	cmp	r4, #0
 8007c84:	dc34      	bgt.n	8007cf0 <_printf_float+0x3bc>
 8007c86:	43e3      	mvns	r3, r4
 8007c88:	2600      	movs	r6, #0
 8007c8a:	17db      	asrs	r3, r3, #31
 8007c8c:	401c      	ands	r4, r3
 8007c8e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007c90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	1b1b      	subs	r3, r3, r4
 8007c96:	42b3      	cmp	r3, r6
 8007c98:	dc00      	bgt.n	8007c9c <_printf_float+0x368>
 8007c9a:	e77b      	b.n	8007b94 <_printf_float+0x260>
 8007c9c:	002a      	movs	r2, r5
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007ca2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ca4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007ca6:	321a      	adds	r2, #26
 8007ca8:	47b8      	blx	r7
 8007caa:	3001      	adds	r0, #1
 8007cac:	d100      	bne.n	8007cb0 <_printf_float+0x37c>
 8007cae:	e69d      	b.n	80079ec <_printf_float+0xb8>
 8007cb0:	3601      	adds	r6, #1
 8007cb2:	e7ec      	b.n	8007c8e <_printf_float+0x35a>
 8007cb4:	0033      	movs	r3, r6
 8007cb6:	003a      	movs	r2, r7
 8007cb8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007cba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007cbc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007cbe:	47a0      	blx	r4
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	d1c5      	bne.n	8007c50 <_printf_float+0x31c>
 8007cc4:	e692      	b.n	80079ec <_printf_float+0xb8>
 8007cc6:	002a      	movs	r2, r5
 8007cc8:	2301      	movs	r3, #1
 8007cca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007ccc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007cce:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007cd0:	321a      	adds	r2, #26
 8007cd2:	47b0      	blx	r6
 8007cd4:	3001      	adds	r0, #1
 8007cd6:	d100      	bne.n	8007cda <_printf_float+0x3a6>
 8007cd8:	e688      	b.n	80079ec <_printf_float+0xb8>
 8007cda:	3401      	adds	r4, #1
 8007cdc:	e7bd      	b.n	8007c5a <_printf_float+0x326>
 8007cde:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ce0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007ce2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007ce4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ce6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007ce8:	47a0      	blx	r4
 8007cea:	3001      	adds	r0, #1
 8007cec:	d1c1      	bne.n	8007c72 <_printf_float+0x33e>
 8007cee:	e67d      	b.n	80079ec <_printf_float+0xb8>
 8007cf0:	19ba      	adds	r2, r7, r6
 8007cf2:	0023      	movs	r3, r4
 8007cf4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007cf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007cf8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007cfa:	47b0      	blx	r6
 8007cfc:	3001      	adds	r0, #1
 8007cfe:	d1c2      	bne.n	8007c86 <_printf_float+0x352>
 8007d00:	e674      	b.n	80079ec <_printf_float+0xb8>
 8007d02:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007d04:	930c      	str	r3, [sp, #48]	@ 0x30
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	dc02      	bgt.n	8007d10 <_printf_float+0x3dc>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	421a      	tst	r2, r3
 8007d0e:	d039      	beq.n	8007d84 <_printf_float+0x450>
 8007d10:	2301      	movs	r3, #1
 8007d12:	003a      	movs	r2, r7
 8007d14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d18:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007d1a:	47b0      	blx	r6
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	d100      	bne.n	8007d22 <_printf_float+0x3ee>
 8007d20:	e664      	b.n	80079ec <_printf_float+0xb8>
 8007d22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007d26:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d28:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d2a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007d2c:	47b0      	blx	r6
 8007d2e:	3001      	adds	r0, #1
 8007d30:	d100      	bne.n	8007d34 <_printf_float+0x400>
 8007d32:	e65b      	b.n	80079ec <_printf_float+0xb8>
 8007d34:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8007d36:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8007d38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007d40:	2300      	movs	r3, #0
 8007d42:	f7f8 fb83 	bl	800044c <__aeabi_dcmpeq>
 8007d46:	2800      	cmp	r0, #0
 8007d48:	d11a      	bne.n	8007d80 <_printf_float+0x44c>
 8007d4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d4c:	1c7a      	adds	r2, r7, #1
 8007d4e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d50:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d52:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007d54:	47b0      	blx	r6
 8007d56:	3001      	adds	r0, #1
 8007d58:	d10e      	bne.n	8007d78 <_printf_float+0x444>
 8007d5a:	e647      	b.n	80079ec <_printf_float+0xb8>
 8007d5c:	002a      	movs	r2, r5
 8007d5e:	2301      	movs	r3, #1
 8007d60:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d64:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007d66:	321a      	adds	r2, #26
 8007d68:	47b8      	blx	r7
 8007d6a:	3001      	adds	r0, #1
 8007d6c:	d100      	bne.n	8007d70 <_printf_float+0x43c>
 8007d6e:	e63d      	b.n	80079ec <_printf_float+0xb8>
 8007d70:	3601      	adds	r6, #1
 8007d72:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d74:	429e      	cmp	r6, r3
 8007d76:	dbf1      	blt.n	8007d5c <_printf_float+0x428>
 8007d78:	002a      	movs	r2, r5
 8007d7a:	0023      	movs	r3, r4
 8007d7c:	3250      	adds	r2, #80	@ 0x50
 8007d7e:	e6d9      	b.n	8007b34 <_printf_float+0x200>
 8007d80:	2600      	movs	r6, #0
 8007d82:	e7f6      	b.n	8007d72 <_printf_float+0x43e>
 8007d84:	003a      	movs	r2, r7
 8007d86:	e7e2      	b.n	8007d4e <_printf_float+0x41a>
 8007d88:	002a      	movs	r2, r5
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d90:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007d92:	3219      	adds	r2, #25
 8007d94:	47b0      	blx	r6
 8007d96:	3001      	adds	r0, #1
 8007d98:	d100      	bne.n	8007d9c <_printf_float+0x468>
 8007d9a:	e627      	b.n	80079ec <_printf_float+0xb8>
 8007d9c:	3401      	adds	r4, #1
 8007d9e:	68eb      	ldr	r3, [r5, #12]
 8007da0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007da2:	1a9b      	subs	r3, r3, r2
 8007da4:	42a3      	cmp	r3, r4
 8007da6:	dcef      	bgt.n	8007d88 <_printf_float+0x454>
 8007da8:	e6f8      	b.n	8007b9c <_printf_float+0x268>
 8007daa:	2400      	movs	r4, #0
 8007dac:	e7f7      	b.n	8007d9e <_printf_float+0x46a>
 8007dae:	46c0      	nop			@ (mov r8, r8)

08007db0 <_printf_common>:
 8007db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007db2:	0016      	movs	r6, r2
 8007db4:	9301      	str	r3, [sp, #4]
 8007db6:	688a      	ldr	r2, [r1, #8]
 8007db8:	690b      	ldr	r3, [r1, #16]
 8007dba:	000c      	movs	r4, r1
 8007dbc:	9000      	str	r0, [sp, #0]
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	da00      	bge.n	8007dc4 <_printf_common+0x14>
 8007dc2:	0013      	movs	r3, r2
 8007dc4:	0022      	movs	r2, r4
 8007dc6:	6033      	str	r3, [r6, #0]
 8007dc8:	3243      	adds	r2, #67	@ 0x43
 8007dca:	7812      	ldrb	r2, [r2, #0]
 8007dcc:	2a00      	cmp	r2, #0
 8007dce:	d001      	beq.n	8007dd4 <_printf_common+0x24>
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	6033      	str	r3, [r6, #0]
 8007dd4:	6823      	ldr	r3, [r4, #0]
 8007dd6:	069b      	lsls	r3, r3, #26
 8007dd8:	d502      	bpl.n	8007de0 <_printf_common+0x30>
 8007dda:	6833      	ldr	r3, [r6, #0]
 8007ddc:	3302      	adds	r3, #2
 8007dde:	6033      	str	r3, [r6, #0]
 8007de0:	6822      	ldr	r2, [r4, #0]
 8007de2:	2306      	movs	r3, #6
 8007de4:	0015      	movs	r5, r2
 8007de6:	401d      	ands	r5, r3
 8007de8:	421a      	tst	r2, r3
 8007dea:	d027      	beq.n	8007e3c <_printf_common+0x8c>
 8007dec:	0023      	movs	r3, r4
 8007dee:	3343      	adds	r3, #67	@ 0x43
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	1e5a      	subs	r2, r3, #1
 8007df4:	4193      	sbcs	r3, r2
 8007df6:	6822      	ldr	r2, [r4, #0]
 8007df8:	0692      	lsls	r2, r2, #26
 8007dfa:	d430      	bmi.n	8007e5e <_printf_common+0xae>
 8007dfc:	0022      	movs	r2, r4
 8007dfe:	9901      	ldr	r1, [sp, #4]
 8007e00:	9800      	ldr	r0, [sp, #0]
 8007e02:	9d08      	ldr	r5, [sp, #32]
 8007e04:	3243      	adds	r2, #67	@ 0x43
 8007e06:	47a8      	blx	r5
 8007e08:	3001      	adds	r0, #1
 8007e0a:	d025      	beq.n	8007e58 <_printf_common+0xa8>
 8007e0c:	2206      	movs	r2, #6
 8007e0e:	6823      	ldr	r3, [r4, #0]
 8007e10:	2500      	movs	r5, #0
 8007e12:	4013      	ands	r3, r2
 8007e14:	2b04      	cmp	r3, #4
 8007e16:	d105      	bne.n	8007e24 <_printf_common+0x74>
 8007e18:	6833      	ldr	r3, [r6, #0]
 8007e1a:	68e5      	ldr	r5, [r4, #12]
 8007e1c:	1aed      	subs	r5, r5, r3
 8007e1e:	43eb      	mvns	r3, r5
 8007e20:	17db      	asrs	r3, r3, #31
 8007e22:	401d      	ands	r5, r3
 8007e24:	68a3      	ldr	r3, [r4, #8]
 8007e26:	6922      	ldr	r2, [r4, #16]
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	dd01      	ble.n	8007e30 <_printf_common+0x80>
 8007e2c:	1a9b      	subs	r3, r3, r2
 8007e2e:	18ed      	adds	r5, r5, r3
 8007e30:	2600      	movs	r6, #0
 8007e32:	42b5      	cmp	r5, r6
 8007e34:	d120      	bne.n	8007e78 <_printf_common+0xc8>
 8007e36:	2000      	movs	r0, #0
 8007e38:	e010      	b.n	8007e5c <_printf_common+0xac>
 8007e3a:	3501      	adds	r5, #1
 8007e3c:	68e3      	ldr	r3, [r4, #12]
 8007e3e:	6832      	ldr	r2, [r6, #0]
 8007e40:	1a9b      	subs	r3, r3, r2
 8007e42:	42ab      	cmp	r3, r5
 8007e44:	ddd2      	ble.n	8007dec <_printf_common+0x3c>
 8007e46:	0022      	movs	r2, r4
 8007e48:	2301      	movs	r3, #1
 8007e4a:	9901      	ldr	r1, [sp, #4]
 8007e4c:	9800      	ldr	r0, [sp, #0]
 8007e4e:	9f08      	ldr	r7, [sp, #32]
 8007e50:	3219      	adds	r2, #25
 8007e52:	47b8      	blx	r7
 8007e54:	3001      	adds	r0, #1
 8007e56:	d1f0      	bne.n	8007e3a <_printf_common+0x8a>
 8007e58:	2001      	movs	r0, #1
 8007e5a:	4240      	negs	r0, r0
 8007e5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e5e:	2030      	movs	r0, #48	@ 0x30
 8007e60:	18e1      	adds	r1, r4, r3
 8007e62:	3143      	adds	r1, #67	@ 0x43
 8007e64:	7008      	strb	r0, [r1, #0]
 8007e66:	0021      	movs	r1, r4
 8007e68:	1c5a      	adds	r2, r3, #1
 8007e6a:	3145      	adds	r1, #69	@ 0x45
 8007e6c:	7809      	ldrb	r1, [r1, #0]
 8007e6e:	18a2      	adds	r2, r4, r2
 8007e70:	3243      	adds	r2, #67	@ 0x43
 8007e72:	3302      	adds	r3, #2
 8007e74:	7011      	strb	r1, [r2, #0]
 8007e76:	e7c1      	b.n	8007dfc <_printf_common+0x4c>
 8007e78:	0022      	movs	r2, r4
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	9901      	ldr	r1, [sp, #4]
 8007e7e:	9800      	ldr	r0, [sp, #0]
 8007e80:	9f08      	ldr	r7, [sp, #32]
 8007e82:	321a      	adds	r2, #26
 8007e84:	47b8      	blx	r7
 8007e86:	3001      	adds	r0, #1
 8007e88:	d0e6      	beq.n	8007e58 <_printf_common+0xa8>
 8007e8a:	3601      	adds	r6, #1
 8007e8c:	e7d1      	b.n	8007e32 <_printf_common+0x82>
	...

08007e90 <_printf_i>:
 8007e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e92:	b08b      	sub	sp, #44	@ 0x2c
 8007e94:	9206      	str	r2, [sp, #24]
 8007e96:	000a      	movs	r2, r1
 8007e98:	3243      	adds	r2, #67	@ 0x43
 8007e9a:	9307      	str	r3, [sp, #28]
 8007e9c:	9005      	str	r0, [sp, #20]
 8007e9e:	9203      	str	r2, [sp, #12]
 8007ea0:	7e0a      	ldrb	r2, [r1, #24]
 8007ea2:	000c      	movs	r4, r1
 8007ea4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007ea6:	2a78      	cmp	r2, #120	@ 0x78
 8007ea8:	d809      	bhi.n	8007ebe <_printf_i+0x2e>
 8007eaa:	2a62      	cmp	r2, #98	@ 0x62
 8007eac:	d80b      	bhi.n	8007ec6 <_printf_i+0x36>
 8007eae:	2a00      	cmp	r2, #0
 8007eb0:	d100      	bne.n	8007eb4 <_printf_i+0x24>
 8007eb2:	e0ba      	b.n	800802a <_printf_i+0x19a>
 8007eb4:	497a      	ldr	r1, [pc, #488]	@ (80080a0 <_printf_i+0x210>)
 8007eb6:	9104      	str	r1, [sp, #16]
 8007eb8:	2a58      	cmp	r2, #88	@ 0x58
 8007eba:	d100      	bne.n	8007ebe <_printf_i+0x2e>
 8007ebc:	e08e      	b.n	8007fdc <_printf_i+0x14c>
 8007ebe:	0025      	movs	r5, r4
 8007ec0:	3542      	adds	r5, #66	@ 0x42
 8007ec2:	702a      	strb	r2, [r5, #0]
 8007ec4:	e022      	b.n	8007f0c <_printf_i+0x7c>
 8007ec6:	0010      	movs	r0, r2
 8007ec8:	3863      	subs	r0, #99	@ 0x63
 8007eca:	2815      	cmp	r0, #21
 8007ecc:	d8f7      	bhi.n	8007ebe <_printf_i+0x2e>
 8007ece:	f7f8 f92d 	bl	800012c <__gnu_thumb1_case_shi>
 8007ed2:	0016      	.short	0x0016
 8007ed4:	fff6001f 	.word	0xfff6001f
 8007ed8:	fff6fff6 	.word	0xfff6fff6
 8007edc:	001ffff6 	.word	0x001ffff6
 8007ee0:	fff6fff6 	.word	0xfff6fff6
 8007ee4:	fff6fff6 	.word	0xfff6fff6
 8007ee8:	0036009f 	.word	0x0036009f
 8007eec:	fff6007e 	.word	0xfff6007e
 8007ef0:	00b0fff6 	.word	0x00b0fff6
 8007ef4:	0036fff6 	.word	0x0036fff6
 8007ef8:	fff6fff6 	.word	0xfff6fff6
 8007efc:	0082      	.short	0x0082
 8007efe:	0025      	movs	r5, r4
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	3542      	adds	r5, #66	@ 0x42
 8007f04:	1d11      	adds	r1, r2, #4
 8007f06:	6019      	str	r1, [r3, #0]
 8007f08:	6813      	ldr	r3, [r2, #0]
 8007f0a:	702b      	strb	r3, [r5, #0]
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e09e      	b.n	800804e <_printf_i+0x1be>
 8007f10:	6818      	ldr	r0, [r3, #0]
 8007f12:	6809      	ldr	r1, [r1, #0]
 8007f14:	1d02      	adds	r2, r0, #4
 8007f16:	060d      	lsls	r5, r1, #24
 8007f18:	d50b      	bpl.n	8007f32 <_printf_i+0xa2>
 8007f1a:	6806      	ldr	r6, [r0, #0]
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	2e00      	cmp	r6, #0
 8007f20:	da03      	bge.n	8007f2a <_printf_i+0x9a>
 8007f22:	232d      	movs	r3, #45	@ 0x2d
 8007f24:	9a03      	ldr	r2, [sp, #12]
 8007f26:	4276      	negs	r6, r6
 8007f28:	7013      	strb	r3, [r2, #0]
 8007f2a:	4b5d      	ldr	r3, [pc, #372]	@ (80080a0 <_printf_i+0x210>)
 8007f2c:	270a      	movs	r7, #10
 8007f2e:	9304      	str	r3, [sp, #16]
 8007f30:	e018      	b.n	8007f64 <_printf_i+0xd4>
 8007f32:	6806      	ldr	r6, [r0, #0]
 8007f34:	601a      	str	r2, [r3, #0]
 8007f36:	0649      	lsls	r1, r1, #25
 8007f38:	d5f1      	bpl.n	8007f1e <_printf_i+0x8e>
 8007f3a:	b236      	sxth	r6, r6
 8007f3c:	e7ef      	b.n	8007f1e <_printf_i+0x8e>
 8007f3e:	6808      	ldr	r0, [r1, #0]
 8007f40:	6819      	ldr	r1, [r3, #0]
 8007f42:	c940      	ldmia	r1!, {r6}
 8007f44:	0605      	lsls	r5, r0, #24
 8007f46:	d402      	bmi.n	8007f4e <_printf_i+0xbe>
 8007f48:	0640      	lsls	r0, r0, #25
 8007f4a:	d500      	bpl.n	8007f4e <_printf_i+0xbe>
 8007f4c:	b2b6      	uxth	r6, r6
 8007f4e:	6019      	str	r1, [r3, #0]
 8007f50:	4b53      	ldr	r3, [pc, #332]	@ (80080a0 <_printf_i+0x210>)
 8007f52:	270a      	movs	r7, #10
 8007f54:	9304      	str	r3, [sp, #16]
 8007f56:	2a6f      	cmp	r2, #111	@ 0x6f
 8007f58:	d100      	bne.n	8007f5c <_printf_i+0xcc>
 8007f5a:	3f02      	subs	r7, #2
 8007f5c:	0023      	movs	r3, r4
 8007f5e:	2200      	movs	r2, #0
 8007f60:	3343      	adds	r3, #67	@ 0x43
 8007f62:	701a      	strb	r2, [r3, #0]
 8007f64:	6863      	ldr	r3, [r4, #4]
 8007f66:	60a3      	str	r3, [r4, #8]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	db06      	blt.n	8007f7a <_printf_i+0xea>
 8007f6c:	2104      	movs	r1, #4
 8007f6e:	6822      	ldr	r2, [r4, #0]
 8007f70:	9d03      	ldr	r5, [sp, #12]
 8007f72:	438a      	bics	r2, r1
 8007f74:	6022      	str	r2, [r4, #0]
 8007f76:	4333      	orrs	r3, r6
 8007f78:	d00c      	beq.n	8007f94 <_printf_i+0x104>
 8007f7a:	9d03      	ldr	r5, [sp, #12]
 8007f7c:	0030      	movs	r0, r6
 8007f7e:	0039      	movs	r1, r7
 8007f80:	f7f8 f964 	bl	800024c <__aeabi_uidivmod>
 8007f84:	9b04      	ldr	r3, [sp, #16]
 8007f86:	3d01      	subs	r5, #1
 8007f88:	5c5b      	ldrb	r3, [r3, r1]
 8007f8a:	702b      	strb	r3, [r5, #0]
 8007f8c:	0033      	movs	r3, r6
 8007f8e:	0006      	movs	r6, r0
 8007f90:	429f      	cmp	r7, r3
 8007f92:	d9f3      	bls.n	8007f7c <_printf_i+0xec>
 8007f94:	2f08      	cmp	r7, #8
 8007f96:	d109      	bne.n	8007fac <_printf_i+0x11c>
 8007f98:	6823      	ldr	r3, [r4, #0]
 8007f9a:	07db      	lsls	r3, r3, #31
 8007f9c:	d506      	bpl.n	8007fac <_printf_i+0x11c>
 8007f9e:	6862      	ldr	r2, [r4, #4]
 8007fa0:	6923      	ldr	r3, [r4, #16]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	dc02      	bgt.n	8007fac <_printf_i+0x11c>
 8007fa6:	2330      	movs	r3, #48	@ 0x30
 8007fa8:	3d01      	subs	r5, #1
 8007faa:	702b      	strb	r3, [r5, #0]
 8007fac:	9b03      	ldr	r3, [sp, #12]
 8007fae:	1b5b      	subs	r3, r3, r5
 8007fb0:	6123      	str	r3, [r4, #16]
 8007fb2:	9b07      	ldr	r3, [sp, #28]
 8007fb4:	0021      	movs	r1, r4
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	9805      	ldr	r0, [sp, #20]
 8007fba:	9b06      	ldr	r3, [sp, #24]
 8007fbc:	aa09      	add	r2, sp, #36	@ 0x24
 8007fbe:	f7ff fef7 	bl	8007db0 <_printf_common>
 8007fc2:	3001      	adds	r0, #1
 8007fc4:	d148      	bne.n	8008058 <_printf_i+0x1c8>
 8007fc6:	2001      	movs	r0, #1
 8007fc8:	4240      	negs	r0, r0
 8007fca:	b00b      	add	sp, #44	@ 0x2c
 8007fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fce:	2220      	movs	r2, #32
 8007fd0:	6809      	ldr	r1, [r1, #0]
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	6022      	str	r2, [r4, #0]
 8007fd6:	2278      	movs	r2, #120	@ 0x78
 8007fd8:	4932      	ldr	r1, [pc, #200]	@ (80080a4 <_printf_i+0x214>)
 8007fda:	9104      	str	r1, [sp, #16]
 8007fdc:	0021      	movs	r1, r4
 8007fde:	3145      	adds	r1, #69	@ 0x45
 8007fe0:	700a      	strb	r2, [r1, #0]
 8007fe2:	6819      	ldr	r1, [r3, #0]
 8007fe4:	6822      	ldr	r2, [r4, #0]
 8007fe6:	c940      	ldmia	r1!, {r6}
 8007fe8:	0610      	lsls	r0, r2, #24
 8007fea:	d402      	bmi.n	8007ff2 <_printf_i+0x162>
 8007fec:	0650      	lsls	r0, r2, #25
 8007fee:	d500      	bpl.n	8007ff2 <_printf_i+0x162>
 8007ff0:	b2b6      	uxth	r6, r6
 8007ff2:	6019      	str	r1, [r3, #0]
 8007ff4:	07d3      	lsls	r3, r2, #31
 8007ff6:	d502      	bpl.n	8007ffe <_printf_i+0x16e>
 8007ff8:	2320      	movs	r3, #32
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	6023      	str	r3, [r4, #0]
 8007ffe:	2e00      	cmp	r6, #0
 8008000:	d001      	beq.n	8008006 <_printf_i+0x176>
 8008002:	2710      	movs	r7, #16
 8008004:	e7aa      	b.n	8007f5c <_printf_i+0xcc>
 8008006:	2220      	movs	r2, #32
 8008008:	6823      	ldr	r3, [r4, #0]
 800800a:	4393      	bics	r3, r2
 800800c:	6023      	str	r3, [r4, #0]
 800800e:	e7f8      	b.n	8008002 <_printf_i+0x172>
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	680d      	ldr	r5, [r1, #0]
 8008014:	1d10      	adds	r0, r2, #4
 8008016:	6949      	ldr	r1, [r1, #20]
 8008018:	6018      	str	r0, [r3, #0]
 800801a:	6813      	ldr	r3, [r2, #0]
 800801c:	062e      	lsls	r6, r5, #24
 800801e:	d501      	bpl.n	8008024 <_printf_i+0x194>
 8008020:	6019      	str	r1, [r3, #0]
 8008022:	e002      	b.n	800802a <_printf_i+0x19a>
 8008024:	066d      	lsls	r5, r5, #25
 8008026:	d5fb      	bpl.n	8008020 <_printf_i+0x190>
 8008028:	8019      	strh	r1, [r3, #0]
 800802a:	2300      	movs	r3, #0
 800802c:	9d03      	ldr	r5, [sp, #12]
 800802e:	6123      	str	r3, [r4, #16]
 8008030:	e7bf      	b.n	8007fb2 <_printf_i+0x122>
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	1d11      	adds	r1, r2, #4
 8008036:	6019      	str	r1, [r3, #0]
 8008038:	6815      	ldr	r5, [r2, #0]
 800803a:	2100      	movs	r1, #0
 800803c:	0028      	movs	r0, r5
 800803e:	6862      	ldr	r2, [r4, #4]
 8008040:	f000 f9e8 	bl	8008414 <memchr>
 8008044:	2800      	cmp	r0, #0
 8008046:	d001      	beq.n	800804c <_printf_i+0x1bc>
 8008048:	1b40      	subs	r0, r0, r5
 800804a:	6060      	str	r0, [r4, #4]
 800804c:	6863      	ldr	r3, [r4, #4]
 800804e:	6123      	str	r3, [r4, #16]
 8008050:	2300      	movs	r3, #0
 8008052:	9a03      	ldr	r2, [sp, #12]
 8008054:	7013      	strb	r3, [r2, #0]
 8008056:	e7ac      	b.n	8007fb2 <_printf_i+0x122>
 8008058:	002a      	movs	r2, r5
 800805a:	6923      	ldr	r3, [r4, #16]
 800805c:	9906      	ldr	r1, [sp, #24]
 800805e:	9805      	ldr	r0, [sp, #20]
 8008060:	9d07      	ldr	r5, [sp, #28]
 8008062:	47a8      	blx	r5
 8008064:	3001      	adds	r0, #1
 8008066:	d0ae      	beq.n	8007fc6 <_printf_i+0x136>
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	079b      	lsls	r3, r3, #30
 800806c:	d415      	bmi.n	800809a <_printf_i+0x20a>
 800806e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008070:	68e0      	ldr	r0, [r4, #12]
 8008072:	4298      	cmp	r0, r3
 8008074:	daa9      	bge.n	8007fca <_printf_i+0x13a>
 8008076:	0018      	movs	r0, r3
 8008078:	e7a7      	b.n	8007fca <_printf_i+0x13a>
 800807a:	0022      	movs	r2, r4
 800807c:	2301      	movs	r3, #1
 800807e:	9906      	ldr	r1, [sp, #24]
 8008080:	9805      	ldr	r0, [sp, #20]
 8008082:	9e07      	ldr	r6, [sp, #28]
 8008084:	3219      	adds	r2, #25
 8008086:	47b0      	blx	r6
 8008088:	3001      	adds	r0, #1
 800808a:	d09c      	beq.n	8007fc6 <_printf_i+0x136>
 800808c:	3501      	adds	r5, #1
 800808e:	68e3      	ldr	r3, [r4, #12]
 8008090:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008092:	1a9b      	subs	r3, r3, r2
 8008094:	42ab      	cmp	r3, r5
 8008096:	dcf0      	bgt.n	800807a <_printf_i+0x1ea>
 8008098:	e7e9      	b.n	800806e <_printf_i+0x1de>
 800809a:	2500      	movs	r5, #0
 800809c:	e7f7      	b.n	800808e <_printf_i+0x1fe>
 800809e:	46c0      	nop			@ (mov r8, r8)
 80080a0:	0800b11a 	.word	0x0800b11a
 80080a4:	0800b12b 	.word	0x0800b12b

080080a8 <sniprintf>:
 80080a8:	b40c      	push	{r2, r3}
 80080aa:	b530      	push	{r4, r5, lr}
 80080ac:	4b18      	ldr	r3, [pc, #96]	@ (8008110 <sniprintf+0x68>)
 80080ae:	000c      	movs	r4, r1
 80080b0:	681d      	ldr	r5, [r3, #0]
 80080b2:	b09d      	sub	sp, #116	@ 0x74
 80080b4:	2900      	cmp	r1, #0
 80080b6:	da08      	bge.n	80080ca <sniprintf+0x22>
 80080b8:	238b      	movs	r3, #139	@ 0x8b
 80080ba:	2001      	movs	r0, #1
 80080bc:	602b      	str	r3, [r5, #0]
 80080be:	4240      	negs	r0, r0
 80080c0:	b01d      	add	sp, #116	@ 0x74
 80080c2:	bc30      	pop	{r4, r5}
 80080c4:	bc08      	pop	{r3}
 80080c6:	b002      	add	sp, #8
 80080c8:	4718      	bx	r3
 80080ca:	2382      	movs	r3, #130	@ 0x82
 80080cc:	466a      	mov	r2, sp
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	8293      	strh	r3, [r2, #20]
 80080d2:	2300      	movs	r3, #0
 80080d4:	9002      	str	r0, [sp, #8]
 80080d6:	931b      	str	r3, [sp, #108]	@ 0x6c
 80080d8:	9006      	str	r0, [sp, #24]
 80080da:	4299      	cmp	r1, r3
 80080dc:	d000      	beq.n	80080e0 <sniprintf+0x38>
 80080de:	1e4b      	subs	r3, r1, #1
 80080e0:	9304      	str	r3, [sp, #16]
 80080e2:	9307      	str	r3, [sp, #28]
 80080e4:	2301      	movs	r3, #1
 80080e6:	466a      	mov	r2, sp
 80080e8:	425b      	negs	r3, r3
 80080ea:	82d3      	strh	r3, [r2, #22]
 80080ec:	0028      	movs	r0, r5
 80080ee:	ab21      	add	r3, sp, #132	@ 0x84
 80080f0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80080f2:	a902      	add	r1, sp, #8
 80080f4:	9301      	str	r3, [sp, #4]
 80080f6:	f001 f877 	bl	80091e8 <_svfiprintf_r>
 80080fa:	1c43      	adds	r3, r0, #1
 80080fc:	da01      	bge.n	8008102 <sniprintf+0x5a>
 80080fe:	238b      	movs	r3, #139	@ 0x8b
 8008100:	602b      	str	r3, [r5, #0]
 8008102:	2c00      	cmp	r4, #0
 8008104:	d0dc      	beq.n	80080c0 <sniprintf+0x18>
 8008106:	2200      	movs	r2, #0
 8008108:	9b02      	ldr	r3, [sp, #8]
 800810a:	701a      	strb	r2, [r3, #0]
 800810c:	e7d8      	b.n	80080c0 <sniprintf+0x18>
 800810e:	46c0      	nop			@ (mov r8, r8)
 8008110:	20000018 	.word	0x20000018

08008114 <std>:
 8008114:	2300      	movs	r3, #0
 8008116:	b510      	push	{r4, lr}
 8008118:	0004      	movs	r4, r0
 800811a:	6003      	str	r3, [r0, #0]
 800811c:	6043      	str	r3, [r0, #4]
 800811e:	6083      	str	r3, [r0, #8]
 8008120:	8181      	strh	r1, [r0, #12]
 8008122:	6643      	str	r3, [r0, #100]	@ 0x64
 8008124:	81c2      	strh	r2, [r0, #14]
 8008126:	6103      	str	r3, [r0, #16]
 8008128:	6143      	str	r3, [r0, #20]
 800812a:	6183      	str	r3, [r0, #24]
 800812c:	0019      	movs	r1, r3
 800812e:	2208      	movs	r2, #8
 8008130:	305c      	adds	r0, #92	@ 0x5c
 8008132:	f000 f935 	bl	80083a0 <memset>
 8008136:	4b0b      	ldr	r3, [pc, #44]	@ (8008164 <std+0x50>)
 8008138:	6224      	str	r4, [r4, #32]
 800813a:	6263      	str	r3, [r4, #36]	@ 0x24
 800813c:	4b0a      	ldr	r3, [pc, #40]	@ (8008168 <std+0x54>)
 800813e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008140:	4b0a      	ldr	r3, [pc, #40]	@ (800816c <std+0x58>)
 8008142:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008144:	4b0a      	ldr	r3, [pc, #40]	@ (8008170 <std+0x5c>)
 8008146:	6323      	str	r3, [r4, #48]	@ 0x30
 8008148:	4b0a      	ldr	r3, [pc, #40]	@ (8008174 <std+0x60>)
 800814a:	429c      	cmp	r4, r3
 800814c:	d005      	beq.n	800815a <std+0x46>
 800814e:	4b0a      	ldr	r3, [pc, #40]	@ (8008178 <std+0x64>)
 8008150:	429c      	cmp	r4, r3
 8008152:	d002      	beq.n	800815a <std+0x46>
 8008154:	4b09      	ldr	r3, [pc, #36]	@ (800817c <std+0x68>)
 8008156:	429c      	cmp	r4, r3
 8008158:	d103      	bne.n	8008162 <std+0x4e>
 800815a:	0020      	movs	r0, r4
 800815c:	3058      	adds	r0, #88	@ 0x58
 800815e:	f000 f951 	bl	8008404 <__retarget_lock_init_recursive>
 8008162:	bd10      	pop	{r4, pc}
 8008164:	0800a081 	.word	0x0800a081
 8008168:	0800a0a9 	.word	0x0800a0a9
 800816c:	0800a0e1 	.word	0x0800a0e1
 8008170:	0800a10d 	.word	0x0800a10d
 8008174:	2000073c 	.word	0x2000073c
 8008178:	200007a4 	.word	0x200007a4
 800817c:	2000080c 	.word	0x2000080c

08008180 <stdio_exit_handler>:
 8008180:	b510      	push	{r4, lr}
 8008182:	4a03      	ldr	r2, [pc, #12]	@ (8008190 <stdio_exit_handler+0x10>)
 8008184:	4903      	ldr	r1, [pc, #12]	@ (8008194 <stdio_exit_handler+0x14>)
 8008186:	4804      	ldr	r0, [pc, #16]	@ (8008198 <stdio_exit_handler+0x18>)
 8008188:	f000 f86c 	bl	8008264 <_fwalk_sglue>
 800818c:	bd10      	pop	{r4, pc}
 800818e:	46c0      	nop			@ (mov r8, r8)
 8008190:	2000000c 	.word	0x2000000c
 8008194:	080098d1 	.word	0x080098d1
 8008198:	2000001c 	.word	0x2000001c

0800819c <cleanup_stdio>:
 800819c:	6841      	ldr	r1, [r0, #4]
 800819e:	4b0b      	ldr	r3, [pc, #44]	@ (80081cc <cleanup_stdio+0x30>)
 80081a0:	b510      	push	{r4, lr}
 80081a2:	0004      	movs	r4, r0
 80081a4:	4299      	cmp	r1, r3
 80081a6:	d001      	beq.n	80081ac <cleanup_stdio+0x10>
 80081a8:	f001 fb92 	bl	80098d0 <_fflush_r>
 80081ac:	68a1      	ldr	r1, [r4, #8]
 80081ae:	4b08      	ldr	r3, [pc, #32]	@ (80081d0 <cleanup_stdio+0x34>)
 80081b0:	4299      	cmp	r1, r3
 80081b2:	d002      	beq.n	80081ba <cleanup_stdio+0x1e>
 80081b4:	0020      	movs	r0, r4
 80081b6:	f001 fb8b 	bl	80098d0 <_fflush_r>
 80081ba:	68e1      	ldr	r1, [r4, #12]
 80081bc:	4b05      	ldr	r3, [pc, #20]	@ (80081d4 <cleanup_stdio+0x38>)
 80081be:	4299      	cmp	r1, r3
 80081c0:	d002      	beq.n	80081c8 <cleanup_stdio+0x2c>
 80081c2:	0020      	movs	r0, r4
 80081c4:	f001 fb84 	bl	80098d0 <_fflush_r>
 80081c8:	bd10      	pop	{r4, pc}
 80081ca:	46c0      	nop			@ (mov r8, r8)
 80081cc:	2000073c 	.word	0x2000073c
 80081d0:	200007a4 	.word	0x200007a4
 80081d4:	2000080c 	.word	0x2000080c

080081d8 <global_stdio_init.part.0>:
 80081d8:	b510      	push	{r4, lr}
 80081da:	4b09      	ldr	r3, [pc, #36]	@ (8008200 <global_stdio_init.part.0+0x28>)
 80081dc:	4a09      	ldr	r2, [pc, #36]	@ (8008204 <global_stdio_init.part.0+0x2c>)
 80081de:	2104      	movs	r1, #4
 80081e0:	601a      	str	r2, [r3, #0]
 80081e2:	4809      	ldr	r0, [pc, #36]	@ (8008208 <global_stdio_init.part.0+0x30>)
 80081e4:	2200      	movs	r2, #0
 80081e6:	f7ff ff95 	bl	8008114 <std>
 80081ea:	2201      	movs	r2, #1
 80081ec:	2109      	movs	r1, #9
 80081ee:	4807      	ldr	r0, [pc, #28]	@ (800820c <global_stdio_init.part.0+0x34>)
 80081f0:	f7ff ff90 	bl	8008114 <std>
 80081f4:	2202      	movs	r2, #2
 80081f6:	2112      	movs	r1, #18
 80081f8:	4805      	ldr	r0, [pc, #20]	@ (8008210 <global_stdio_init.part.0+0x38>)
 80081fa:	f7ff ff8b 	bl	8008114 <std>
 80081fe:	bd10      	pop	{r4, pc}
 8008200:	20000874 	.word	0x20000874
 8008204:	08008181 	.word	0x08008181
 8008208:	2000073c 	.word	0x2000073c
 800820c:	200007a4 	.word	0x200007a4
 8008210:	2000080c 	.word	0x2000080c

08008214 <__sfp_lock_acquire>:
 8008214:	b510      	push	{r4, lr}
 8008216:	4802      	ldr	r0, [pc, #8]	@ (8008220 <__sfp_lock_acquire+0xc>)
 8008218:	f000 f8f5 	bl	8008406 <__retarget_lock_acquire_recursive>
 800821c:	bd10      	pop	{r4, pc}
 800821e:	46c0      	nop			@ (mov r8, r8)
 8008220:	20000879 	.word	0x20000879

08008224 <__sfp_lock_release>:
 8008224:	b510      	push	{r4, lr}
 8008226:	4802      	ldr	r0, [pc, #8]	@ (8008230 <__sfp_lock_release+0xc>)
 8008228:	f000 f8ee 	bl	8008408 <__retarget_lock_release_recursive>
 800822c:	bd10      	pop	{r4, pc}
 800822e:	46c0      	nop			@ (mov r8, r8)
 8008230:	20000879 	.word	0x20000879

08008234 <__sinit>:
 8008234:	b510      	push	{r4, lr}
 8008236:	0004      	movs	r4, r0
 8008238:	f7ff ffec 	bl	8008214 <__sfp_lock_acquire>
 800823c:	6a23      	ldr	r3, [r4, #32]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d002      	beq.n	8008248 <__sinit+0x14>
 8008242:	f7ff ffef 	bl	8008224 <__sfp_lock_release>
 8008246:	bd10      	pop	{r4, pc}
 8008248:	4b04      	ldr	r3, [pc, #16]	@ (800825c <__sinit+0x28>)
 800824a:	6223      	str	r3, [r4, #32]
 800824c:	4b04      	ldr	r3, [pc, #16]	@ (8008260 <__sinit+0x2c>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d1f6      	bne.n	8008242 <__sinit+0xe>
 8008254:	f7ff ffc0 	bl	80081d8 <global_stdio_init.part.0>
 8008258:	e7f3      	b.n	8008242 <__sinit+0xe>
 800825a:	46c0      	nop			@ (mov r8, r8)
 800825c:	0800819d 	.word	0x0800819d
 8008260:	20000874 	.word	0x20000874

08008264 <_fwalk_sglue>:
 8008264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008266:	0014      	movs	r4, r2
 8008268:	2600      	movs	r6, #0
 800826a:	9000      	str	r0, [sp, #0]
 800826c:	9101      	str	r1, [sp, #4]
 800826e:	68a5      	ldr	r5, [r4, #8]
 8008270:	6867      	ldr	r7, [r4, #4]
 8008272:	3f01      	subs	r7, #1
 8008274:	d504      	bpl.n	8008280 <_fwalk_sglue+0x1c>
 8008276:	6824      	ldr	r4, [r4, #0]
 8008278:	2c00      	cmp	r4, #0
 800827a:	d1f8      	bne.n	800826e <_fwalk_sglue+0xa>
 800827c:	0030      	movs	r0, r6
 800827e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008280:	89ab      	ldrh	r3, [r5, #12]
 8008282:	2b01      	cmp	r3, #1
 8008284:	d908      	bls.n	8008298 <_fwalk_sglue+0x34>
 8008286:	220e      	movs	r2, #14
 8008288:	5eab      	ldrsh	r3, [r5, r2]
 800828a:	3301      	adds	r3, #1
 800828c:	d004      	beq.n	8008298 <_fwalk_sglue+0x34>
 800828e:	0029      	movs	r1, r5
 8008290:	9800      	ldr	r0, [sp, #0]
 8008292:	9b01      	ldr	r3, [sp, #4]
 8008294:	4798      	blx	r3
 8008296:	4306      	orrs	r6, r0
 8008298:	3568      	adds	r5, #104	@ 0x68
 800829a:	e7ea      	b.n	8008272 <_fwalk_sglue+0xe>

0800829c <iprintf>:
 800829c:	b40f      	push	{r0, r1, r2, r3}
 800829e:	b507      	push	{r0, r1, r2, lr}
 80082a0:	4905      	ldr	r1, [pc, #20]	@ (80082b8 <iprintf+0x1c>)
 80082a2:	ab04      	add	r3, sp, #16
 80082a4:	6808      	ldr	r0, [r1, #0]
 80082a6:	cb04      	ldmia	r3!, {r2}
 80082a8:	6881      	ldr	r1, [r0, #8]
 80082aa:	9301      	str	r3, [sp, #4]
 80082ac:	f001 f8c2 	bl	8009434 <_vfiprintf_r>
 80082b0:	b003      	add	sp, #12
 80082b2:	bc08      	pop	{r3}
 80082b4:	b004      	add	sp, #16
 80082b6:	4718      	bx	r3
 80082b8:	20000018 	.word	0x20000018

080082bc <_puts_r>:
 80082bc:	6a03      	ldr	r3, [r0, #32]
 80082be:	b570      	push	{r4, r5, r6, lr}
 80082c0:	0005      	movs	r5, r0
 80082c2:	000e      	movs	r6, r1
 80082c4:	6884      	ldr	r4, [r0, #8]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <_puts_r+0x12>
 80082ca:	f7ff ffb3 	bl	8008234 <__sinit>
 80082ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082d0:	07db      	lsls	r3, r3, #31
 80082d2:	d405      	bmi.n	80082e0 <_puts_r+0x24>
 80082d4:	89a3      	ldrh	r3, [r4, #12]
 80082d6:	059b      	lsls	r3, r3, #22
 80082d8:	d402      	bmi.n	80082e0 <_puts_r+0x24>
 80082da:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082dc:	f000 f893 	bl	8008406 <__retarget_lock_acquire_recursive>
 80082e0:	89a3      	ldrh	r3, [r4, #12]
 80082e2:	071b      	lsls	r3, r3, #28
 80082e4:	d502      	bpl.n	80082ec <_puts_r+0x30>
 80082e6:	6923      	ldr	r3, [r4, #16]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d11f      	bne.n	800832c <_puts_r+0x70>
 80082ec:	0021      	movs	r1, r4
 80082ee:	0028      	movs	r0, r5
 80082f0:	f001 ff84 	bl	800a1fc <__swsetup_r>
 80082f4:	2800      	cmp	r0, #0
 80082f6:	d019      	beq.n	800832c <_puts_r+0x70>
 80082f8:	2501      	movs	r5, #1
 80082fa:	426d      	negs	r5, r5
 80082fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082fe:	07db      	lsls	r3, r3, #31
 8008300:	d405      	bmi.n	800830e <_puts_r+0x52>
 8008302:	89a3      	ldrh	r3, [r4, #12]
 8008304:	059b      	lsls	r3, r3, #22
 8008306:	d402      	bmi.n	800830e <_puts_r+0x52>
 8008308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800830a:	f000 f87d 	bl	8008408 <__retarget_lock_release_recursive>
 800830e:	0028      	movs	r0, r5
 8008310:	bd70      	pop	{r4, r5, r6, pc}
 8008312:	3601      	adds	r6, #1
 8008314:	60a3      	str	r3, [r4, #8]
 8008316:	2b00      	cmp	r3, #0
 8008318:	da04      	bge.n	8008324 <_puts_r+0x68>
 800831a:	69a2      	ldr	r2, [r4, #24]
 800831c:	429a      	cmp	r2, r3
 800831e:	dc16      	bgt.n	800834e <_puts_r+0x92>
 8008320:	290a      	cmp	r1, #10
 8008322:	d014      	beq.n	800834e <_puts_r+0x92>
 8008324:	6823      	ldr	r3, [r4, #0]
 8008326:	1c5a      	adds	r2, r3, #1
 8008328:	6022      	str	r2, [r4, #0]
 800832a:	7019      	strb	r1, [r3, #0]
 800832c:	68a3      	ldr	r3, [r4, #8]
 800832e:	7831      	ldrb	r1, [r6, #0]
 8008330:	3b01      	subs	r3, #1
 8008332:	2900      	cmp	r1, #0
 8008334:	d1ed      	bne.n	8008312 <_puts_r+0x56>
 8008336:	60a3      	str	r3, [r4, #8]
 8008338:	2b00      	cmp	r3, #0
 800833a:	da0f      	bge.n	800835c <_puts_r+0xa0>
 800833c:	0022      	movs	r2, r4
 800833e:	0028      	movs	r0, r5
 8008340:	310a      	adds	r1, #10
 8008342:	f001 ff19 	bl	800a178 <__swbuf_r>
 8008346:	3001      	adds	r0, #1
 8008348:	d0d6      	beq.n	80082f8 <_puts_r+0x3c>
 800834a:	250a      	movs	r5, #10
 800834c:	e7d6      	b.n	80082fc <_puts_r+0x40>
 800834e:	0022      	movs	r2, r4
 8008350:	0028      	movs	r0, r5
 8008352:	f001 ff11 	bl	800a178 <__swbuf_r>
 8008356:	3001      	adds	r0, #1
 8008358:	d1e8      	bne.n	800832c <_puts_r+0x70>
 800835a:	e7cd      	b.n	80082f8 <_puts_r+0x3c>
 800835c:	6823      	ldr	r3, [r4, #0]
 800835e:	1c5a      	adds	r2, r3, #1
 8008360:	6022      	str	r2, [r4, #0]
 8008362:	220a      	movs	r2, #10
 8008364:	701a      	strb	r2, [r3, #0]
 8008366:	e7f0      	b.n	800834a <_puts_r+0x8e>

08008368 <puts>:
 8008368:	b510      	push	{r4, lr}
 800836a:	4b03      	ldr	r3, [pc, #12]	@ (8008378 <puts+0x10>)
 800836c:	0001      	movs	r1, r0
 800836e:	6818      	ldr	r0, [r3, #0]
 8008370:	f7ff ffa4 	bl	80082bc <_puts_r>
 8008374:	bd10      	pop	{r4, pc}
 8008376:	46c0      	nop			@ (mov r8, r8)
 8008378:	20000018 	.word	0x20000018

0800837c <memmove>:
 800837c:	b510      	push	{r4, lr}
 800837e:	4288      	cmp	r0, r1
 8008380:	d902      	bls.n	8008388 <memmove+0xc>
 8008382:	188b      	adds	r3, r1, r2
 8008384:	4298      	cmp	r0, r3
 8008386:	d308      	bcc.n	800839a <memmove+0x1e>
 8008388:	2300      	movs	r3, #0
 800838a:	429a      	cmp	r2, r3
 800838c:	d007      	beq.n	800839e <memmove+0x22>
 800838e:	5ccc      	ldrb	r4, [r1, r3]
 8008390:	54c4      	strb	r4, [r0, r3]
 8008392:	3301      	adds	r3, #1
 8008394:	e7f9      	b.n	800838a <memmove+0xe>
 8008396:	5c8b      	ldrb	r3, [r1, r2]
 8008398:	5483      	strb	r3, [r0, r2]
 800839a:	3a01      	subs	r2, #1
 800839c:	d2fb      	bcs.n	8008396 <memmove+0x1a>
 800839e:	bd10      	pop	{r4, pc}

080083a0 <memset>:
 80083a0:	0003      	movs	r3, r0
 80083a2:	1882      	adds	r2, r0, r2
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d100      	bne.n	80083aa <memset+0xa>
 80083a8:	4770      	bx	lr
 80083aa:	7019      	strb	r1, [r3, #0]
 80083ac:	3301      	adds	r3, #1
 80083ae:	e7f9      	b.n	80083a4 <memset+0x4>

080083b0 <__errno>:
 80083b0:	4b01      	ldr	r3, [pc, #4]	@ (80083b8 <__errno+0x8>)
 80083b2:	6818      	ldr	r0, [r3, #0]
 80083b4:	4770      	bx	lr
 80083b6:	46c0      	nop			@ (mov r8, r8)
 80083b8:	20000018 	.word	0x20000018

080083bc <__libc_init_array>:
 80083bc:	b570      	push	{r4, r5, r6, lr}
 80083be:	2600      	movs	r6, #0
 80083c0:	4c0c      	ldr	r4, [pc, #48]	@ (80083f4 <__libc_init_array+0x38>)
 80083c2:	4d0d      	ldr	r5, [pc, #52]	@ (80083f8 <__libc_init_array+0x3c>)
 80083c4:	1b64      	subs	r4, r4, r5
 80083c6:	10a4      	asrs	r4, r4, #2
 80083c8:	42a6      	cmp	r6, r4
 80083ca:	d109      	bne.n	80083e0 <__libc_init_array+0x24>
 80083cc:	2600      	movs	r6, #0
 80083ce:	f002 f981 	bl	800a6d4 <_init>
 80083d2:	4c0a      	ldr	r4, [pc, #40]	@ (80083fc <__libc_init_array+0x40>)
 80083d4:	4d0a      	ldr	r5, [pc, #40]	@ (8008400 <__libc_init_array+0x44>)
 80083d6:	1b64      	subs	r4, r4, r5
 80083d8:	10a4      	asrs	r4, r4, #2
 80083da:	42a6      	cmp	r6, r4
 80083dc:	d105      	bne.n	80083ea <__libc_init_array+0x2e>
 80083de:	bd70      	pop	{r4, r5, r6, pc}
 80083e0:	00b3      	lsls	r3, r6, #2
 80083e2:	58eb      	ldr	r3, [r5, r3]
 80083e4:	4798      	blx	r3
 80083e6:	3601      	adds	r6, #1
 80083e8:	e7ee      	b.n	80083c8 <__libc_init_array+0xc>
 80083ea:	00b3      	lsls	r3, r6, #2
 80083ec:	58eb      	ldr	r3, [r5, r3]
 80083ee:	4798      	blx	r3
 80083f0:	3601      	adds	r6, #1
 80083f2:	e7f2      	b.n	80083da <__libc_init_array+0x1e>
 80083f4:	0800b484 	.word	0x0800b484
 80083f8:	0800b484 	.word	0x0800b484
 80083fc:	0800b488 	.word	0x0800b488
 8008400:	0800b484 	.word	0x0800b484

08008404 <__retarget_lock_init_recursive>:
 8008404:	4770      	bx	lr

08008406 <__retarget_lock_acquire_recursive>:
 8008406:	4770      	bx	lr

08008408 <__retarget_lock_release_recursive>:
 8008408:	4770      	bx	lr
	...

0800840c <_localeconv_r>:
 800840c:	4800      	ldr	r0, [pc, #0]	@ (8008410 <_localeconv_r+0x4>)
 800840e:	4770      	bx	lr
 8008410:	20000158 	.word	0x20000158

08008414 <memchr>:
 8008414:	b2c9      	uxtb	r1, r1
 8008416:	1882      	adds	r2, r0, r2
 8008418:	4290      	cmp	r0, r2
 800841a:	d101      	bne.n	8008420 <memchr+0xc>
 800841c:	2000      	movs	r0, #0
 800841e:	4770      	bx	lr
 8008420:	7803      	ldrb	r3, [r0, #0]
 8008422:	428b      	cmp	r3, r1
 8008424:	d0fb      	beq.n	800841e <memchr+0xa>
 8008426:	3001      	adds	r0, #1
 8008428:	e7f6      	b.n	8008418 <memchr+0x4>

0800842a <memcpy>:
 800842a:	2300      	movs	r3, #0
 800842c:	b510      	push	{r4, lr}
 800842e:	429a      	cmp	r2, r3
 8008430:	d100      	bne.n	8008434 <memcpy+0xa>
 8008432:	bd10      	pop	{r4, pc}
 8008434:	5ccc      	ldrb	r4, [r1, r3]
 8008436:	54c4      	strb	r4, [r0, r3]
 8008438:	3301      	adds	r3, #1
 800843a:	e7f8      	b.n	800842e <memcpy+0x4>

0800843c <quorem>:
 800843c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800843e:	6903      	ldr	r3, [r0, #16]
 8008440:	690c      	ldr	r4, [r1, #16]
 8008442:	b089      	sub	sp, #36	@ 0x24
 8008444:	9003      	str	r0, [sp, #12]
 8008446:	9106      	str	r1, [sp, #24]
 8008448:	2000      	movs	r0, #0
 800844a:	42a3      	cmp	r3, r4
 800844c:	db63      	blt.n	8008516 <quorem+0xda>
 800844e:	000b      	movs	r3, r1
 8008450:	3c01      	subs	r4, #1
 8008452:	3314      	adds	r3, #20
 8008454:	00a5      	lsls	r5, r4, #2
 8008456:	9304      	str	r3, [sp, #16]
 8008458:	195b      	adds	r3, r3, r5
 800845a:	9305      	str	r3, [sp, #20]
 800845c:	9b03      	ldr	r3, [sp, #12]
 800845e:	3314      	adds	r3, #20
 8008460:	9301      	str	r3, [sp, #4]
 8008462:	195d      	adds	r5, r3, r5
 8008464:	9b05      	ldr	r3, [sp, #20]
 8008466:	682f      	ldr	r7, [r5, #0]
 8008468:	681e      	ldr	r6, [r3, #0]
 800846a:	0038      	movs	r0, r7
 800846c:	3601      	adds	r6, #1
 800846e:	0031      	movs	r1, r6
 8008470:	f7f7 fe66 	bl	8000140 <__udivsi3>
 8008474:	9002      	str	r0, [sp, #8]
 8008476:	42b7      	cmp	r7, r6
 8008478:	d327      	bcc.n	80084ca <quorem+0x8e>
 800847a:	9b04      	ldr	r3, [sp, #16]
 800847c:	2700      	movs	r7, #0
 800847e:	469c      	mov	ip, r3
 8008480:	9e01      	ldr	r6, [sp, #4]
 8008482:	9707      	str	r7, [sp, #28]
 8008484:	4662      	mov	r2, ip
 8008486:	ca08      	ldmia	r2!, {r3}
 8008488:	6830      	ldr	r0, [r6, #0]
 800848a:	4694      	mov	ip, r2
 800848c:	9a02      	ldr	r2, [sp, #8]
 800848e:	b299      	uxth	r1, r3
 8008490:	4351      	muls	r1, r2
 8008492:	0c1b      	lsrs	r3, r3, #16
 8008494:	4353      	muls	r3, r2
 8008496:	19c9      	adds	r1, r1, r7
 8008498:	0c0a      	lsrs	r2, r1, #16
 800849a:	189b      	adds	r3, r3, r2
 800849c:	b289      	uxth	r1, r1
 800849e:	b282      	uxth	r2, r0
 80084a0:	1a52      	subs	r2, r2, r1
 80084a2:	9907      	ldr	r1, [sp, #28]
 80084a4:	0c1f      	lsrs	r7, r3, #16
 80084a6:	1852      	adds	r2, r2, r1
 80084a8:	0c00      	lsrs	r0, r0, #16
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	1411      	asrs	r1, r2, #16
 80084ae:	1ac3      	subs	r3, r0, r3
 80084b0:	185b      	adds	r3, r3, r1
 80084b2:	1419      	asrs	r1, r3, #16
 80084b4:	b292      	uxth	r2, r2
 80084b6:	041b      	lsls	r3, r3, #16
 80084b8:	431a      	orrs	r2, r3
 80084ba:	9b05      	ldr	r3, [sp, #20]
 80084bc:	9107      	str	r1, [sp, #28]
 80084be:	c604      	stmia	r6!, {r2}
 80084c0:	4563      	cmp	r3, ip
 80084c2:	d2df      	bcs.n	8008484 <quorem+0x48>
 80084c4:	682b      	ldr	r3, [r5, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d02b      	beq.n	8008522 <quorem+0xe6>
 80084ca:	9906      	ldr	r1, [sp, #24]
 80084cc:	9803      	ldr	r0, [sp, #12]
 80084ce:	f001 fcc1 	bl	8009e54 <__mcmp>
 80084d2:	2800      	cmp	r0, #0
 80084d4:	db1e      	blt.n	8008514 <quorem+0xd8>
 80084d6:	2600      	movs	r6, #0
 80084d8:	9d01      	ldr	r5, [sp, #4]
 80084da:	9904      	ldr	r1, [sp, #16]
 80084dc:	c901      	ldmia	r1!, {r0}
 80084de:	682b      	ldr	r3, [r5, #0]
 80084e0:	b287      	uxth	r7, r0
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	1bd2      	subs	r2, r2, r7
 80084e6:	1992      	adds	r2, r2, r6
 80084e8:	0c00      	lsrs	r0, r0, #16
 80084ea:	0c1b      	lsrs	r3, r3, #16
 80084ec:	1a1b      	subs	r3, r3, r0
 80084ee:	1410      	asrs	r0, r2, #16
 80084f0:	181b      	adds	r3, r3, r0
 80084f2:	141e      	asrs	r6, r3, #16
 80084f4:	b292      	uxth	r2, r2
 80084f6:	041b      	lsls	r3, r3, #16
 80084f8:	431a      	orrs	r2, r3
 80084fa:	9b05      	ldr	r3, [sp, #20]
 80084fc:	c504      	stmia	r5!, {r2}
 80084fe:	428b      	cmp	r3, r1
 8008500:	d2ec      	bcs.n	80084dc <quorem+0xa0>
 8008502:	9a01      	ldr	r2, [sp, #4]
 8008504:	00a3      	lsls	r3, r4, #2
 8008506:	18d3      	adds	r3, r2, r3
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	2a00      	cmp	r2, #0
 800850c:	d014      	beq.n	8008538 <quorem+0xfc>
 800850e:	9b02      	ldr	r3, [sp, #8]
 8008510:	3301      	adds	r3, #1
 8008512:	9302      	str	r3, [sp, #8]
 8008514:	9802      	ldr	r0, [sp, #8]
 8008516:	b009      	add	sp, #36	@ 0x24
 8008518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800851a:	682b      	ldr	r3, [r5, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d104      	bne.n	800852a <quorem+0xee>
 8008520:	3c01      	subs	r4, #1
 8008522:	9b01      	ldr	r3, [sp, #4]
 8008524:	3d04      	subs	r5, #4
 8008526:	42ab      	cmp	r3, r5
 8008528:	d3f7      	bcc.n	800851a <quorem+0xde>
 800852a:	9b03      	ldr	r3, [sp, #12]
 800852c:	611c      	str	r4, [r3, #16]
 800852e:	e7cc      	b.n	80084ca <quorem+0x8e>
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	2a00      	cmp	r2, #0
 8008534:	d104      	bne.n	8008540 <quorem+0x104>
 8008536:	3c01      	subs	r4, #1
 8008538:	9a01      	ldr	r2, [sp, #4]
 800853a:	3b04      	subs	r3, #4
 800853c:	429a      	cmp	r2, r3
 800853e:	d3f7      	bcc.n	8008530 <quorem+0xf4>
 8008540:	9b03      	ldr	r3, [sp, #12]
 8008542:	611c      	str	r4, [r3, #16]
 8008544:	e7e3      	b.n	800850e <quorem+0xd2>
	...

08008548 <_dtoa_r>:
 8008548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800854a:	0014      	movs	r4, r2
 800854c:	001d      	movs	r5, r3
 800854e:	69c6      	ldr	r6, [r0, #28]
 8008550:	b09d      	sub	sp, #116	@ 0x74
 8008552:	940a      	str	r4, [sp, #40]	@ 0x28
 8008554:	950b      	str	r5, [sp, #44]	@ 0x2c
 8008556:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8008558:	9003      	str	r0, [sp, #12]
 800855a:	2e00      	cmp	r6, #0
 800855c:	d10f      	bne.n	800857e <_dtoa_r+0x36>
 800855e:	2010      	movs	r0, #16
 8008560:	f001 f884 	bl	800966c <malloc>
 8008564:	9b03      	ldr	r3, [sp, #12]
 8008566:	1e02      	subs	r2, r0, #0
 8008568:	61d8      	str	r0, [r3, #28]
 800856a:	d104      	bne.n	8008576 <_dtoa_r+0x2e>
 800856c:	21ef      	movs	r1, #239	@ 0xef
 800856e:	4bc7      	ldr	r3, [pc, #796]	@ (800888c <_dtoa_r+0x344>)
 8008570:	48c7      	ldr	r0, [pc, #796]	@ (8008890 <_dtoa_r+0x348>)
 8008572:	f001 ff91 	bl	800a498 <__assert_func>
 8008576:	6046      	str	r6, [r0, #4]
 8008578:	6086      	str	r6, [r0, #8]
 800857a:	6006      	str	r6, [r0, #0]
 800857c:	60c6      	str	r6, [r0, #12]
 800857e:	9b03      	ldr	r3, [sp, #12]
 8008580:	69db      	ldr	r3, [r3, #28]
 8008582:	6819      	ldr	r1, [r3, #0]
 8008584:	2900      	cmp	r1, #0
 8008586:	d00b      	beq.n	80085a0 <_dtoa_r+0x58>
 8008588:	685a      	ldr	r2, [r3, #4]
 800858a:	2301      	movs	r3, #1
 800858c:	4093      	lsls	r3, r2
 800858e:	604a      	str	r2, [r1, #4]
 8008590:	608b      	str	r3, [r1, #8]
 8008592:	9803      	ldr	r0, [sp, #12]
 8008594:	f001 fa1c 	bl	80099d0 <_Bfree>
 8008598:	2200      	movs	r2, #0
 800859a:	9b03      	ldr	r3, [sp, #12]
 800859c:	69db      	ldr	r3, [r3, #28]
 800859e:	601a      	str	r2, [r3, #0]
 80085a0:	2d00      	cmp	r5, #0
 80085a2:	da1e      	bge.n	80085e2 <_dtoa_r+0x9a>
 80085a4:	2301      	movs	r3, #1
 80085a6:	603b      	str	r3, [r7, #0]
 80085a8:	006b      	lsls	r3, r5, #1
 80085aa:	085b      	lsrs	r3, r3, #1
 80085ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085ae:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80085b0:	4bb8      	ldr	r3, [pc, #736]	@ (8008894 <_dtoa_r+0x34c>)
 80085b2:	4ab8      	ldr	r2, [pc, #736]	@ (8008894 <_dtoa_r+0x34c>)
 80085b4:	403b      	ands	r3, r7
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d116      	bne.n	80085e8 <_dtoa_r+0xa0>
 80085ba:	4bb7      	ldr	r3, [pc, #732]	@ (8008898 <_dtoa_r+0x350>)
 80085bc:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80085be:	6013      	str	r3, [r2, #0]
 80085c0:	033b      	lsls	r3, r7, #12
 80085c2:	0b1b      	lsrs	r3, r3, #12
 80085c4:	4323      	orrs	r3, r4
 80085c6:	d101      	bne.n	80085cc <_dtoa_r+0x84>
 80085c8:	f000 fd80 	bl	80090cc <_dtoa_r+0xb84>
 80085cc:	4bb3      	ldr	r3, [pc, #716]	@ (800889c <_dtoa_r+0x354>)
 80085ce:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80085d0:	9308      	str	r3, [sp, #32]
 80085d2:	2a00      	cmp	r2, #0
 80085d4:	d002      	beq.n	80085dc <_dtoa_r+0x94>
 80085d6:	4bb2      	ldr	r3, [pc, #712]	@ (80088a0 <_dtoa_r+0x358>)
 80085d8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80085da:	6013      	str	r3, [r2, #0]
 80085dc:	9808      	ldr	r0, [sp, #32]
 80085de:	b01d      	add	sp, #116	@ 0x74
 80085e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085e2:	2300      	movs	r3, #0
 80085e4:	603b      	str	r3, [r7, #0]
 80085e6:	e7e2      	b.n	80085ae <_dtoa_r+0x66>
 80085e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80085ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085ec:	9212      	str	r2, [sp, #72]	@ 0x48
 80085ee:	9313      	str	r3, [sp, #76]	@ 0x4c
 80085f0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80085f2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80085f4:	2200      	movs	r2, #0
 80085f6:	2300      	movs	r3, #0
 80085f8:	f7f7 ff28 	bl	800044c <__aeabi_dcmpeq>
 80085fc:	1e06      	subs	r6, r0, #0
 80085fe:	d00b      	beq.n	8008618 <_dtoa_r+0xd0>
 8008600:	2301      	movs	r3, #1
 8008602:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008604:	6013      	str	r3, [r2, #0]
 8008606:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008608:	2b00      	cmp	r3, #0
 800860a:	d002      	beq.n	8008612 <_dtoa_r+0xca>
 800860c:	4ba5      	ldr	r3, [pc, #660]	@ (80088a4 <_dtoa_r+0x35c>)
 800860e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008610:	6013      	str	r3, [r2, #0]
 8008612:	4ba5      	ldr	r3, [pc, #660]	@ (80088a8 <_dtoa_r+0x360>)
 8008614:	9308      	str	r3, [sp, #32]
 8008616:	e7e1      	b.n	80085dc <_dtoa_r+0x94>
 8008618:	ab1a      	add	r3, sp, #104	@ 0x68
 800861a:	9301      	str	r3, [sp, #4]
 800861c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	9803      	ldr	r0, [sp, #12]
 8008622:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008624:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008626:	f001 fccb 	bl	8009fc0 <__d2b>
 800862a:	007a      	lsls	r2, r7, #1
 800862c:	9005      	str	r0, [sp, #20]
 800862e:	0d52      	lsrs	r2, r2, #21
 8008630:	d100      	bne.n	8008634 <_dtoa_r+0xec>
 8008632:	e07b      	b.n	800872c <_dtoa_r+0x1e4>
 8008634:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008636:	9618      	str	r6, [sp, #96]	@ 0x60
 8008638:	0319      	lsls	r1, r3, #12
 800863a:	4b9c      	ldr	r3, [pc, #624]	@ (80088ac <_dtoa_r+0x364>)
 800863c:	0b09      	lsrs	r1, r1, #12
 800863e:	430b      	orrs	r3, r1
 8008640:	499b      	ldr	r1, [pc, #620]	@ (80088b0 <_dtoa_r+0x368>)
 8008642:	1857      	adds	r7, r2, r1
 8008644:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008646:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008648:	0019      	movs	r1, r3
 800864a:	2200      	movs	r2, #0
 800864c:	4b99      	ldr	r3, [pc, #612]	@ (80088b4 <_dtoa_r+0x36c>)
 800864e:	f7f9 ff0b 	bl	8002468 <__aeabi_dsub>
 8008652:	4a99      	ldr	r2, [pc, #612]	@ (80088b8 <_dtoa_r+0x370>)
 8008654:	4b99      	ldr	r3, [pc, #612]	@ (80088bc <_dtoa_r+0x374>)
 8008656:	f7f9 fc21 	bl	8001e9c <__aeabi_dmul>
 800865a:	4a99      	ldr	r2, [pc, #612]	@ (80088c0 <_dtoa_r+0x378>)
 800865c:	4b99      	ldr	r3, [pc, #612]	@ (80088c4 <_dtoa_r+0x37c>)
 800865e:	f7f8 fc1d 	bl	8000e9c <__aeabi_dadd>
 8008662:	0004      	movs	r4, r0
 8008664:	0038      	movs	r0, r7
 8008666:	000d      	movs	r5, r1
 8008668:	f7fa fb66 	bl	8002d38 <__aeabi_i2d>
 800866c:	4a96      	ldr	r2, [pc, #600]	@ (80088c8 <_dtoa_r+0x380>)
 800866e:	4b97      	ldr	r3, [pc, #604]	@ (80088cc <_dtoa_r+0x384>)
 8008670:	f7f9 fc14 	bl	8001e9c <__aeabi_dmul>
 8008674:	0002      	movs	r2, r0
 8008676:	000b      	movs	r3, r1
 8008678:	0020      	movs	r0, r4
 800867a:	0029      	movs	r1, r5
 800867c:	f7f8 fc0e 	bl	8000e9c <__aeabi_dadd>
 8008680:	0004      	movs	r4, r0
 8008682:	000d      	movs	r5, r1
 8008684:	f7fa fb1c 	bl	8002cc0 <__aeabi_d2iz>
 8008688:	2200      	movs	r2, #0
 800868a:	9004      	str	r0, [sp, #16]
 800868c:	2300      	movs	r3, #0
 800868e:	0020      	movs	r0, r4
 8008690:	0029      	movs	r1, r5
 8008692:	f7f7 fee1 	bl	8000458 <__aeabi_dcmplt>
 8008696:	2800      	cmp	r0, #0
 8008698:	d00b      	beq.n	80086b2 <_dtoa_r+0x16a>
 800869a:	9804      	ldr	r0, [sp, #16]
 800869c:	f7fa fb4c 	bl	8002d38 <__aeabi_i2d>
 80086a0:	002b      	movs	r3, r5
 80086a2:	0022      	movs	r2, r4
 80086a4:	f7f7 fed2 	bl	800044c <__aeabi_dcmpeq>
 80086a8:	4243      	negs	r3, r0
 80086aa:	4158      	adcs	r0, r3
 80086ac:	9b04      	ldr	r3, [sp, #16]
 80086ae:	1a1b      	subs	r3, r3, r0
 80086b0:	9304      	str	r3, [sp, #16]
 80086b2:	2301      	movs	r3, #1
 80086b4:	9315      	str	r3, [sp, #84]	@ 0x54
 80086b6:	9b04      	ldr	r3, [sp, #16]
 80086b8:	2b16      	cmp	r3, #22
 80086ba:	d810      	bhi.n	80086de <_dtoa_r+0x196>
 80086bc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80086be:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80086c0:	9a04      	ldr	r2, [sp, #16]
 80086c2:	4b83      	ldr	r3, [pc, #524]	@ (80088d0 <_dtoa_r+0x388>)
 80086c4:	00d2      	lsls	r2, r2, #3
 80086c6:	189b      	adds	r3, r3, r2
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	f7f7 fec4 	bl	8000458 <__aeabi_dcmplt>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	d047      	beq.n	8008764 <_dtoa_r+0x21c>
 80086d4:	9b04      	ldr	r3, [sp, #16]
 80086d6:	3b01      	subs	r3, #1
 80086d8:	9304      	str	r3, [sp, #16]
 80086da:	2300      	movs	r3, #0
 80086dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80086de:	2200      	movs	r2, #0
 80086e0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80086e2:	9206      	str	r2, [sp, #24]
 80086e4:	1bdb      	subs	r3, r3, r7
 80086e6:	1e5a      	subs	r2, r3, #1
 80086e8:	d53e      	bpl.n	8008768 <_dtoa_r+0x220>
 80086ea:	2201      	movs	r2, #1
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	9306      	str	r3, [sp, #24]
 80086f0:	2300      	movs	r3, #0
 80086f2:	930d      	str	r3, [sp, #52]	@ 0x34
 80086f4:	9b04      	ldr	r3, [sp, #16]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	db38      	blt.n	800876c <_dtoa_r+0x224>
 80086fa:	9a04      	ldr	r2, [sp, #16]
 80086fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086fe:	4694      	mov	ip, r2
 8008700:	4463      	add	r3, ip
 8008702:	930d      	str	r3, [sp, #52]	@ 0x34
 8008704:	2300      	movs	r3, #0
 8008706:	9214      	str	r2, [sp, #80]	@ 0x50
 8008708:	930f      	str	r3, [sp, #60]	@ 0x3c
 800870a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800870c:	2401      	movs	r4, #1
 800870e:	2b09      	cmp	r3, #9
 8008710:	d862      	bhi.n	80087d8 <_dtoa_r+0x290>
 8008712:	2b05      	cmp	r3, #5
 8008714:	dd02      	ble.n	800871c <_dtoa_r+0x1d4>
 8008716:	2400      	movs	r4, #0
 8008718:	3b04      	subs	r3, #4
 800871a:	9322      	str	r3, [sp, #136]	@ 0x88
 800871c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800871e:	1e98      	subs	r0, r3, #2
 8008720:	2803      	cmp	r0, #3
 8008722:	d863      	bhi.n	80087ec <_dtoa_r+0x2a4>
 8008724:	f7f7 fcf8 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008728:	2b385654 	.word	0x2b385654
 800872c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800872e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8008730:	18f6      	adds	r6, r6, r3
 8008732:	4b68      	ldr	r3, [pc, #416]	@ (80088d4 <_dtoa_r+0x38c>)
 8008734:	18f2      	adds	r2, r6, r3
 8008736:	2a20      	cmp	r2, #32
 8008738:	dd0f      	ble.n	800875a <_dtoa_r+0x212>
 800873a:	2340      	movs	r3, #64	@ 0x40
 800873c:	1a9b      	subs	r3, r3, r2
 800873e:	409f      	lsls	r7, r3
 8008740:	4b65      	ldr	r3, [pc, #404]	@ (80088d8 <_dtoa_r+0x390>)
 8008742:	0038      	movs	r0, r7
 8008744:	18f3      	adds	r3, r6, r3
 8008746:	40dc      	lsrs	r4, r3
 8008748:	4320      	orrs	r0, r4
 800874a:	f7fa fb23 	bl	8002d94 <__aeabi_ui2d>
 800874e:	2201      	movs	r2, #1
 8008750:	4b62      	ldr	r3, [pc, #392]	@ (80088dc <_dtoa_r+0x394>)
 8008752:	1e77      	subs	r7, r6, #1
 8008754:	18cb      	adds	r3, r1, r3
 8008756:	9218      	str	r2, [sp, #96]	@ 0x60
 8008758:	e776      	b.n	8008648 <_dtoa_r+0x100>
 800875a:	2320      	movs	r3, #32
 800875c:	0020      	movs	r0, r4
 800875e:	1a9b      	subs	r3, r3, r2
 8008760:	4098      	lsls	r0, r3
 8008762:	e7f2      	b.n	800874a <_dtoa_r+0x202>
 8008764:	9015      	str	r0, [sp, #84]	@ 0x54
 8008766:	e7ba      	b.n	80086de <_dtoa_r+0x196>
 8008768:	920d      	str	r2, [sp, #52]	@ 0x34
 800876a:	e7c3      	b.n	80086f4 <_dtoa_r+0x1ac>
 800876c:	9b06      	ldr	r3, [sp, #24]
 800876e:	9a04      	ldr	r2, [sp, #16]
 8008770:	1a9b      	subs	r3, r3, r2
 8008772:	9306      	str	r3, [sp, #24]
 8008774:	4253      	negs	r3, r2
 8008776:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008778:	2300      	movs	r3, #0
 800877a:	9314      	str	r3, [sp, #80]	@ 0x50
 800877c:	e7c5      	b.n	800870a <_dtoa_r+0x1c2>
 800877e:	2301      	movs	r3, #1
 8008780:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008782:	9310      	str	r3, [sp, #64]	@ 0x40
 8008784:	4694      	mov	ip, r2
 8008786:	9b04      	ldr	r3, [sp, #16]
 8008788:	4463      	add	r3, ip
 800878a:	930e      	str	r3, [sp, #56]	@ 0x38
 800878c:	3301      	adds	r3, #1
 800878e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008790:	2b00      	cmp	r3, #0
 8008792:	dc08      	bgt.n	80087a6 <_dtoa_r+0x25e>
 8008794:	2301      	movs	r3, #1
 8008796:	e006      	b.n	80087a6 <_dtoa_r+0x25e>
 8008798:	2301      	movs	r3, #1
 800879a:	9310      	str	r3, [sp, #64]	@ 0x40
 800879c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800879e:	2b00      	cmp	r3, #0
 80087a0:	dd28      	ble.n	80087f4 <_dtoa_r+0x2ac>
 80087a2:	930e      	str	r3, [sp, #56]	@ 0x38
 80087a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80087a6:	9a03      	ldr	r2, [sp, #12]
 80087a8:	2100      	movs	r1, #0
 80087aa:	69d0      	ldr	r0, [r2, #28]
 80087ac:	2204      	movs	r2, #4
 80087ae:	0015      	movs	r5, r2
 80087b0:	3514      	adds	r5, #20
 80087b2:	429d      	cmp	r5, r3
 80087b4:	d923      	bls.n	80087fe <_dtoa_r+0x2b6>
 80087b6:	6041      	str	r1, [r0, #4]
 80087b8:	9803      	ldr	r0, [sp, #12]
 80087ba:	f001 f8c5 	bl	8009948 <_Balloc>
 80087be:	9008      	str	r0, [sp, #32]
 80087c0:	2800      	cmp	r0, #0
 80087c2:	d11f      	bne.n	8008804 <_dtoa_r+0x2bc>
 80087c4:	21b0      	movs	r1, #176	@ 0xb0
 80087c6:	4b46      	ldr	r3, [pc, #280]	@ (80088e0 <_dtoa_r+0x398>)
 80087c8:	4831      	ldr	r0, [pc, #196]	@ (8008890 <_dtoa_r+0x348>)
 80087ca:	9a08      	ldr	r2, [sp, #32]
 80087cc:	31ff      	adds	r1, #255	@ 0xff
 80087ce:	e6d0      	b.n	8008572 <_dtoa_r+0x2a>
 80087d0:	2300      	movs	r3, #0
 80087d2:	e7e2      	b.n	800879a <_dtoa_r+0x252>
 80087d4:	2300      	movs	r3, #0
 80087d6:	e7d3      	b.n	8008780 <_dtoa_r+0x238>
 80087d8:	2300      	movs	r3, #0
 80087da:	9410      	str	r4, [sp, #64]	@ 0x40
 80087dc:	9322      	str	r3, [sp, #136]	@ 0x88
 80087de:	3b01      	subs	r3, #1
 80087e0:	2200      	movs	r2, #0
 80087e2:	930e      	str	r3, [sp, #56]	@ 0x38
 80087e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80087e6:	3313      	adds	r3, #19
 80087e8:	9223      	str	r2, [sp, #140]	@ 0x8c
 80087ea:	e7dc      	b.n	80087a6 <_dtoa_r+0x25e>
 80087ec:	2301      	movs	r3, #1
 80087ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80087f0:	3b02      	subs	r3, #2
 80087f2:	e7f5      	b.n	80087e0 <_dtoa_r+0x298>
 80087f4:	2301      	movs	r3, #1
 80087f6:	001a      	movs	r2, r3
 80087f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80087fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80087fc:	e7f4      	b.n	80087e8 <_dtoa_r+0x2a0>
 80087fe:	3101      	adds	r1, #1
 8008800:	0052      	lsls	r2, r2, #1
 8008802:	e7d4      	b.n	80087ae <_dtoa_r+0x266>
 8008804:	9b03      	ldr	r3, [sp, #12]
 8008806:	9a08      	ldr	r2, [sp, #32]
 8008808:	69db      	ldr	r3, [r3, #28]
 800880a:	601a      	str	r2, [r3, #0]
 800880c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800880e:	2b0e      	cmp	r3, #14
 8008810:	d900      	bls.n	8008814 <_dtoa_r+0x2cc>
 8008812:	e0d6      	b.n	80089c2 <_dtoa_r+0x47a>
 8008814:	2c00      	cmp	r4, #0
 8008816:	d100      	bne.n	800881a <_dtoa_r+0x2d2>
 8008818:	e0d3      	b.n	80089c2 <_dtoa_r+0x47a>
 800881a:	9b04      	ldr	r3, [sp, #16]
 800881c:	2b00      	cmp	r3, #0
 800881e:	dd63      	ble.n	80088e8 <_dtoa_r+0x3a0>
 8008820:	210f      	movs	r1, #15
 8008822:	9a04      	ldr	r2, [sp, #16]
 8008824:	4b2a      	ldr	r3, [pc, #168]	@ (80088d0 <_dtoa_r+0x388>)
 8008826:	400a      	ands	r2, r1
 8008828:	00d2      	lsls	r2, r2, #3
 800882a:	189b      	adds	r3, r3, r2
 800882c:	681e      	ldr	r6, [r3, #0]
 800882e:	685f      	ldr	r7, [r3, #4]
 8008830:	9b04      	ldr	r3, [sp, #16]
 8008832:	2402      	movs	r4, #2
 8008834:	111d      	asrs	r5, r3, #4
 8008836:	05db      	lsls	r3, r3, #23
 8008838:	d50a      	bpl.n	8008850 <_dtoa_r+0x308>
 800883a:	4b2a      	ldr	r3, [pc, #168]	@ (80088e4 <_dtoa_r+0x39c>)
 800883c:	400d      	ands	r5, r1
 800883e:	6a1a      	ldr	r2, [r3, #32]
 8008840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008842:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008844:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008846:	f7f8 feef 	bl	8001628 <__aeabi_ddiv>
 800884a:	900a      	str	r0, [sp, #40]	@ 0x28
 800884c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800884e:	3401      	adds	r4, #1
 8008850:	4b24      	ldr	r3, [pc, #144]	@ (80088e4 <_dtoa_r+0x39c>)
 8008852:	930c      	str	r3, [sp, #48]	@ 0x30
 8008854:	2d00      	cmp	r5, #0
 8008856:	d108      	bne.n	800886a <_dtoa_r+0x322>
 8008858:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800885a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800885c:	0032      	movs	r2, r6
 800885e:	003b      	movs	r3, r7
 8008860:	f7f8 fee2 	bl	8001628 <__aeabi_ddiv>
 8008864:	900a      	str	r0, [sp, #40]	@ 0x28
 8008866:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008868:	e059      	b.n	800891e <_dtoa_r+0x3d6>
 800886a:	2301      	movs	r3, #1
 800886c:	421d      	tst	r5, r3
 800886e:	d009      	beq.n	8008884 <_dtoa_r+0x33c>
 8008870:	18e4      	adds	r4, r4, r3
 8008872:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008874:	0030      	movs	r0, r6
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	0039      	movs	r1, r7
 800887c:	f7f9 fb0e 	bl	8001e9c <__aeabi_dmul>
 8008880:	0006      	movs	r6, r0
 8008882:	000f      	movs	r7, r1
 8008884:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008886:	106d      	asrs	r5, r5, #1
 8008888:	3308      	adds	r3, #8
 800888a:	e7e2      	b.n	8008852 <_dtoa_r+0x30a>
 800888c:	0800b149 	.word	0x0800b149
 8008890:	0800b160 	.word	0x0800b160
 8008894:	7ff00000 	.word	0x7ff00000
 8008898:	0000270f 	.word	0x0000270f
 800889c:	0800b145 	.word	0x0800b145
 80088a0:	0800b148 	.word	0x0800b148
 80088a4:	0800b119 	.word	0x0800b119
 80088a8:	0800b118 	.word	0x0800b118
 80088ac:	3ff00000 	.word	0x3ff00000
 80088b0:	fffffc01 	.word	0xfffffc01
 80088b4:	3ff80000 	.word	0x3ff80000
 80088b8:	636f4361 	.word	0x636f4361
 80088bc:	3fd287a7 	.word	0x3fd287a7
 80088c0:	8b60c8b3 	.word	0x8b60c8b3
 80088c4:	3fc68a28 	.word	0x3fc68a28
 80088c8:	509f79fb 	.word	0x509f79fb
 80088cc:	3fd34413 	.word	0x3fd34413
 80088d0:	0800b2b0 	.word	0x0800b2b0
 80088d4:	00000432 	.word	0x00000432
 80088d8:	00000412 	.word	0x00000412
 80088dc:	fe100000 	.word	0xfe100000
 80088e0:	0800b1b8 	.word	0x0800b1b8
 80088e4:	0800b288 	.word	0x0800b288
 80088e8:	9b04      	ldr	r3, [sp, #16]
 80088ea:	2402      	movs	r4, #2
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d016      	beq.n	800891e <_dtoa_r+0x3d6>
 80088f0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80088f2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80088f4:	220f      	movs	r2, #15
 80088f6:	425d      	negs	r5, r3
 80088f8:	402a      	ands	r2, r5
 80088fa:	4bd5      	ldr	r3, [pc, #852]	@ (8008c50 <_dtoa_r+0x708>)
 80088fc:	00d2      	lsls	r2, r2, #3
 80088fe:	189b      	adds	r3, r3, r2
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	f7f9 faca 	bl	8001e9c <__aeabi_dmul>
 8008908:	2701      	movs	r7, #1
 800890a:	2300      	movs	r3, #0
 800890c:	900a      	str	r0, [sp, #40]	@ 0x28
 800890e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008910:	4ed0      	ldr	r6, [pc, #832]	@ (8008c54 <_dtoa_r+0x70c>)
 8008912:	112d      	asrs	r5, r5, #4
 8008914:	2d00      	cmp	r5, #0
 8008916:	d000      	beq.n	800891a <_dtoa_r+0x3d2>
 8008918:	e095      	b.n	8008a46 <_dtoa_r+0x4fe>
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1a2      	bne.n	8008864 <_dtoa_r+0x31c>
 800891e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008920:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008922:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008924:	2b00      	cmp	r3, #0
 8008926:	d100      	bne.n	800892a <_dtoa_r+0x3e2>
 8008928:	e098      	b.n	8008a5c <_dtoa_r+0x514>
 800892a:	2200      	movs	r2, #0
 800892c:	0030      	movs	r0, r6
 800892e:	0039      	movs	r1, r7
 8008930:	4bc9      	ldr	r3, [pc, #804]	@ (8008c58 <_dtoa_r+0x710>)
 8008932:	f7f7 fd91 	bl	8000458 <__aeabi_dcmplt>
 8008936:	2800      	cmp	r0, #0
 8008938:	d100      	bne.n	800893c <_dtoa_r+0x3f4>
 800893a:	e08f      	b.n	8008a5c <_dtoa_r+0x514>
 800893c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800893e:	2b00      	cmp	r3, #0
 8008940:	d100      	bne.n	8008944 <_dtoa_r+0x3fc>
 8008942:	e08b      	b.n	8008a5c <_dtoa_r+0x514>
 8008944:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008946:	2b00      	cmp	r3, #0
 8008948:	dd37      	ble.n	80089ba <_dtoa_r+0x472>
 800894a:	9b04      	ldr	r3, [sp, #16]
 800894c:	2200      	movs	r2, #0
 800894e:	3b01      	subs	r3, #1
 8008950:	930c      	str	r3, [sp, #48]	@ 0x30
 8008952:	0030      	movs	r0, r6
 8008954:	4bc1      	ldr	r3, [pc, #772]	@ (8008c5c <_dtoa_r+0x714>)
 8008956:	0039      	movs	r1, r7
 8008958:	f7f9 faa0 	bl	8001e9c <__aeabi_dmul>
 800895c:	900a      	str	r0, [sp, #40]	@ 0x28
 800895e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008960:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008962:	3401      	adds	r4, #1
 8008964:	0020      	movs	r0, r4
 8008966:	9311      	str	r3, [sp, #68]	@ 0x44
 8008968:	f7fa f9e6 	bl	8002d38 <__aeabi_i2d>
 800896c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800896e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008970:	f7f9 fa94 	bl	8001e9c <__aeabi_dmul>
 8008974:	4bba      	ldr	r3, [pc, #744]	@ (8008c60 <_dtoa_r+0x718>)
 8008976:	2200      	movs	r2, #0
 8008978:	f7f8 fa90 	bl	8000e9c <__aeabi_dadd>
 800897c:	4bb9      	ldr	r3, [pc, #740]	@ (8008c64 <_dtoa_r+0x71c>)
 800897e:	0006      	movs	r6, r0
 8008980:	18cf      	adds	r7, r1, r3
 8008982:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008984:	2b00      	cmp	r3, #0
 8008986:	d16d      	bne.n	8008a64 <_dtoa_r+0x51c>
 8008988:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800898a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800898c:	2200      	movs	r2, #0
 800898e:	4bb6      	ldr	r3, [pc, #728]	@ (8008c68 <_dtoa_r+0x720>)
 8008990:	f7f9 fd6a 	bl	8002468 <__aeabi_dsub>
 8008994:	0032      	movs	r2, r6
 8008996:	003b      	movs	r3, r7
 8008998:	0004      	movs	r4, r0
 800899a:	000d      	movs	r5, r1
 800899c:	f7f7 fd70 	bl	8000480 <__aeabi_dcmpgt>
 80089a0:	2800      	cmp	r0, #0
 80089a2:	d000      	beq.n	80089a6 <_dtoa_r+0x45e>
 80089a4:	e2b6      	b.n	8008f14 <_dtoa_r+0x9cc>
 80089a6:	2180      	movs	r1, #128	@ 0x80
 80089a8:	0609      	lsls	r1, r1, #24
 80089aa:	187b      	adds	r3, r7, r1
 80089ac:	0032      	movs	r2, r6
 80089ae:	0020      	movs	r0, r4
 80089b0:	0029      	movs	r1, r5
 80089b2:	f7f7 fd51 	bl	8000458 <__aeabi_dcmplt>
 80089b6:	2800      	cmp	r0, #0
 80089b8:	d128      	bne.n	8008a0c <_dtoa_r+0x4c4>
 80089ba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80089bc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80089be:	930a      	str	r3, [sp, #40]	@ 0x28
 80089c0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80089c2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	da00      	bge.n	80089ca <_dtoa_r+0x482>
 80089c8:	e174      	b.n	8008cb4 <_dtoa_r+0x76c>
 80089ca:	9a04      	ldr	r2, [sp, #16]
 80089cc:	2a0e      	cmp	r2, #14
 80089ce:	dd00      	ble.n	80089d2 <_dtoa_r+0x48a>
 80089d0:	e170      	b.n	8008cb4 <_dtoa_r+0x76c>
 80089d2:	4b9f      	ldr	r3, [pc, #636]	@ (8008c50 <_dtoa_r+0x708>)
 80089d4:	00d2      	lsls	r2, r2, #3
 80089d6:	189b      	adds	r3, r3, r2
 80089d8:	685c      	ldr	r4, [r3, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	9306      	str	r3, [sp, #24]
 80089de:	9407      	str	r4, [sp, #28]
 80089e0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	db00      	blt.n	80089e8 <_dtoa_r+0x4a0>
 80089e6:	e0e7      	b.n	8008bb8 <_dtoa_r+0x670>
 80089e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	dd00      	ble.n	80089f0 <_dtoa_r+0x4a8>
 80089ee:	e0e3      	b.n	8008bb8 <_dtoa_r+0x670>
 80089f0:	d10c      	bne.n	8008a0c <_dtoa_r+0x4c4>
 80089f2:	9806      	ldr	r0, [sp, #24]
 80089f4:	9907      	ldr	r1, [sp, #28]
 80089f6:	2200      	movs	r2, #0
 80089f8:	4b9b      	ldr	r3, [pc, #620]	@ (8008c68 <_dtoa_r+0x720>)
 80089fa:	f7f9 fa4f 	bl	8001e9c <__aeabi_dmul>
 80089fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a02:	f7f7 fd47 	bl	8000494 <__aeabi_dcmpge>
 8008a06:	2800      	cmp	r0, #0
 8008a08:	d100      	bne.n	8008a0c <_dtoa_r+0x4c4>
 8008a0a:	e286      	b.n	8008f1a <_dtoa_r+0x9d2>
 8008a0c:	2600      	movs	r6, #0
 8008a0e:	0037      	movs	r7, r6
 8008a10:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008a12:	9c08      	ldr	r4, [sp, #32]
 8008a14:	43db      	mvns	r3, r3
 8008a16:	930c      	str	r3, [sp, #48]	@ 0x30
 8008a18:	9704      	str	r7, [sp, #16]
 8008a1a:	2700      	movs	r7, #0
 8008a1c:	0031      	movs	r1, r6
 8008a1e:	9803      	ldr	r0, [sp, #12]
 8008a20:	f000 ffd6 	bl	80099d0 <_Bfree>
 8008a24:	9b04      	ldr	r3, [sp, #16]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d100      	bne.n	8008a2c <_dtoa_r+0x4e4>
 8008a2a:	e0bb      	b.n	8008ba4 <_dtoa_r+0x65c>
 8008a2c:	2f00      	cmp	r7, #0
 8008a2e:	d005      	beq.n	8008a3c <_dtoa_r+0x4f4>
 8008a30:	429f      	cmp	r7, r3
 8008a32:	d003      	beq.n	8008a3c <_dtoa_r+0x4f4>
 8008a34:	0039      	movs	r1, r7
 8008a36:	9803      	ldr	r0, [sp, #12]
 8008a38:	f000 ffca 	bl	80099d0 <_Bfree>
 8008a3c:	9904      	ldr	r1, [sp, #16]
 8008a3e:	9803      	ldr	r0, [sp, #12]
 8008a40:	f000 ffc6 	bl	80099d0 <_Bfree>
 8008a44:	e0ae      	b.n	8008ba4 <_dtoa_r+0x65c>
 8008a46:	423d      	tst	r5, r7
 8008a48:	d005      	beq.n	8008a56 <_dtoa_r+0x50e>
 8008a4a:	6832      	ldr	r2, [r6, #0]
 8008a4c:	6873      	ldr	r3, [r6, #4]
 8008a4e:	f7f9 fa25 	bl	8001e9c <__aeabi_dmul>
 8008a52:	003b      	movs	r3, r7
 8008a54:	3401      	adds	r4, #1
 8008a56:	106d      	asrs	r5, r5, #1
 8008a58:	3608      	adds	r6, #8
 8008a5a:	e75b      	b.n	8008914 <_dtoa_r+0x3cc>
 8008a5c:	9b04      	ldr	r3, [sp, #16]
 8008a5e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008a60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a62:	e77f      	b.n	8008964 <_dtoa_r+0x41c>
 8008a64:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008a66:	4b7a      	ldr	r3, [pc, #488]	@ (8008c50 <_dtoa_r+0x708>)
 8008a68:	3a01      	subs	r2, #1
 8008a6a:	00d2      	lsls	r2, r2, #3
 8008a6c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8008a6e:	189b      	adds	r3, r3, r2
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	2900      	cmp	r1, #0
 8008a76:	d04c      	beq.n	8008b12 <_dtoa_r+0x5ca>
 8008a78:	2000      	movs	r0, #0
 8008a7a:	497c      	ldr	r1, [pc, #496]	@ (8008c6c <_dtoa_r+0x724>)
 8008a7c:	f7f8 fdd4 	bl	8001628 <__aeabi_ddiv>
 8008a80:	0032      	movs	r2, r6
 8008a82:	003b      	movs	r3, r7
 8008a84:	f7f9 fcf0 	bl	8002468 <__aeabi_dsub>
 8008a88:	9a08      	ldr	r2, [sp, #32]
 8008a8a:	0006      	movs	r6, r0
 8008a8c:	4694      	mov	ip, r2
 8008a8e:	000f      	movs	r7, r1
 8008a90:	9b08      	ldr	r3, [sp, #32]
 8008a92:	9316      	str	r3, [sp, #88]	@ 0x58
 8008a94:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008a96:	4463      	add	r3, ip
 8008a98:	9311      	str	r3, [sp, #68]	@ 0x44
 8008a9a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008a9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008a9e:	f7fa f90f 	bl	8002cc0 <__aeabi_d2iz>
 8008aa2:	0005      	movs	r5, r0
 8008aa4:	f7fa f948 	bl	8002d38 <__aeabi_i2d>
 8008aa8:	0002      	movs	r2, r0
 8008aaa:	000b      	movs	r3, r1
 8008aac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008aae:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008ab0:	f7f9 fcda 	bl	8002468 <__aeabi_dsub>
 8008ab4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008ab6:	3530      	adds	r5, #48	@ 0x30
 8008ab8:	1c5c      	adds	r4, r3, #1
 8008aba:	701d      	strb	r5, [r3, #0]
 8008abc:	0032      	movs	r2, r6
 8008abe:	003b      	movs	r3, r7
 8008ac0:	900a      	str	r0, [sp, #40]	@ 0x28
 8008ac2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008ac4:	f7f7 fcc8 	bl	8000458 <__aeabi_dcmplt>
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	d16b      	bne.n	8008ba4 <_dtoa_r+0x65c>
 8008acc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ace:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	4961      	ldr	r1, [pc, #388]	@ (8008c58 <_dtoa_r+0x710>)
 8008ad4:	f7f9 fcc8 	bl	8002468 <__aeabi_dsub>
 8008ad8:	0032      	movs	r2, r6
 8008ada:	003b      	movs	r3, r7
 8008adc:	f7f7 fcbc 	bl	8000458 <__aeabi_dcmplt>
 8008ae0:	2800      	cmp	r0, #0
 8008ae2:	d000      	beq.n	8008ae6 <_dtoa_r+0x59e>
 8008ae4:	e0c6      	b.n	8008c74 <_dtoa_r+0x72c>
 8008ae6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008ae8:	42a3      	cmp	r3, r4
 8008aea:	d100      	bne.n	8008aee <_dtoa_r+0x5a6>
 8008aec:	e765      	b.n	80089ba <_dtoa_r+0x472>
 8008aee:	2200      	movs	r2, #0
 8008af0:	0030      	movs	r0, r6
 8008af2:	0039      	movs	r1, r7
 8008af4:	4b59      	ldr	r3, [pc, #356]	@ (8008c5c <_dtoa_r+0x714>)
 8008af6:	f7f9 f9d1 	bl	8001e9c <__aeabi_dmul>
 8008afa:	2200      	movs	r2, #0
 8008afc:	0006      	movs	r6, r0
 8008afe:	000f      	movs	r7, r1
 8008b00:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008b02:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008b04:	4b55      	ldr	r3, [pc, #340]	@ (8008c5c <_dtoa_r+0x714>)
 8008b06:	f7f9 f9c9 	bl	8001e9c <__aeabi_dmul>
 8008b0a:	9416      	str	r4, [sp, #88]	@ 0x58
 8008b0c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008b0e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008b10:	e7c3      	b.n	8008a9a <_dtoa_r+0x552>
 8008b12:	0030      	movs	r0, r6
 8008b14:	0039      	movs	r1, r7
 8008b16:	f7f9 f9c1 	bl	8001e9c <__aeabi_dmul>
 8008b1a:	9d08      	ldr	r5, [sp, #32]
 8008b1c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008b1e:	002b      	movs	r3, r5
 8008b20:	4694      	mov	ip, r2
 8008b22:	9016      	str	r0, [sp, #88]	@ 0x58
 8008b24:	9117      	str	r1, [sp, #92]	@ 0x5c
 8008b26:	4463      	add	r3, ip
 8008b28:	9319      	str	r3, [sp, #100]	@ 0x64
 8008b2a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008b2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008b2e:	f7fa f8c7 	bl	8002cc0 <__aeabi_d2iz>
 8008b32:	0004      	movs	r4, r0
 8008b34:	f7fa f900 	bl	8002d38 <__aeabi_i2d>
 8008b38:	000b      	movs	r3, r1
 8008b3a:	0002      	movs	r2, r0
 8008b3c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008b3e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008b40:	f7f9 fc92 	bl	8002468 <__aeabi_dsub>
 8008b44:	3430      	adds	r4, #48	@ 0x30
 8008b46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b48:	702c      	strb	r4, [r5, #0]
 8008b4a:	3501      	adds	r5, #1
 8008b4c:	0006      	movs	r6, r0
 8008b4e:	000f      	movs	r7, r1
 8008b50:	42ab      	cmp	r3, r5
 8008b52:	d12a      	bne.n	8008baa <_dtoa_r+0x662>
 8008b54:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8008b56:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8008b58:	9b08      	ldr	r3, [sp, #32]
 8008b5a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8008b5c:	469c      	mov	ip, r3
 8008b5e:	2200      	movs	r2, #0
 8008b60:	4b42      	ldr	r3, [pc, #264]	@ (8008c6c <_dtoa_r+0x724>)
 8008b62:	4464      	add	r4, ip
 8008b64:	f7f8 f99a 	bl	8000e9c <__aeabi_dadd>
 8008b68:	0002      	movs	r2, r0
 8008b6a:	000b      	movs	r3, r1
 8008b6c:	0030      	movs	r0, r6
 8008b6e:	0039      	movs	r1, r7
 8008b70:	f7f7 fc86 	bl	8000480 <__aeabi_dcmpgt>
 8008b74:	2800      	cmp	r0, #0
 8008b76:	d000      	beq.n	8008b7a <_dtoa_r+0x632>
 8008b78:	e07c      	b.n	8008c74 <_dtoa_r+0x72c>
 8008b7a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008b7c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008b7e:	2000      	movs	r0, #0
 8008b80:	493a      	ldr	r1, [pc, #232]	@ (8008c6c <_dtoa_r+0x724>)
 8008b82:	f7f9 fc71 	bl	8002468 <__aeabi_dsub>
 8008b86:	0002      	movs	r2, r0
 8008b88:	000b      	movs	r3, r1
 8008b8a:	0030      	movs	r0, r6
 8008b8c:	0039      	movs	r1, r7
 8008b8e:	f7f7 fc63 	bl	8000458 <__aeabi_dcmplt>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d100      	bne.n	8008b98 <_dtoa_r+0x650>
 8008b96:	e710      	b.n	80089ba <_dtoa_r+0x472>
 8008b98:	0023      	movs	r3, r4
 8008b9a:	3c01      	subs	r4, #1
 8008b9c:	7822      	ldrb	r2, [r4, #0]
 8008b9e:	2a30      	cmp	r2, #48	@ 0x30
 8008ba0:	d0fa      	beq.n	8008b98 <_dtoa_r+0x650>
 8008ba2:	001c      	movs	r4, r3
 8008ba4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ba6:	9304      	str	r3, [sp, #16]
 8008ba8:	e042      	b.n	8008c30 <_dtoa_r+0x6e8>
 8008baa:	2200      	movs	r2, #0
 8008bac:	4b2b      	ldr	r3, [pc, #172]	@ (8008c5c <_dtoa_r+0x714>)
 8008bae:	f7f9 f975 	bl	8001e9c <__aeabi_dmul>
 8008bb2:	900a      	str	r0, [sp, #40]	@ 0x28
 8008bb4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008bb6:	e7b8      	b.n	8008b2a <_dtoa_r+0x5e2>
 8008bb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bba:	9d08      	ldr	r5, [sp, #32]
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	195b      	adds	r3, r3, r5
 8008bc0:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008bc2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008bc4:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bc6:	9a06      	ldr	r2, [sp, #24]
 8008bc8:	9b07      	ldr	r3, [sp, #28]
 8008bca:	0030      	movs	r0, r6
 8008bcc:	0039      	movs	r1, r7
 8008bce:	f7f8 fd2b 	bl	8001628 <__aeabi_ddiv>
 8008bd2:	f7fa f875 	bl	8002cc0 <__aeabi_d2iz>
 8008bd6:	9009      	str	r0, [sp, #36]	@ 0x24
 8008bd8:	f7fa f8ae 	bl	8002d38 <__aeabi_i2d>
 8008bdc:	9a06      	ldr	r2, [sp, #24]
 8008bde:	9b07      	ldr	r3, [sp, #28]
 8008be0:	f7f9 f95c 	bl	8001e9c <__aeabi_dmul>
 8008be4:	0002      	movs	r2, r0
 8008be6:	000b      	movs	r3, r1
 8008be8:	0030      	movs	r0, r6
 8008bea:	0039      	movs	r1, r7
 8008bec:	f7f9 fc3c 	bl	8002468 <__aeabi_dsub>
 8008bf0:	002b      	movs	r3, r5
 8008bf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bf4:	3501      	adds	r5, #1
 8008bf6:	3230      	adds	r2, #48	@ 0x30
 8008bf8:	701a      	strb	r2, [r3, #0]
 8008bfa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008bfc:	002c      	movs	r4, r5
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d14b      	bne.n	8008c9a <_dtoa_r+0x752>
 8008c02:	0002      	movs	r2, r0
 8008c04:	000b      	movs	r3, r1
 8008c06:	f7f8 f949 	bl	8000e9c <__aeabi_dadd>
 8008c0a:	9a06      	ldr	r2, [sp, #24]
 8008c0c:	9b07      	ldr	r3, [sp, #28]
 8008c0e:	0006      	movs	r6, r0
 8008c10:	000f      	movs	r7, r1
 8008c12:	f7f7 fc35 	bl	8000480 <__aeabi_dcmpgt>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	d12a      	bne.n	8008c70 <_dtoa_r+0x728>
 8008c1a:	9a06      	ldr	r2, [sp, #24]
 8008c1c:	9b07      	ldr	r3, [sp, #28]
 8008c1e:	0030      	movs	r0, r6
 8008c20:	0039      	movs	r1, r7
 8008c22:	f7f7 fc13 	bl	800044c <__aeabi_dcmpeq>
 8008c26:	2800      	cmp	r0, #0
 8008c28:	d002      	beq.n	8008c30 <_dtoa_r+0x6e8>
 8008c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c2c:	07dd      	lsls	r5, r3, #31
 8008c2e:	d41f      	bmi.n	8008c70 <_dtoa_r+0x728>
 8008c30:	9905      	ldr	r1, [sp, #20]
 8008c32:	9803      	ldr	r0, [sp, #12]
 8008c34:	f000 fecc 	bl	80099d0 <_Bfree>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	7023      	strb	r3, [r4, #0]
 8008c3c:	9b04      	ldr	r3, [sp, #16]
 8008c3e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008c40:	3301      	adds	r3, #1
 8008c42:	6013      	str	r3, [r2, #0]
 8008c44:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d100      	bne.n	8008c4c <_dtoa_r+0x704>
 8008c4a:	e4c7      	b.n	80085dc <_dtoa_r+0x94>
 8008c4c:	601c      	str	r4, [r3, #0]
 8008c4e:	e4c5      	b.n	80085dc <_dtoa_r+0x94>
 8008c50:	0800b2b0 	.word	0x0800b2b0
 8008c54:	0800b288 	.word	0x0800b288
 8008c58:	3ff00000 	.word	0x3ff00000
 8008c5c:	40240000 	.word	0x40240000
 8008c60:	401c0000 	.word	0x401c0000
 8008c64:	fcc00000 	.word	0xfcc00000
 8008c68:	40140000 	.word	0x40140000
 8008c6c:	3fe00000 	.word	0x3fe00000
 8008c70:	9b04      	ldr	r3, [sp, #16]
 8008c72:	930c      	str	r3, [sp, #48]	@ 0x30
 8008c74:	0023      	movs	r3, r4
 8008c76:	001c      	movs	r4, r3
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	781a      	ldrb	r2, [r3, #0]
 8008c7c:	2a39      	cmp	r2, #57	@ 0x39
 8008c7e:	d108      	bne.n	8008c92 <_dtoa_r+0x74a>
 8008c80:	9a08      	ldr	r2, [sp, #32]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d1f7      	bne.n	8008c76 <_dtoa_r+0x72e>
 8008c86:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008c88:	9908      	ldr	r1, [sp, #32]
 8008c8a:	3201      	adds	r2, #1
 8008c8c:	920c      	str	r2, [sp, #48]	@ 0x30
 8008c8e:	2230      	movs	r2, #48	@ 0x30
 8008c90:	700a      	strb	r2, [r1, #0]
 8008c92:	781a      	ldrb	r2, [r3, #0]
 8008c94:	3201      	adds	r2, #1
 8008c96:	701a      	strb	r2, [r3, #0]
 8008c98:	e784      	b.n	8008ba4 <_dtoa_r+0x65c>
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	4bc6      	ldr	r3, [pc, #792]	@ (8008fb8 <_dtoa_r+0xa70>)
 8008c9e:	f7f9 f8fd 	bl	8001e9c <__aeabi_dmul>
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	0006      	movs	r6, r0
 8008ca8:	000f      	movs	r7, r1
 8008caa:	f7f7 fbcf 	bl	800044c <__aeabi_dcmpeq>
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	d089      	beq.n	8008bc6 <_dtoa_r+0x67e>
 8008cb2:	e7bd      	b.n	8008c30 <_dtoa_r+0x6e8>
 8008cb4:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8008cb6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8008cb8:	9c06      	ldr	r4, [sp, #24]
 8008cba:	2f00      	cmp	r7, #0
 8008cbc:	d014      	beq.n	8008ce8 <_dtoa_r+0x7a0>
 8008cbe:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008cc0:	2a01      	cmp	r2, #1
 8008cc2:	dd00      	ble.n	8008cc6 <_dtoa_r+0x77e>
 8008cc4:	e0e4      	b.n	8008e90 <_dtoa_r+0x948>
 8008cc6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8008cc8:	2a00      	cmp	r2, #0
 8008cca:	d100      	bne.n	8008cce <_dtoa_r+0x786>
 8008ccc:	e0da      	b.n	8008e84 <_dtoa_r+0x93c>
 8008cce:	4abb      	ldr	r2, [pc, #748]	@ (8008fbc <_dtoa_r+0xa74>)
 8008cd0:	189b      	adds	r3, r3, r2
 8008cd2:	9a06      	ldr	r2, [sp, #24]
 8008cd4:	2101      	movs	r1, #1
 8008cd6:	18d2      	adds	r2, r2, r3
 8008cd8:	9206      	str	r2, [sp, #24]
 8008cda:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008cdc:	9803      	ldr	r0, [sp, #12]
 8008cde:	18d3      	adds	r3, r2, r3
 8008ce0:	930d      	str	r3, [sp, #52]	@ 0x34
 8008ce2:	f000 ff2d 	bl	8009b40 <__i2b>
 8008ce6:	0007      	movs	r7, r0
 8008ce8:	2c00      	cmp	r4, #0
 8008cea:	d00e      	beq.n	8008d0a <_dtoa_r+0x7c2>
 8008cec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	dd0b      	ble.n	8008d0a <_dtoa_r+0x7c2>
 8008cf2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008cf4:	0023      	movs	r3, r4
 8008cf6:	4294      	cmp	r4, r2
 8008cf8:	dd00      	ble.n	8008cfc <_dtoa_r+0x7b4>
 8008cfa:	0013      	movs	r3, r2
 8008cfc:	9a06      	ldr	r2, [sp, #24]
 8008cfe:	1ae4      	subs	r4, r4, r3
 8008d00:	1ad2      	subs	r2, r2, r3
 8008d02:	9206      	str	r2, [sp, #24]
 8008d04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008d06:	1ad3      	subs	r3, r2, r3
 8008d08:	930d      	str	r3, [sp, #52]	@ 0x34
 8008d0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d021      	beq.n	8008d54 <_dtoa_r+0x80c>
 8008d10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d100      	bne.n	8008d18 <_dtoa_r+0x7d0>
 8008d16:	e0d3      	b.n	8008ec0 <_dtoa_r+0x978>
 8008d18:	9e05      	ldr	r6, [sp, #20]
 8008d1a:	2d00      	cmp	r5, #0
 8008d1c:	d014      	beq.n	8008d48 <_dtoa_r+0x800>
 8008d1e:	0039      	movs	r1, r7
 8008d20:	002a      	movs	r2, r5
 8008d22:	9803      	ldr	r0, [sp, #12]
 8008d24:	f000 ffce 	bl	8009cc4 <__pow5mult>
 8008d28:	9a05      	ldr	r2, [sp, #20]
 8008d2a:	0001      	movs	r1, r0
 8008d2c:	0007      	movs	r7, r0
 8008d2e:	9803      	ldr	r0, [sp, #12]
 8008d30:	f000 ff1e 	bl	8009b70 <__multiply>
 8008d34:	0006      	movs	r6, r0
 8008d36:	9905      	ldr	r1, [sp, #20]
 8008d38:	9803      	ldr	r0, [sp, #12]
 8008d3a:	f000 fe49 	bl	80099d0 <_Bfree>
 8008d3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d40:	9605      	str	r6, [sp, #20]
 8008d42:	1b5b      	subs	r3, r3, r5
 8008d44:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008d46:	d005      	beq.n	8008d54 <_dtoa_r+0x80c>
 8008d48:	0031      	movs	r1, r6
 8008d4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008d4c:	9803      	ldr	r0, [sp, #12]
 8008d4e:	f000 ffb9 	bl	8009cc4 <__pow5mult>
 8008d52:	9005      	str	r0, [sp, #20]
 8008d54:	2101      	movs	r1, #1
 8008d56:	9803      	ldr	r0, [sp, #12]
 8008d58:	f000 fef2 	bl	8009b40 <__i2b>
 8008d5c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008d5e:	0006      	movs	r6, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d100      	bne.n	8008d66 <_dtoa_r+0x81e>
 8008d64:	e1bc      	b.n	80090e0 <_dtoa_r+0xb98>
 8008d66:	001a      	movs	r2, r3
 8008d68:	0001      	movs	r1, r0
 8008d6a:	9803      	ldr	r0, [sp, #12]
 8008d6c:	f000 ffaa 	bl	8009cc4 <__pow5mult>
 8008d70:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008d72:	0006      	movs	r6, r0
 8008d74:	2500      	movs	r5, #0
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	dc16      	bgt.n	8008da8 <_dtoa_r+0x860>
 8008d7a:	2500      	movs	r5, #0
 8008d7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d7e:	42ab      	cmp	r3, r5
 8008d80:	d10e      	bne.n	8008da0 <_dtoa_r+0x858>
 8008d82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d84:	031b      	lsls	r3, r3, #12
 8008d86:	42ab      	cmp	r3, r5
 8008d88:	d10a      	bne.n	8008da0 <_dtoa_r+0x858>
 8008d8a:	4b8d      	ldr	r3, [pc, #564]	@ (8008fc0 <_dtoa_r+0xa78>)
 8008d8c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008d8e:	4213      	tst	r3, r2
 8008d90:	d006      	beq.n	8008da0 <_dtoa_r+0x858>
 8008d92:	9b06      	ldr	r3, [sp, #24]
 8008d94:	3501      	adds	r5, #1
 8008d96:	3301      	adds	r3, #1
 8008d98:	9306      	str	r3, [sp, #24]
 8008d9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008da0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008da2:	2001      	movs	r0, #1
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d008      	beq.n	8008dba <_dtoa_r+0x872>
 8008da8:	6933      	ldr	r3, [r6, #16]
 8008daa:	3303      	adds	r3, #3
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	18f3      	adds	r3, r6, r3
 8008db0:	6858      	ldr	r0, [r3, #4]
 8008db2:	f000 fe75 	bl	8009aa0 <__hi0bits>
 8008db6:	2320      	movs	r3, #32
 8008db8:	1a18      	subs	r0, r3, r0
 8008dba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008dbc:	1818      	adds	r0, r3, r0
 8008dbe:	0002      	movs	r2, r0
 8008dc0:	231f      	movs	r3, #31
 8008dc2:	401a      	ands	r2, r3
 8008dc4:	4218      	tst	r0, r3
 8008dc6:	d100      	bne.n	8008dca <_dtoa_r+0x882>
 8008dc8:	e081      	b.n	8008ece <_dtoa_r+0x986>
 8008dca:	3301      	adds	r3, #1
 8008dcc:	1a9b      	subs	r3, r3, r2
 8008dce:	2b04      	cmp	r3, #4
 8008dd0:	dd79      	ble.n	8008ec6 <_dtoa_r+0x97e>
 8008dd2:	231c      	movs	r3, #28
 8008dd4:	1a9b      	subs	r3, r3, r2
 8008dd6:	9a06      	ldr	r2, [sp, #24]
 8008dd8:	18e4      	adds	r4, r4, r3
 8008dda:	18d2      	adds	r2, r2, r3
 8008ddc:	9206      	str	r2, [sp, #24]
 8008dde:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008de0:	18d3      	adds	r3, r2, r3
 8008de2:	930d      	str	r3, [sp, #52]	@ 0x34
 8008de4:	9b06      	ldr	r3, [sp, #24]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	dd05      	ble.n	8008df6 <_dtoa_r+0x8ae>
 8008dea:	001a      	movs	r2, r3
 8008dec:	9905      	ldr	r1, [sp, #20]
 8008dee:	9803      	ldr	r0, [sp, #12]
 8008df0:	f000 ffc4 	bl	8009d7c <__lshift>
 8008df4:	9005      	str	r0, [sp, #20]
 8008df6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	dd05      	ble.n	8008e08 <_dtoa_r+0x8c0>
 8008dfc:	0031      	movs	r1, r6
 8008dfe:	001a      	movs	r2, r3
 8008e00:	9803      	ldr	r0, [sp, #12]
 8008e02:	f000 ffbb 	bl	8009d7c <__lshift>
 8008e06:	0006      	movs	r6, r0
 8008e08:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d061      	beq.n	8008ed2 <_dtoa_r+0x98a>
 8008e0e:	0031      	movs	r1, r6
 8008e10:	9805      	ldr	r0, [sp, #20]
 8008e12:	f001 f81f 	bl	8009e54 <__mcmp>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	da5b      	bge.n	8008ed2 <_dtoa_r+0x98a>
 8008e1a:	9b04      	ldr	r3, [sp, #16]
 8008e1c:	220a      	movs	r2, #10
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e22:	9905      	ldr	r1, [sp, #20]
 8008e24:	2300      	movs	r3, #0
 8008e26:	9803      	ldr	r0, [sp, #12]
 8008e28:	f000 fdf6 	bl	8009a18 <__multadd>
 8008e2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008e2e:	9005      	str	r0, [sp, #20]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d100      	bne.n	8008e36 <_dtoa_r+0x8ee>
 8008e34:	e15b      	b.n	80090ee <_dtoa_r+0xba6>
 8008e36:	2300      	movs	r3, #0
 8008e38:	0039      	movs	r1, r7
 8008e3a:	220a      	movs	r2, #10
 8008e3c:	9803      	ldr	r0, [sp, #12]
 8008e3e:	f000 fdeb 	bl	8009a18 <__multadd>
 8008e42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e44:	0007      	movs	r7, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	dc4d      	bgt.n	8008ee6 <_dtoa_r+0x99e>
 8008e4a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	dd46      	ble.n	8008ede <_dtoa_r+0x996>
 8008e50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d000      	beq.n	8008e58 <_dtoa_r+0x910>
 8008e56:	e5db      	b.n	8008a10 <_dtoa_r+0x4c8>
 8008e58:	0031      	movs	r1, r6
 8008e5a:	2205      	movs	r2, #5
 8008e5c:	9803      	ldr	r0, [sp, #12]
 8008e5e:	f000 fddb 	bl	8009a18 <__multadd>
 8008e62:	0006      	movs	r6, r0
 8008e64:	0001      	movs	r1, r0
 8008e66:	9805      	ldr	r0, [sp, #20]
 8008e68:	f000 fff4 	bl	8009e54 <__mcmp>
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	dc00      	bgt.n	8008e72 <_dtoa_r+0x92a>
 8008e70:	e5ce      	b.n	8008a10 <_dtoa_r+0x4c8>
 8008e72:	9b08      	ldr	r3, [sp, #32]
 8008e74:	9a08      	ldr	r2, [sp, #32]
 8008e76:	1c5c      	adds	r4, r3, #1
 8008e78:	2331      	movs	r3, #49	@ 0x31
 8008e7a:	7013      	strb	r3, [r2, #0]
 8008e7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e7e:	3301      	adds	r3, #1
 8008e80:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e82:	e5c9      	b.n	8008a18 <_dtoa_r+0x4d0>
 8008e84:	2336      	movs	r3, #54	@ 0x36
 8008e86:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008e88:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8008e8a:	1a9b      	subs	r3, r3, r2
 8008e8c:	9c06      	ldr	r4, [sp, #24]
 8008e8e:	e720      	b.n	8008cd2 <_dtoa_r+0x78a>
 8008e90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e92:	1e5d      	subs	r5, r3, #1
 8008e94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e96:	42ab      	cmp	r3, r5
 8008e98:	db08      	blt.n	8008eac <_dtoa_r+0x964>
 8008e9a:	1b5d      	subs	r5, r3, r5
 8008e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	daf4      	bge.n	8008e8c <_dtoa_r+0x944>
 8008ea2:	9b06      	ldr	r3, [sp, #24]
 8008ea4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ea6:	1a9c      	subs	r4, r3, r2
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	e712      	b.n	8008cd2 <_dtoa_r+0x78a>
 8008eac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008eae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008eb0:	1aeb      	subs	r3, r5, r3
 8008eb2:	18d3      	adds	r3, r2, r3
 8008eb4:	9314      	str	r3, [sp, #80]	@ 0x50
 8008eb6:	950f      	str	r5, [sp, #60]	@ 0x3c
 8008eb8:	9c06      	ldr	r4, [sp, #24]
 8008eba:	2500      	movs	r5, #0
 8008ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ebe:	e708      	b.n	8008cd2 <_dtoa_r+0x78a>
 8008ec0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008ec2:	9905      	ldr	r1, [sp, #20]
 8008ec4:	e742      	b.n	8008d4c <_dtoa_r+0x804>
 8008ec6:	2b04      	cmp	r3, #4
 8008ec8:	d08c      	beq.n	8008de4 <_dtoa_r+0x89c>
 8008eca:	331c      	adds	r3, #28
 8008ecc:	e783      	b.n	8008dd6 <_dtoa_r+0x88e>
 8008ece:	0013      	movs	r3, r2
 8008ed0:	e7fb      	b.n	8008eca <_dtoa_r+0x982>
 8008ed2:	9b04      	ldr	r3, [sp, #16]
 8008ed4:	930c      	str	r3, [sp, #48]	@ 0x30
 8008ed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ed8:	930e      	str	r3, [sp, #56]	@ 0x38
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	ddb5      	ble.n	8008e4a <_dtoa_r+0x902>
 8008ede:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d100      	bne.n	8008ee6 <_dtoa_r+0x99e>
 8008ee4:	e107      	b.n	80090f6 <_dtoa_r+0xbae>
 8008ee6:	2c00      	cmp	r4, #0
 8008ee8:	dd05      	ble.n	8008ef6 <_dtoa_r+0x9ae>
 8008eea:	0039      	movs	r1, r7
 8008eec:	0022      	movs	r2, r4
 8008eee:	9803      	ldr	r0, [sp, #12]
 8008ef0:	f000 ff44 	bl	8009d7c <__lshift>
 8008ef4:	0007      	movs	r7, r0
 8008ef6:	9704      	str	r7, [sp, #16]
 8008ef8:	2d00      	cmp	r5, #0
 8008efa:	d020      	beq.n	8008f3e <_dtoa_r+0x9f6>
 8008efc:	6879      	ldr	r1, [r7, #4]
 8008efe:	9803      	ldr	r0, [sp, #12]
 8008f00:	f000 fd22 	bl	8009948 <_Balloc>
 8008f04:	1e04      	subs	r4, r0, #0
 8008f06:	d10c      	bne.n	8008f22 <_dtoa_r+0x9da>
 8008f08:	0022      	movs	r2, r4
 8008f0a:	4b2e      	ldr	r3, [pc, #184]	@ (8008fc4 <_dtoa_r+0xa7c>)
 8008f0c:	482e      	ldr	r0, [pc, #184]	@ (8008fc8 <_dtoa_r+0xa80>)
 8008f0e:	492f      	ldr	r1, [pc, #188]	@ (8008fcc <_dtoa_r+0xa84>)
 8008f10:	f7ff fb2f 	bl	8008572 <_dtoa_r+0x2a>
 8008f14:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8008f16:	0037      	movs	r7, r6
 8008f18:	e7ab      	b.n	8008e72 <_dtoa_r+0x92a>
 8008f1a:	9b04      	ldr	r3, [sp, #16]
 8008f1c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8008f1e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f20:	e7f9      	b.n	8008f16 <_dtoa_r+0x9ce>
 8008f22:	0039      	movs	r1, r7
 8008f24:	693a      	ldr	r2, [r7, #16]
 8008f26:	310c      	adds	r1, #12
 8008f28:	3202      	adds	r2, #2
 8008f2a:	0092      	lsls	r2, r2, #2
 8008f2c:	300c      	adds	r0, #12
 8008f2e:	f7ff fa7c 	bl	800842a <memcpy>
 8008f32:	2201      	movs	r2, #1
 8008f34:	0021      	movs	r1, r4
 8008f36:	9803      	ldr	r0, [sp, #12]
 8008f38:	f000 ff20 	bl	8009d7c <__lshift>
 8008f3c:	9004      	str	r0, [sp, #16]
 8008f3e:	9b08      	ldr	r3, [sp, #32]
 8008f40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f42:	9306      	str	r3, [sp, #24]
 8008f44:	3b01      	subs	r3, #1
 8008f46:	189b      	adds	r3, r3, r2
 8008f48:	2201      	movs	r2, #1
 8008f4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008f4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f4e:	4013      	ands	r3, r2
 8008f50:	930e      	str	r3, [sp, #56]	@ 0x38
 8008f52:	0031      	movs	r1, r6
 8008f54:	9805      	ldr	r0, [sp, #20]
 8008f56:	f7ff fa71 	bl	800843c <quorem>
 8008f5a:	0039      	movs	r1, r7
 8008f5c:	0005      	movs	r5, r0
 8008f5e:	900a      	str	r0, [sp, #40]	@ 0x28
 8008f60:	9805      	ldr	r0, [sp, #20]
 8008f62:	f000 ff77 	bl	8009e54 <__mcmp>
 8008f66:	9a04      	ldr	r2, [sp, #16]
 8008f68:	900d      	str	r0, [sp, #52]	@ 0x34
 8008f6a:	0031      	movs	r1, r6
 8008f6c:	9803      	ldr	r0, [sp, #12]
 8008f6e:	f000 ff8d 	bl	8009e8c <__mdiff>
 8008f72:	2201      	movs	r2, #1
 8008f74:	68c3      	ldr	r3, [r0, #12]
 8008f76:	0004      	movs	r4, r0
 8008f78:	3530      	adds	r5, #48	@ 0x30
 8008f7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d104      	bne.n	8008f8a <_dtoa_r+0xa42>
 8008f80:	0001      	movs	r1, r0
 8008f82:	9805      	ldr	r0, [sp, #20]
 8008f84:	f000 ff66 	bl	8009e54 <__mcmp>
 8008f88:	9009      	str	r0, [sp, #36]	@ 0x24
 8008f8a:	0021      	movs	r1, r4
 8008f8c:	9803      	ldr	r0, [sp, #12]
 8008f8e:	f000 fd1f 	bl	80099d0 <_Bfree>
 8008f92:	9b06      	ldr	r3, [sp, #24]
 8008f94:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008f96:	1c5c      	adds	r4, r3, #1
 8008f98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	d116      	bne.n	8008fd0 <_dtoa_r+0xa88>
 8008fa2:	2d39      	cmp	r5, #57	@ 0x39
 8008fa4:	d02f      	beq.n	8009006 <_dtoa_r+0xabe>
 8008fa6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	dd01      	ble.n	8008fb0 <_dtoa_r+0xa68>
 8008fac:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008fae:	3531      	adds	r5, #49	@ 0x31
 8008fb0:	9b06      	ldr	r3, [sp, #24]
 8008fb2:	701d      	strb	r5, [r3, #0]
 8008fb4:	e532      	b.n	8008a1c <_dtoa_r+0x4d4>
 8008fb6:	46c0      	nop			@ (mov r8, r8)
 8008fb8:	40240000 	.word	0x40240000
 8008fbc:	00000433 	.word	0x00000433
 8008fc0:	7ff00000 	.word	0x7ff00000
 8008fc4:	0800b1b8 	.word	0x0800b1b8
 8008fc8:	0800b160 	.word	0x0800b160
 8008fcc:	000002ef 	.word	0x000002ef
 8008fd0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	db04      	blt.n	8008fe0 <_dtoa_r+0xa98>
 8008fd6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	d11e      	bne.n	800901e <_dtoa_r+0xad6>
 8008fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	dde4      	ble.n	8008fb0 <_dtoa_r+0xa68>
 8008fe6:	9905      	ldr	r1, [sp, #20]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	9803      	ldr	r0, [sp, #12]
 8008fec:	f000 fec6 	bl	8009d7c <__lshift>
 8008ff0:	0031      	movs	r1, r6
 8008ff2:	9005      	str	r0, [sp, #20]
 8008ff4:	f000 ff2e 	bl	8009e54 <__mcmp>
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	dc02      	bgt.n	8009002 <_dtoa_r+0xaba>
 8008ffc:	d1d8      	bne.n	8008fb0 <_dtoa_r+0xa68>
 8008ffe:	07eb      	lsls	r3, r5, #31
 8009000:	d5d6      	bpl.n	8008fb0 <_dtoa_r+0xa68>
 8009002:	2d39      	cmp	r5, #57	@ 0x39
 8009004:	d1d2      	bne.n	8008fac <_dtoa_r+0xa64>
 8009006:	2339      	movs	r3, #57	@ 0x39
 8009008:	9a06      	ldr	r2, [sp, #24]
 800900a:	7013      	strb	r3, [r2, #0]
 800900c:	0023      	movs	r3, r4
 800900e:	001c      	movs	r4, r3
 8009010:	3b01      	subs	r3, #1
 8009012:	781a      	ldrb	r2, [r3, #0]
 8009014:	2a39      	cmp	r2, #57	@ 0x39
 8009016:	d050      	beq.n	80090ba <_dtoa_r+0xb72>
 8009018:	3201      	adds	r2, #1
 800901a:	701a      	strb	r2, [r3, #0]
 800901c:	e4fe      	b.n	8008a1c <_dtoa_r+0x4d4>
 800901e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009020:	2b00      	cmp	r3, #0
 8009022:	dd03      	ble.n	800902c <_dtoa_r+0xae4>
 8009024:	2d39      	cmp	r5, #57	@ 0x39
 8009026:	d0ee      	beq.n	8009006 <_dtoa_r+0xabe>
 8009028:	3501      	adds	r5, #1
 800902a:	e7c1      	b.n	8008fb0 <_dtoa_r+0xa68>
 800902c:	9b06      	ldr	r3, [sp, #24]
 800902e:	9a06      	ldr	r2, [sp, #24]
 8009030:	701d      	strb	r5, [r3, #0]
 8009032:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009034:	4293      	cmp	r3, r2
 8009036:	d02b      	beq.n	8009090 <_dtoa_r+0xb48>
 8009038:	2300      	movs	r3, #0
 800903a:	220a      	movs	r2, #10
 800903c:	9905      	ldr	r1, [sp, #20]
 800903e:	9803      	ldr	r0, [sp, #12]
 8009040:	f000 fcea 	bl	8009a18 <__multadd>
 8009044:	9b04      	ldr	r3, [sp, #16]
 8009046:	9005      	str	r0, [sp, #20]
 8009048:	429f      	cmp	r7, r3
 800904a:	d109      	bne.n	8009060 <_dtoa_r+0xb18>
 800904c:	0039      	movs	r1, r7
 800904e:	2300      	movs	r3, #0
 8009050:	220a      	movs	r2, #10
 8009052:	9803      	ldr	r0, [sp, #12]
 8009054:	f000 fce0 	bl	8009a18 <__multadd>
 8009058:	0007      	movs	r7, r0
 800905a:	9004      	str	r0, [sp, #16]
 800905c:	9406      	str	r4, [sp, #24]
 800905e:	e778      	b.n	8008f52 <_dtoa_r+0xa0a>
 8009060:	0039      	movs	r1, r7
 8009062:	2300      	movs	r3, #0
 8009064:	220a      	movs	r2, #10
 8009066:	9803      	ldr	r0, [sp, #12]
 8009068:	f000 fcd6 	bl	8009a18 <__multadd>
 800906c:	2300      	movs	r3, #0
 800906e:	0007      	movs	r7, r0
 8009070:	220a      	movs	r2, #10
 8009072:	9904      	ldr	r1, [sp, #16]
 8009074:	9803      	ldr	r0, [sp, #12]
 8009076:	f000 fccf 	bl	8009a18 <__multadd>
 800907a:	9004      	str	r0, [sp, #16]
 800907c:	e7ee      	b.n	800905c <_dtoa_r+0xb14>
 800907e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009080:	2401      	movs	r4, #1
 8009082:	2b00      	cmp	r3, #0
 8009084:	dd00      	ble.n	8009088 <_dtoa_r+0xb40>
 8009086:	001c      	movs	r4, r3
 8009088:	9704      	str	r7, [sp, #16]
 800908a:	2700      	movs	r7, #0
 800908c:	9b08      	ldr	r3, [sp, #32]
 800908e:	191c      	adds	r4, r3, r4
 8009090:	9905      	ldr	r1, [sp, #20]
 8009092:	2201      	movs	r2, #1
 8009094:	9803      	ldr	r0, [sp, #12]
 8009096:	f000 fe71 	bl	8009d7c <__lshift>
 800909a:	0031      	movs	r1, r6
 800909c:	9005      	str	r0, [sp, #20]
 800909e:	f000 fed9 	bl	8009e54 <__mcmp>
 80090a2:	2800      	cmp	r0, #0
 80090a4:	dcb2      	bgt.n	800900c <_dtoa_r+0xac4>
 80090a6:	d101      	bne.n	80090ac <_dtoa_r+0xb64>
 80090a8:	07ed      	lsls	r5, r5, #31
 80090aa:	d4af      	bmi.n	800900c <_dtoa_r+0xac4>
 80090ac:	0023      	movs	r3, r4
 80090ae:	001c      	movs	r4, r3
 80090b0:	3b01      	subs	r3, #1
 80090b2:	781a      	ldrb	r2, [r3, #0]
 80090b4:	2a30      	cmp	r2, #48	@ 0x30
 80090b6:	d0fa      	beq.n	80090ae <_dtoa_r+0xb66>
 80090b8:	e4b0      	b.n	8008a1c <_dtoa_r+0x4d4>
 80090ba:	9a08      	ldr	r2, [sp, #32]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d1a6      	bne.n	800900e <_dtoa_r+0xac6>
 80090c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80090c2:	3301      	adds	r3, #1
 80090c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80090c6:	2331      	movs	r3, #49	@ 0x31
 80090c8:	7013      	strb	r3, [r2, #0]
 80090ca:	e4a7      	b.n	8008a1c <_dtoa_r+0x4d4>
 80090cc:	4b14      	ldr	r3, [pc, #80]	@ (8009120 <_dtoa_r+0xbd8>)
 80090ce:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80090d0:	9308      	str	r3, [sp, #32]
 80090d2:	4b14      	ldr	r3, [pc, #80]	@ (8009124 <_dtoa_r+0xbdc>)
 80090d4:	2a00      	cmp	r2, #0
 80090d6:	d001      	beq.n	80090dc <_dtoa_r+0xb94>
 80090d8:	f7ff fa7e 	bl	80085d8 <_dtoa_r+0x90>
 80090dc:	f7ff fa7e 	bl	80085dc <_dtoa_r+0x94>
 80090e0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	dc00      	bgt.n	80090e8 <_dtoa_r+0xba0>
 80090e6:	e648      	b.n	8008d7a <_dtoa_r+0x832>
 80090e8:	2001      	movs	r0, #1
 80090ea:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80090ec:	e665      	b.n	8008dba <_dtoa_r+0x872>
 80090ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	dc00      	bgt.n	80090f6 <_dtoa_r+0xbae>
 80090f4:	e6a9      	b.n	8008e4a <_dtoa_r+0x902>
 80090f6:	2400      	movs	r4, #0
 80090f8:	0031      	movs	r1, r6
 80090fa:	9805      	ldr	r0, [sp, #20]
 80090fc:	f7ff f99e 	bl	800843c <quorem>
 8009100:	9b08      	ldr	r3, [sp, #32]
 8009102:	3030      	adds	r0, #48	@ 0x30
 8009104:	5518      	strb	r0, [r3, r4]
 8009106:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009108:	3401      	adds	r4, #1
 800910a:	0005      	movs	r5, r0
 800910c:	42a3      	cmp	r3, r4
 800910e:	ddb6      	ble.n	800907e <_dtoa_r+0xb36>
 8009110:	2300      	movs	r3, #0
 8009112:	220a      	movs	r2, #10
 8009114:	9905      	ldr	r1, [sp, #20]
 8009116:	9803      	ldr	r0, [sp, #12]
 8009118:	f000 fc7e 	bl	8009a18 <__multadd>
 800911c:	9005      	str	r0, [sp, #20]
 800911e:	e7eb      	b.n	80090f8 <_dtoa_r+0xbb0>
 8009120:	0800b13c 	.word	0x0800b13c
 8009124:	0800b144 	.word	0x0800b144

08009128 <__ssputs_r>:
 8009128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800912a:	688e      	ldr	r6, [r1, #8]
 800912c:	b085      	sub	sp, #20
 800912e:	001f      	movs	r7, r3
 8009130:	000c      	movs	r4, r1
 8009132:	680b      	ldr	r3, [r1, #0]
 8009134:	9002      	str	r0, [sp, #8]
 8009136:	9203      	str	r2, [sp, #12]
 8009138:	42be      	cmp	r6, r7
 800913a:	d830      	bhi.n	800919e <__ssputs_r+0x76>
 800913c:	210c      	movs	r1, #12
 800913e:	5e62      	ldrsh	r2, [r4, r1]
 8009140:	2190      	movs	r1, #144	@ 0x90
 8009142:	00c9      	lsls	r1, r1, #3
 8009144:	420a      	tst	r2, r1
 8009146:	d028      	beq.n	800919a <__ssputs_r+0x72>
 8009148:	2003      	movs	r0, #3
 800914a:	6921      	ldr	r1, [r4, #16]
 800914c:	1a5b      	subs	r3, r3, r1
 800914e:	9301      	str	r3, [sp, #4]
 8009150:	6963      	ldr	r3, [r4, #20]
 8009152:	4343      	muls	r3, r0
 8009154:	9801      	ldr	r0, [sp, #4]
 8009156:	0fdd      	lsrs	r5, r3, #31
 8009158:	18ed      	adds	r5, r5, r3
 800915a:	1c7b      	adds	r3, r7, #1
 800915c:	181b      	adds	r3, r3, r0
 800915e:	106d      	asrs	r5, r5, #1
 8009160:	42ab      	cmp	r3, r5
 8009162:	d900      	bls.n	8009166 <__ssputs_r+0x3e>
 8009164:	001d      	movs	r5, r3
 8009166:	0552      	lsls	r2, r2, #21
 8009168:	d528      	bpl.n	80091bc <__ssputs_r+0x94>
 800916a:	0029      	movs	r1, r5
 800916c:	9802      	ldr	r0, [sp, #8]
 800916e:	f000 faa9 	bl	80096c4 <_malloc_r>
 8009172:	1e06      	subs	r6, r0, #0
 8009174:	d02c      	beq.n	80091d0 <__ssputs_r+0xa8>
 8009176:	9a01      	ldr	r2, [sp, #4]
 8009178:	6921      	ldr	r1, [r4, #16]
 800917a:	f7ff f956 	bl	800842a <memcpy>
 800917e:	89a2      	ldrh	r2, [r4, #12]
 8009180:	4b18      	ldr	r3, [pc, #96]	@ (80091e4 <__ssputs_r+0xbc>)
 8009182:	401a      	ands	r2, r3
 8009184:	2380      	movs	r3, #128	@ 0x80
 8009186:	4313      	orrs	r3, r2
 8009188:	81a3      	strh	r3, [r4, #12]
 800918a:	9b01      	ldr	r3, [sp, #4]
 800918c:	6126      	str	r6, [r4, #16]
 800918e:	18f6      	adds	r6, r6, r3
 8009190:	6026      	str	r6, [r4, #0]
 8009192:	003e      	movs	r6, r7
 8009194:	6165      	str	r5, [r4, #20]
 8009196:	1aed      	subs	r5, r5, r3
 8009198:	60a5      	str	r5, [r4, #8]
 800919a:	42be      	cmp	r6, r7
 800919c:	d900      	bls.n	80091a0 <__ssputs_r+0x78>
 800919e:	003e      	movs	r6, r7
 80091a0:	0032      	movs	r2, r6
 80091a2:	9903      	ldr	r1, [sp, #12]
 80091a4:	6820      	ldr	r0, [r4, #0]
 80091a6:	f7ff f8e9 	bl	800837c <memmove>
 80091aa:	2000      	movs	r0, #0
 80091ac:	68a3      	ldr	r3, [r4, #8]
 80091ae:	1b9b      	subs	r3, r3, r6
 80091b0:	60a3      	str	r3, [r4, #8]
 80091b2:	6823      	ldr	r3, [r4, #0]
 80091b4:	199b      	adds	r3, r3, r6
 80091b6:	6023      	str	r3, [r4, #0]
 80091b8:	b005      	add	sp, #20
 80091ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091bc:	002a      	movs	r2, r5
 80091be:	9802      	ldr	r0, [sp, #8]
 80091c0:	f000 ffaa 	bl	800a118 <_realloc_r>
 80091c4:	1e06      	subs	r6, r0, #0
 80091c6:	d1e0      	bne.n	800918a <__ssputs_r+0x62>
 80091c8:	6921      	ldr	r1, [r4, #16]
 80091ca:	9802      	ldr	r0, [sp, #8]
 80091cc:	f001 f9b0 	bl	800a530 <_free_r>
 80091d0:	230c      	movs	r3, #12
 80091d2:	2001      	movs	r0, #1
 80091d4:	9a02      	ldr	r2, [sp, #8]
 80091d6:	4240      	negs	r0, r0
 80091d8:	6013      	str	r3, [r2, #0]
 80091da:	89a2      	ldrh	r2, [r4, #12]
 80091dc:	3334      	adds	r3, #52	@ 0x34
 80091de:	4313      	orrs	r3, r2
 80091e0:	81a3      	strh	r3, [r4, #12]
 80091e2:	e7e9      	b.n	80091b8 <__ssputs_r+0x90>
 80091e4:	fffffb7f 	.word	0xfffffb7f

080091e8 <_svfiprintf_r>:
 80091e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091ea:	b0a1      	sub	sp, #132	@ 0x84
 80091ec:	9003      	str	r0, [sp, #12]
 80091ee:	001d      	movs	r5, r3
 80091f0:	898b      	ldrh	r3, [r1, #12]
 80091f2:	000f      	movs	r7, r1
 80091f4:	0016      	movs	r6, r2
 80091f6:	061b      	lsls	r3, r3, #24
 80091f8:	d511      	bpl.n	800921e <_svfiprintf_r+0x36>
 80091fa:	690b      	ldr	r3, [r1, #16]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d10e      	bne.n	800921e <_svfiprintf_r+0x36>
 8009200:	2140      	movs	r1, #64	@ 0x40
 8009202:	f000 fa5f 	bl	80096c4 <_malloc_r>
 8009206:	6038      	str	r0, [r7, #0]
 8009208:	6138      	str	r0, [r7, #16]
 800920a:	2800      	cmp	r0, #0
 800920c:	d105      	bne.n	800921a <_svfiprintf_r+0x32>
 800920e:	230c      	movs	r3, #12
 8009210:	9a03      	ldr	r2, [sp, #12]
 8009212:	6013      	str	r3, [r2, #0]
 8009214:	2001      	movs	r0, #1
 8009216:	4240      	negs	r0, r0
 8009218:	e0cf      	b.n	80093ba <_svfiprintf_r+0x1d2>
 800921a:	2340      	movs	r3, #64	@ 0x40
 800921c:	617b      	str	r3, [r7, #20]
 800921e:	2300      	movs	r3, #0
 8009220:	ac08      	add	r4, sp, #32
 8009222:	6163      	str	r3, [r4, #20]
 8009224:	3320      	adds	r3, #32
 8009226:	7663      	strb	r3, [r4, #25]
 8009228:	3310      	adds	r3, #16
 800922a:	76a3      	strb	r3, [r4, #26]
 800922c:	9507      	str	r5, [sp, #28]
 800922e:	0035      	movs	r5, r6
 8009230:	782b      	ldrb	r3, [r5, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d001      	beq.n	800923a <_svfiprintf_r+0x52>
 8009236:	2b25      	cmp	r3, #37	@ 0x25
 8009238:	d148      	bne.n	80092cc <_svfiprintf_r+0xe4>
 800923a:	1bab      	subs	r3, r5, r6
 800923c:	9305      	str	r3, [sp, #20]
 800923e:	42b5      	cmp	r5, r6
 8009240:	d00b      	beq.n	800925a <_svfiprintf_r+0x72>
 8009242:	0032      	movs	r2, r6
 8009244:	0039      	movs	r1, r7
 8009246:	9803      	ldr	r0, [sp, #12]
 8009248:	f7ff ff6e 	bl	8009128 <__ssputs_r>
 800924c:	3001      	adds	r0, #1
 800924e:	d100      	bne.n	8009252 <_svfiprintf_r+0x6a>
 8009250:	e0ae      	b.n	80093b0 <_svfiprintf_r+0x1c8>
 8009252:	6963      	ldr	r3, [r4, #20]
 8009254:	9a05      	ldr	r2, [sp, #20]
 8009256:	189b      	adds	r3, r3, r2
 8009258:	6163      	str	r3, [r4, #20]
 800925a:	782b      	ldrb	r3, [r5, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d100      	bne.n	8009262 <_svfiprintf_r+0x7a>
 8009260:	e0a6      	b.n	80093b0 <_svfiprintf_r+0x1c8>
 8009262:	2201      	movs	r2, #1
 8009264:	2300      	movs	r3, #0
 8009266:	4252      	negs	r2, r2
 8009268:	6062      	str	r2, [r4, #4]
 800926a:	a904      	add	r1, sp, #16
 800926c:	3254      	adds	r2, #84	@ 0x54
 800926e:	1852      	adds	r2, r2, r1
 8009270:	1c6e      	adds	r6, r5, #1
 8009272:	6023      	str	r3, [r4, #0]
 8009274:	60e3      	str	r3, [r4, #12]
 8009276:	60a3      	str	r3, [r4, #8]
 8009278:	7013      	strb	r3, [r2, #0]
 800927a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800927c:	4b54      	ldr	r3, [pc, #336]	@ (80093d0 <_svfiprintf_r+0x1e8>)
 800927e:	2205      	movs	r2, #5
 8009280:	0018      	movs	r0, r3
 8009282:	7831      	ldrb	r1, [r6, #0]
 8009284:	9305      	str	r3, [sp, #20]
 8009286:	f7ff f8c5 	bl	8008414 <memchr>
 800928a:	1c75      	adds	r5, r6, #1
 800928c:	2800      	cmp	r0, #0
 800928e:	d11f      	bne.n	80092d0 <_svfiprintf_r+0xe8>
 8009290:	6822      	ldr	r2, [r4, #0]
 8009292:	06d3      	lsls	r3, r2, #27
 8009294:	d504      	bpl.n	80092a0 <_svfiprintf_r+0xb8>
 8009296:	2353      	movs	r3, #83	@ 0x53
 8009298:	a904      	add	r1, sp, #16
 800929a:	185b      	adds	r3, r3, r1
 800929c:	2120      	movs	r1, #32
 800929e:	7019      	strb	r1, [r3, #0]
 80092a0:	0713      	lsls	r3, r2, #28
 80092a2:	d504      	bpl.n	80092ae <_svfiprintf_r+0xc6>
 80092a4:	2353      	movs	r3, #83	@ 0x53
 80092a6:	a904      	add	r1, sp, #16
 80092a8:	185b      	adds	r3, r3, r1
 80092aa:	212b      	movs	r1, #43	@ 0x2b
 80092ac:	7019      	strb	r1, [r3, #0]
 80092ae:	7833      	ldrb	r3, [r6, #0]
 80092b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80092b2:	d016      	beq.n	80092e2 <_svfiprintf_r+0xfa>
 80092b4:	0035      	movs	r5, r6
 80092b6:	2100      	movs	r1, #0
 80092b8:	200a      	movs	r0, #10
 80092ba:	68e3      	ldr	r3, [r4, #12]
 80092bc:	782a      	ldrb	r2, [r5, #0]
 80092be:	1c6e      	adds	r6, r5, #1
 80092c0:	3a30      	subs	r2, #48	@ 0x30
 80092c2:	2a09      	cmp	r2, #9
 80092c4:	d950      	bls.n	8009368 <_svfiprintf_r+0x180>
 80092c6:	2900      	cmp	r1, #0
 80092c8:	d111      	bne.n	80092ee <_svfiprintf_r+0x106>
 80092ca:	e017      	b.n	80092fc <_svfiprintf_r+0x114>
 80092cc:	3501      	adds	r5, #1
 80092ce:	e7af      	b.n	8009230 <_svfiprintf_r+0x48>
 80092d0:	9b05      	ldr	r3, [sp, #20]
 80092d2:	6822      	ldr	r2, [r4, #0]
 80092d4:	1ac0      	subs	r0, r0, r3
 80092d6:	2301      	movs	r3, #1
 80092d8:	4083      	lsls	r3, r0
 80092da:	4313      	orrs	r3, r2
 80092dc:	002e      	movs	r6, r5
 80092de:	6023      	str	r3, [r4, #0]
 80092e0:	e7cc      	b.n	800927c <_svfiprintf_r+0x94>
 80092e2:	9b07      	ldr	r3, [sp, #28]
 80092e4:	1d19      	adds	r1, r3, #4
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	9107      	str	r1, [sp, #28]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	db01      	blt.n	80092f2 <_svfiprintf_r+0x10a>
 80092ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092f0:	e004      	b.n	80092fc <_svfiprintf_r+0x114>
 80092f2:	425b      	negs	r3, r3
 80092f4:	60e3      	str	r3, [r4, #12]
 80092f6:	2302      	movs	r3, #2
 80092f8:	4313      	orrs	r3, r2
 80092fa:	6023      	str	r3, [r4, #0]
 80092fc:	782b      	ldrb	r3, [r5, #0]
 80092fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8009300:	d10c      	bne.n	800931c <_svfiprintf_r+0x134>
 8009302:	786b      	ldrb	r3, [r5, #1]
 8009304:	2b2a      	cmp	r3, #42	@ 0x2a
 8009306:	d134      	bne.n	8009372 <_svfiprintf_r+0x18a>
 8009308:	9b07      	ldr	r3, [sp, #28]
 800930a:	3502      	adds	r5, #2
 800930c:	1d1a      	adds	r2, r3, #4
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	9207      	str	r2, [sp, #28]
 8009312:	2b00      	cmp	r3, #0
 8009314:	da01      	bge.n	800931a <_svfiprintf_r+0x132>
 8009316:	2301      	movs	r3, #1
 8009318:	425b      	negs	r3, r3
 800931a:	9309      	str	r3, [sp, #36]	@ 0x24
 800931c:	4e2d      	ldr	r6, [pc, #180]	@ (80093d4 <_svfiprintf_r+0x1ec>)
 800931e:	2203      	movs	r2, #3
 8009320:	0030      	movs	r0, r6
 8009322:	7829      	ldrb	r1, [r5, #0]
 8009324:	f7ff f876 	bl	8008414 <memchr>
 8009328:	2800      	cmp	r0, #0
 800932a:	d006      	beq.n	800933a <_svfiprintf_r+0x152>
 800932c:	2340      	movs	r3, #64	@ 0x40
 800932e:	1b80      	subs	r0, r0, r6
 8009330:	4083      	lsls	r3, r0
 8009332:	6822      	ldr	r2, [r4, #0]
 8009334:	3501      	adds	r5, #1
 8009336:	4313      	orrs	r3, r2
 8009338:	6023      	str	r3, [r4, #0]
 800933a:	7829      	ldrb	r1, [r5, #0]
 800933c:	2206      	movs	r2, #6
 800933e:	4826      	ldr	r0, [pc, #152]	@ (80093d8 <_svfiprintf_r+0x1f0>)
 8009340:	1c6e      	adds	r6, r5, #1
 8009342:	7621      	strb	r1, [r4, #24]
 8009344:	f7ff f866 	bl	8008414 <memchr>
 8009348:	2800      	cmp	r0, #0
 800934a:	d038      	beq.n	80093be <_svfiprintf_r+0x1d6>
 800934c:	4b23      	ldr	r3, [pc, #140]	@ (80093dc <_svfiprintf_r+0x1f4>)
 800934e:	2b00      	cmp	r3, #0
 8009350:	d122      	bne.n	8009398 <_svfiprintf_r+0x1b0>
 8009352:	2207      	movs	r2, #7
 8009354:	9b07      	ldr	r3, [sp, #28]
 8009356:	3307      	adds	r3, #7
 8009358:	4393      	bics	r3, r2
 800935a:	3308      	adds	r3, #8
 800935c:	9307      	str	r3, [sp, #28]
 800935e:	6963      	ldr	r3, [r4, #20]
 8009360:	9a04      	ldr	r2, [sp, #16]
 8009362:	189b      	adds	r3, r3, r2
 8009364:	6163      	str	r3, [r4, #20]
 8009366:	e762      	b.n	800922e <_svfiprintf_r+0x46>
 8009368:	4343      	muls	r3, r0
 800936a:	0035      	movs	r5, r6
 800936c:	2101      	movs	r1, #1
 800936e:	189b      	adds	r3, r3, r2
 8009370:	e7a4      	b.n	80092bc <_svfiprintf_r+0xd4>
 8009372:	2300      	movs	r3, #0
 8009374:	200a      	movs	r0, #10
 8009376:	0019      	movs	r1, r3
 8009378:	3501      	adds	r5, #1
 800937a:	6063      	str	r3, [r4, #4]
 800937c:	782a      	ldrb	r2, [r5, #0]
 800937e:	1c6e      	adds	r6, r5, #1
 8009380:	3a30      	subs	r2, #48	@ 0x30
 8009382:	2a09      	cmp	r2, #9
 8009384:	d903      	bls.n	800938e <_svfiprintf_r+0x1a6>
 8009386:	2b00      	cmp	r3, #0
 8009388:	d0c8      	beq.n	800931c <_svfiprintf_r+0x134>
 800938a:	9109      	str	r1, [sp, #36]	@ 0x24
 800938c:	e7c6      	b.n	800931c <_svfiprintf_r+0x134>
 800938e:	4341      	muls	r1, r0
 8009390:	0035      	movs	r5, r6
 8009392:	2301      	movs	r3, #1
 8009394:	1889      	adds	r1, r1, r2
 8009396:	e7f1      	b.n	800937c <_svfiprintf_r+0x194>
 8009398:	aa07      	add	r2, sp, #28
 800939a:	9200      	str	r2, [sp, #0]
 800939c:	0021      	movs	r1, r4
 800939e:	003a      	movs	r2, r7
 80093a0:	4b0f      	ldr	r3, [pc, #60]	@ (80093e0 <_svfiprintf_r+0x1f8>)
 80093a2:	9803      	ldr	r0, [sp, #12]
 80093a4:	f7fe fac6 	bl	8007934 <_printf_float>
 80093a8:	9004      	str	r0, [sp, #16]
 80093aa:	9b04      	ldr	r3, [sp, #16]
 80093ac:	3301      	adds	r3, #1
 80093ae:	d1d6      	bne.n	800935e <_svfiprintf_r+0x176>
 80093b0:	89bb      	ldrh	r3, [r7, #12]
 80093b2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80093b4:	065b      	lsls	r3, r3, #25
 80093b6:	d500      	bpl.n	80093ba <_svfiprintf_r+0x1d2>
 80093b8:	e72c      	b.n	8009214 <_svfiprintf_r+0x2c>
 80093ba:	b021      	add	sp, #132	@ 0x84
 80093bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093be:	aa07      	add	r2, sp, #28
 80093c0:	9200      	str	r2, [sp, #0]
 80093c2:	0021      	movs	r1, r4
 80093c4:	003a      	movs	r2, r7
 80093c6:	4b06      	ldr	r3, [pc, #24]	@ (80093e0 <_svfiprintf_r+0x1f8>)
 80093c8:	9803      	ldr	r0, [sp, #12]
 80093ca:	f7fe fd61 	bl	8007e90 <_printf_i>
 80093ce:	e7eb      	b.n	80093a8 <_svfiprintf_r+0x1c0>
 80093d0:	0800b1c9 	.word	0x0800b1c9
 80093d4:	0800b1cf 	.word	0x0800b1cf
 80093d8:	0800b1d3 	.word	0x0800b1d3
 80093dc:	08007935 	.word	0x08007935
 80093e0:	08009129 	.word	0x08009129

080093e4 <__sfputc_r>:
 80093e4:	6893      	ldr	r3, [r2, #8]
 80093e6:	b510      	push	{r4, lr}
 80093e8:	3b01      	subs	r3, #1
 80093ea:	6093      	str	r3, [r2, #8]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	da04      	bge.n	80093fa <__sfputc_r+0x16>
 80093f0:	6994      	ldr	r4, [r2, #24]
 80093f2:	42a3      	cmp	r3, r4
 80093f4:	db07      	blt.n	8009406 <__sfputc_r+0x22>
 80093f6:	290a      	cmp	r1, #10
 80093f8:	d005      	beq.n	8009406 <__sfputc_r+0x22>
 80093fa:	6813      	ldr	r3, [r2, #0]
 80093fc:	1c58      	adds	r0, r3, #1
 80093fe:	6010      	str	r0, [r2, #0]
 8009400:	7019      	strb	r1, [r3, #0]
 8009402:	0008      	movs	r0, r1
 8009404:	bd10      	pop	{r4, pc}
 8009406:	f000 feb7 	bl	800a178 <__swbuf_r>
 800940a:	0001      	movs	r1, r0
 800940c:	e7f9      	b.n	8009402 <__sfputc_r+0x1e>

0800940e <__sfputs_r>:
 800940e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009410:	0006      	movs	r6, r0
 8009412:	000f      	movs	r7, r1
 8009414:	0014      	movs	r4, r2
 8009416:	18d5      	adds	r5, r2, r3
 8009418:	42ac      	cmp	r4, r5
 800941a:	d101      	bne.n	8009420 <__sfputs_r+0x12>
 800941c:	2000      	movs	r0, #0
 800941e:	e007      	b.n	8009430 <__sfputs_r+0x22>
 8009420:	7821      	ldrb	r1, [r4, #0]
 8009422:	003a      	movs	r2, r7
 8009424:	0030      	movs	r0, r6
 8009426:	f7ff ffdd 	bl	80093e4 <__sfputc_r>
 800942a:	3401      	adds	r4, #1
 800942c:	1c43      	adds	r3, r0, #1
 800942e:	d1f3      	bne.n	8009418 <__sfputs_r+0xa>
 8009430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009434 <_vfiprintf_r>:
 8009434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009436:	b0a1      	sub	sp, #132	@ 0x84
 8009438:	000f      	movs	r7, r1
 800943a:	0015      	movs	r5, r2
 800943c:	001e      	movs	r6, r3
 800943e:	9003      	str	r0, [sp, #12]
 8009440:	2800      	cmp	r0, #0
 8009442:	d004      	beq.n	800944e <_vfiprintf_r+0x1a>
 8009444:	6a03      	ldr	r3, [r0, #32]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d101      	bne.n	800944e <_vfiprintf_r+0x1a>
 800944a:	f7fe fef3 	bl	8008234 <__sinit>
 800944e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009450:	07db      	lsls	r3, r3, #31
 8009452:	d405      	bmi.n	8009460 <_vfiprintf_r+0x2c>
 8009454:	89bb      	ldrh	r3, [r7, #12]
 8009456:	059b      	lsls	r3, r3, #22
 8009458:	d402      	bmi.n	8009460 <_vfiprintf_r+0x2c>
 800945a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800945c:	f7fe ffd3 	bl	8008406 <__retarget_lock_acquire_recursive>
 8009460:	89bb      	ldrh	r3, [r7, #12]
 8009462:	071b      	lsls	r3, r3, #28
 8009464:	d502      	bpl.n	800946c <_vfiprintf_r+0x38>
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d113      	bne.n	8009494 <_vfiprintf_r+0x60>
 800946c:	0039      	movs	r1, r7
 800946e:	9803      	ldr	r0, [sp, #12]
 8009470:	f000 fec4 	bl	800a1fc <__swsetup_r>
 8009474:	2800      	cmp	r0, #0
 8009476:	d00d      	beq.n	8009494 <_vfiprintf_r+0x60>
 8009478:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800947a:	07db      	lsls	r3, r3, #31
 800947c:	d503      	bpl.n	8009486 <_vfiprintf_r+0x52>
 800947e:	2001      	movs	r0, #1
 8009480:	4240      	negs	r0, r0
 8009482:	b021      	add	sp, #132	@ 0x84
 8009484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009486:	89bb      	ldrh	r3, [r7, #12]
 8009488:	059b      	lsls	r3, r3, #22
 800948a:	d4f8      	bmi.n	800947e <_vfiprintf_r+0x4a>
 800948c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800948e:	f7fe ffbb 	bl	8008408 <__retarget_lock_release_recursive>
 8009492:	e7f4      	b.n	800947e <_vfiprintf_r+0x4a>
 8009494:	2300      	movs	r3, #0
 8009496:	ac08      	add	r4, sp, #32
 8009498:	6163      	str	r3, [r4, #20]
 800949a:	3320      	adds	r3, #32
 800949c:	7663      	strb	r3, [r4, #25]
 800949e:	3310      	adds	r3, #16
 80094a0:	76a3      	strb	r3, [r4, #26]
 80094a2:	9607      	str	r6, [sp, #28]
 80094a4:	002e      	movs	r6, r5
 80094a6:	7833      	ldrb	r3, [r6, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d001      	beq.n	80094b0 <_vfiprintf_r+0x7c>
 80094ac:	2b25      	cmp	r3, #37	@ 0x25
 80094ae:	d148      	bne.n	8009542 <_vfiprintf_r+0x10e>
 80094b0:	1b73      	subs	r3, r6, r5
 80094b2:	9305      	str	r3, [sp, #20]
 80094b4:	42ae      	cmp	r6, r5
 80094b6:	d00b      	beq.n	80094d0 <_vfiprintf_r+0x9c>
 80094b8:	002a      	movs	r2, r5
 80094ba:	0039      	movs	r1, r7
 80094bc:	9803      	ldr	r0, [sp, #12]
 80094be:	f7ff ffa6 	bl	800940e <__sfputs_r>
 80094c2:	3001      	adds	r0, #1
 80094c4:	d100      	bne.n	80094c8 <_vfiprintf_r+0x94>
 80094c6:	e0ae      	b.n	8009626 <_vfiprintf_r+0x1f2>
 80094c8:	6963      	ldr	r3, [r4, #20]
 80094ca:	9a05      	ldr	r2, [sp, #20]
 80094cc:	189b      	adds	r3, r3, r2
 80094ce:	6163      	str	r3, [r4, #20]
 80094d0:	7833      	ldrb	r3, [r6, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d100      	bne.n	80094d8 <_vfiprintf_r+0xa4>
 80094d6:	e0a6      	b.n	8009626 <_vfiprintf_r+0x1f2>
 80094d8:	2201      	movs	r2, #1
 80094da:	2300      	movs	r3, #0
 80094dc:	4252      	negs	r2, r2
 80094de:	6062      	str	r2, [r4, #4]
 80094e0:	a904      	add	r1, sp, #16
 80094e2:	3254      	adds	r2, #84	@ 0x54
 80094e4:	1852      	adds	r2, r2, r1
 80094e6:	1c75      	adds	r5, r6, #1
 80094e8:	6023      	str	r3, [r4, #0]
 80094ea:	60e3      	str	r3, [r4, #12]
 80094ec:	60a3      	str	r3, [r4, #8]
 80094ee:	7013      	strb	r3, [r2, #0]
 80094f0:	65a3      	str	r3, [r4, #88]	@ 0x58
 80094f2:	4b59      	ldr	r3, [pc, #356]	@ (8009658 <_vfiprintf_r+0x224>)
 80094f4:	2205      	movs	r2, #5
 80094f6:	0018      	movs	r0, r3
 80094f8:	7829      	ldrb	r1, [r5, #0]
 80094fa:	9305      	str	r3, [sp, #20]
 80094fc:	f7fe ff8a 	bl	8008414 <memchr>
 8009500:	1c6e      	adds	r6, r5, #1
 8009502:	2800      	cmp	r0, #0
 8009504:	d11f      	bne.n	8009546 <_vfiprintf_r+0x112>
 8009506:	6822      	ldr	r2, [r4, #0]
 8009508:	06d3      	lsls	r3, r2, #27
 800950a:	d504      	bpl.n	8009516 <_vfiprintf_r+0xe2>
 800950c:	2353      	movs	r3, #83	@ 0x53
 800950e:	a904      	add	r1, sp, #16
 8009510:	185b      	adds	r3, r3, r1
 8009512:	2120      	movs	r1, #32
 8009514:	7019      	strb	r1, [r3, #0]
 8009516:	0713      	lsls	r3, r2, #28
 8009518:	d504      	bpl.n	8009524 <_vfiprintf_r+0xf0>
 800951a:	2353      	movs	r3, #83	@ 0x53
 800951c:	a904      	add	r1, sp, #16
 800951e:	185b      	adds	r3, r3, r1
 8009520:	212b      	movs	r1, #43	@ 0x2b
 8009522:	7019      	strb	r1, [r3, #0]
 8009524:	782b      	ldrb	r3, [r5, #0]
 8009526:	2b2a      	cmp	r3, #42	@ 0x2a
 8009528:	d016      	beq.n	8009558 <_vfiprintf_r+0x124>
 800952a:	002e      	movs	r6, r5
 800952c:	2100      	movs	r1, #0
 800952e:	200a      	movs	r0, #10
 8009530:	68e3      	ldr	r3, [r4, #12]
 8009532:	7832      	ldrb	r2, [r6, #0]
 8009534:	1c75      	adds	r5, r6, #1
 8009536:	3a30      	subs	r2, #48	@ 0x30
 8009538:	2a09      	cmp	r2, #9
 800953a:	d950      	bls.n	80095de <_vfiprintf_r+0x1aa>
 800953c:	2900      	cmp	r1, #0
 800953e:	d111      	bne.n	8009564 <_vfiprintf_r+0x130>
 8009540:	e017      	b.n	8009572 <_vfiprintf_r+0x13e>
 8009542:	3601      	adds	r6, #1
 8009544:	e7af      	b.n	80094a6 <_vfiprintf_r+0x72>
 8009546:	9b05      	ldr	r3, [sp, #20]
 8009548:	6822      	ldr	r2, [r4, #0]
 800954a:	1ac0      	subs	r0, r0, r3
 800954c:	2301      	movs	r3, #1
 800954e:	4083      	lsls	r3, r0
 8009550:	4313      	orrs	r3, r2
 8009552:	0035      	movs	r5, r6
 8009554:	6023      	str	r3, [r4, #0]
 8009556:	e7cc      	b.n	80094f2 <_vfiprintf_r+0xbe>
 8009558:	9b07      	ldr	r3, [sp, #28]
 800955a:	1d19      	adds	r1, r3, #4
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	9107      	str	r1, [sp, #28]
 8009560:	2b00      	cmp	r3, #0
 8009562:	db01      	blt.n	8009568 <_vfiprintf_r+0x134>
 8009564:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009566:	e004      	b.n	8009572 <_vfiprintf_r+0x13e>
 8009568:	425b      	negs	r3, r3
 800956a:	60e3      	str	r3, [r4, #12]
 800956c:	2302      	movs	r3, #2
 800956e:	4313      	orrs	r3, r2
 8009570:	6023      	str	r3, [r4, #0]
 8009572:	7833      	ldrb	r3, [r6, #0]
 8009574:	2b2e      	cmp	r3, #46	@ 0x2e
 8009576:	d10c      	bne.n	8009592 <_vfiprintf_r+0x15e>
 8009578:	7873      	ldrb	r3, [r6, #1]
 800957a:	2b2a      	cmp	r3, #42	@ 0x2a
 800957c:	d134      	bne.n	80095e8 <_vfiprintf_r+0x1b4>
 800957e:	9b07      	ldr	r3, [sp, #28]
 8009580:	3602      	adds	r6, #2
 8009582:	1d1a      	adds	r2, r3, #4
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	9207      	str	r2, [sp, #28]
 8009588:	2b00      	cmp	r3, #0
 800958a:	da01      	bge.n	8009590 <_vfiprintf_r+0x15c>
 800958c:	2301      	movs	r3, #1
 800958e:	425b      	negs	r3, r3
 8009590:	9309      	str	r3, [sp, #36]	@ 0x24
 8009592:	4d32      	ldr	r5, [pc, #200]	@ (800965c <_vfiprintf_r+0x228>)
 8009594:	2203      	movs	r2, #3
 8009596:	0028      	movs	r0, r5
 8009598:	7831      	ldrb	r1, [r6, #0]
 800959a:	f7fe ff3b 	bl	8008414 <memchr>
 800959e:	2800      	cmp	r0, #0
 80095a0:	d006      	beq.n	80095b0 <_vfiprintf_r+0x17c>
 80095a2:	2340      	movs	r3, #64	@ 0x40
 80095a4:	1b40      	subs	r0, r0, r5
 80095a6:	4083      	lsls	r3, r0
 80095a8:	6822      	ldr	r2, [r4, #0]
 80095aa:	3601      	adds	r6, #1
 80095ac:	4313      	orrs	r3, r2
 80095ae:	6023      	str	r3, [r4, #0]
 80095b0:	7831      	ldrb	r1, [r6, #0]
 80095b2:	2206      	movs	r2, #6
 80095b4:	482a      	ldr	r0, [pc, #168]	@ (8009660 <_vfiprintf_r+0x22c>)
 80095b6:	1c75      	adds	r5, r6, #1
 80095b8:	7621      	strb	r1, [r4, #24]
 80095ba:	f7fe ff2b 	bl	8008414 <memchr>
 80095be:	2800      	cmp	r0, #0
 80095c0:	d040      	beq.n	8009644 <_vfiprintf_r+0x210>
 80095c2:	4b28      	ldr	r3, [pc, #160]	@ (8009664 <_vfiprintf_r+0x230>)
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d122      	bne.n	800960e <_vfiprintf_r+0x1da>
 80095c8:	2207      	movs	r2, #7
 80095ca:	9b07      	ldr	r3, [sp, #28]
 80095cc:	3307      	adds	r3, #7
 80095ce:	4393      	bics	r3, r2
 80095d0:	3308      	adds	r3, #8
 80095d2:	9307      	str	r3, [sp, #28]
 80095d4:	6963      	ldr	r3, [r4, #20]
 80095d6:	9a04      	ldr	r2, [sp, #16]
 80095d8:	189b      	adds	r3, r3, r2
 80095da:	6163      	str	r3, [r4, #20]
 80095dc:	e762      	b.n	80094a4 <_vfiprintf_r+0x70>
 80095de:	4343      	muls	r3, r0
 80095e0:	002e      	movs	r6, r5
 80095e2:	2101      	movs	r1, #1
 80095e4:	189b      	adds	r3, r3, r2
 80095e6:	e7a4      	b.n	8009532 <_vfiprintf_r+0xfe>
 80095e8:	2300      	movs	r3, #0
 80095ea:	200a      	movs	r0, #10
 80095ec:	0019      	movs	r1, r3
 80095ee:	3601      	adds	r6, #1
 80095f0:	6063      	str	r3, [r4, #4]
 80095f2:	7832      	ldrb	r2, [r6, #0]
 80095f4:	1c75      	adds	r5, r6, #1
 80095f6:	3a30      	subs	r2, #48	@ 0x30
 80095f8:	2a09      	cmp	r2, #9
 80095fa:	d903      	bls.n	8009604 <_vfiprintf_r+0x1d0>
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d0c8      	beq.n	8009592 <_vfiprintf_r+0x15e>
 8009600:	9109      	str	r1, [sp, #36]	@ 0x24
 8009602:	e7c6      	b.n	8009592 <_vfiprintf_r+0x15e>
 8009604:	4341      	muls	r1, r0
 8009606:	002e      	movs	r6, r5
 8009608:	2301      	movs	r3, #1
 800960a:	1889      	adds	r1, r1, r2
 800960c:	e7f1      	b.n	80095f2 <_vfiprintf_r+0x1be>
 800960e:	aa07      	add	r2, sp, #28
 8009610:	9200      	str	r2, [sp, #0]
 8009612:	0021      	movs	r1, r4
 8009614:	003a      	movs	r2, r7
 8009616:	4b14      	ldr	r3, [pc, #80]	@ (8009668 <_vfiprintf_r+0x234>)
 8009618:	9803      	ldr	r0, [sp, #12]
 800961a:	f7fe f98b 	bl	8007934 <_printf_float>
 800961e:	9004      	str	r0, [sp, #16]
 8009620:	9b04      	ldr	r3, [sp, #16]
 8009622:	3301      	adds	r3, #1
 8009624:	d1d6      	bne.n	80095d4 <_vfiprintf_r+0x1a0>
 8009626:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009628:	07db      	lsls	r3, r3, #31
 800962a:	d405      	bmi.n	8009638 <_vfiprintf_r+0x204>
 800962c:	89bb      	ldrh	r3, [r7, #12]
 800962e:	059b      	lsls	r3, r3, #22
 8009630:	d402      	bmi.n	8009638 <_vfiprintf_r+0x204>
 8009632:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009634:	f7fe fee8 	bl	8008408 <__retarget_lock_release_recursive>
 8009638:	89bb      	ldrh	r3, [r7, #12]
 800963a:	065b      	lsls	r3, r3, #25
 800963c:	d500      	bpl.n	8009640 <_vfiprintf_r+0x20c>
 800963e:	e71e      	b.n	800947e <_vfiprintf_r+0x4a>
 8009640:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009642:	e71e      	b.n	8009482 <_vfiprintf_r+0x4e>
 8009644:	aa07      	add	r2, sp, #28
 8009646:	9200      	str	r2, [sp, #0]
 8009648:	0021      	movs	r1, r4
 800964a:	003a      	movs	r2, r7
 800964c:	4b06      	ldr	r3, [pc, #24]	@ (8009668 <_vfiprintf_r+0x234>)
 800964e:	9803      	ldr	r0, [sp, #12]
 8009650:	f7fe fc1e 	bl	8007e90 <_printf_i>
 8009654:	e7e3      	b.n	800961e <_vfiprintf_r+0x1ea>
 8009656:	46c0      	nop			@ (mov r8, r8)
 8009658:	0800b1c9 	.word	0x0800b1c9
 800965c:	0800b1cf 	.word	0x0800b1cf
 8009660:	0800b1d3 	.word	0x0800b1d3
 8009664:	08007935 	.word	0x08007935
 8009668:	0800940f 	.word	0x0800940f

0800966c <malloc>:
 800966c:	b510      	push	{r4, lr}
 800966e:	4b03      	ldr	r3, [pc, #12]	@ (800967c <malloc+0x10>)
 8009670:	0001      	movs	r1, r0
 8009672:	6818      	ldr	r0, [r3, #0]
 8009674:	f000 f826 	bl	80096c4 <_malloc_r>
 8009678:	bd10      	pop	{r4, pc}
 800967a:	46c0      	nop			@ (mov r8, r8)
 800967c:	20000018 	.word	0x20000018

08009680 <sbrk_aligned>:
 8009680:	b570      	push	{r4, r5, r6, lr}
 8009682:	4e0f      	ldr	r6, [pc, #60]	@ (80096c0 <sbrk_aligned+0x40>)
 8009684:	000d      	movs	r5, r1
 8009686:	6831      	ldr	r1, [r6, #0]
 8009688:	0004      	movs	r4, r0
 800968a:	2900      	cmp	r1, #0
 800968c:	d102      	bne.n	8009694 <sbrk_aligned+0x14>
 800968e:	f000 feb9 	bl	800a404 <_sbrk_r>
 8009692:	6030      	str	r0, [r6, #0]
 8009694:	0029      	movs	r1, r5
 8009696:	0020      	movs	r0, r4
 8009698:	f000 feb4 	bl	800a404 <_sbrk_r>
 800969c:	1c43      	adds	r3, r0, #1
 800969e:	d103      	bne.n	80096a8 <sbrk_aligned+0x28>
 80096a0:	2501      	movs	r5, #1
 80096a2:	426d      	negs	r5, r5
 80096a4:	0028      	movs	r0, r5
 80096a6:	bd70      	pop	{r4, r5, r6, pc}
 80096a8:	2303      	movs	r3, #3
 80096aa:	1cc5      	adds	r5, r0, #3
 80096ac:	439d      	bics	r5, r3
 80096ae:	42a8      	cmp	r0, r5
 80096b0:	d0f8      	beq.n	80096a4 <sbrk_aligned+0x24>
 80096b2:	1a29      	subs	r1, r5, r0
 80096b4:	0020      	movs	r0, r4
 80096b6:	f000 fea5 	bl	800a404 <_sbrk_r>
 80096ba:	3001      	adds	r0, #1
 80096bc:	d1f2      	bne.n	80096a4 <sbrk_aligned+0x24>
 80096be:	e7ef      	b.n	80096a0 <sbrk_aligned+0x20>
 80096c0:	2000087c 	.word	0x2000087c

080096c4 <_malloc_r>:
 80096c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096c6:	2203      	movs	r2, #3
 80096c8:	1ccb      	adds	r3, r1, #3
 80096ca:	4393      	bics	r3, r2
 80096cc:	3308      	adds	r3, #8
 80096ce:	0005      	movs	r5, r0
 80096d0:	001f      	movs	r7, r3
 80096d2:	2b0c      	cmp	r3, #12
 80096d4:	d234      	bcs.n	8009740 <_malloc_r+0x7c>
 80096d6:	270c      	movs	r7, #12
 80096d8:	42b9      	cmp	r1, r7
 80096da:	d833      	bhi.n	8009744 <_malloc_r+0x80>
 80096dc:	0028      	movs	r0, r5
 80096de:	f000 f923 	bl	8009928 <__malloc_lock>
 80096e2:	4e37      	ldr	r6, [pc, #220]	@ (80097c0 <_malloc_r+0xfc>)
 80096e4:	6833      	ldr	r3, [r6, #0]
 80096e6:	001c      	movs	r4, r3
 80096e8:	2c00      	cmp	r4, #0
 80096ea:	d12f      	bne.n	800974c <_malloc_r+0x88>
 80096ec:	0039      	movs	r1, r7
 80096ee:	0028      	movs	r0, r5
 80096f0:	f7ff ffc6 	bl	8009680 <sbrk_aligned>
 80096f4:	0004      	movs	r4, r0
 80096f6:	1c43      	adds	r3, r0, #1
 80096f8:	d15f      	bne.n	80097ba <_malloc_r+0xf6>
 80096fa:	6834      	ldr	r4, [r6, #0]
 80096fc:	9400      	str	r4, [sp, #0]
 80096fe:	9b00      	ldr	r3, [sp, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d14a      	bne.n	800979a <_malloc_r+0xd6>
 8009704:	2c00      	cmp	r4, #0
 8009706:	d052      	beq.n	80097ae <_malloc_r+0xea>
 8009708:	6823      	ldr	r3, [r4, #0]
 800970a:	0028      	movs	r0, r5
 800970c:	18e3      	adds	r3, r4, r3
 800970e:	9900      	ldr	r1, [sp, #0]
 8009710:	9301      	str	r3, [sp, #4]
 8009712:	f000 fe77 	bl	800a404 <_sbrk_r>
 8009716:	9b01      	ldr	r3, [sp, #4]
 8009718:	4283      	cmp	r3, r0
 800971a:	d148      	bne.n	80097ae <_malloc_r+0xea>
 800971c:	6823      	ldr	r3, [r4, #0]
 800971e:	0028      	movs	r0, r5
 8009720:	1aff      	subs	r7, r7, r3
 8009722:	0039      	movs	r1, r7
 8009724:	f7ff ffac 	bl	8009680 <sbrk_aligned>
 8009728:	3001      	adds	r0, #1
 800972a:	d040      	beq.n	80097ae <_malloc_r+0xea>
 800972c:	6823      	ldr	r3, [r4, #0]
 800972e:	19db      	adds	r3, r3, r7
 8009730:	6023      	str	r3, [r4, #0]
 8009732:	6833      	ldr	r3, [r6, #0]
 8009734:	685a      	ldr	r2, [r3, #4]
 8009736:	2a00      	cmp	r2, #0
 8009738:	d133      	bne.n	80097a2 <_malloc_r+0xde>
 800973a:	9b00      	ldr	r3, [sp, #0]
 800973c:	6033      	str	r3, [r6, #0]
 800973e:	e019      	b.n	8009774 <_malloc_r+0xb0>
 8009740:	2b00      	cmp	r3, #0
 8009742:	dac9      	bge.n	80096d8 <_malloc_r+0x14>
 8009744:	230c      	movs	r3, #12
 8009746:	602b      	str	r3, [r5, #0]
 8009748:	2000      	movs	r0, #0
 800974a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800974c:	6821      	ldr	r1, [r4, #0]
 800974e:	1bc9      	subs	r1, r1, r7
 8009750:	d420      	bmi.n	8009794 <_malloc_r+0xd0>
 8009752:	290b      	cmp	r1, #11
 8009754:	d90a      	bls.n	800976c <_malloc_r+0xa8>
 8009756:	19e2      	adds	r2, r4, r7
 8009758:	6027      	str	r7, [r4, #0]
 800975a:	42a3      	cmp	r3, r4
 800975c:	d104      	bne.n	8009768 <_malloc_r+0xa4>
 800975e:	6032      	str	r2, [r6, #0]
 8009760:	6863      	ldr	r3, [r4, #4]
 8009762:	6011      	str	r1, [r2, #0]
 8009764:	6053      	str	r3, [r2, #4]
 8009766:	e005      	b.n	8009774 <_malloc_r+0xb0>
 8009768:	605a      	str	r2, [r3, #4]
 800976a:	e7f9      	b.n	8009760 <_malloc_r+0x9c>
 800976c:	6862      	ldr	r2, [r4, #4]
 800976e:	42a3      	cmp	r3, r4
 8009770:	d10e      	bne.n	8009790 <_malloc_r+0xcc>
 8009772:	6032      	str	r2, [r6, #0]
 8009774:	0028      	movs	r0, r5
 8009776:	f000 f8df 	bl	8009938 <__malloc_unlock>
 800977a:	0020      	movs	r0, r4
 800977c:	2207      	movs	r2, #7
 800977e:	300b      	adds	r0, #11
 8009780:	1d23      	adds	r3, r4, #4
 8009782:	4390      	bics	r0, r2
 8009784:	1ac2      	subs	r2, r0, r3
 8009786:	4298      	cmp	r0, r3
 8009788:	d0df      	beq.n	800974a <_malloc_r+0x86>
 800978a:	1a1b      	subs	r3, r3, r0
 800978c:	50a3      	str	r3, [r4, r2]
 800978e:	e7dc      	b.n	800974a <_malloc_r+0x86>
 8009790:	605a      	str	r2, [r3, #4]
 8009792:	e7ef      	b.n	8009774 <_malloc_r+0xb0>
 8009794:	0023      	movs	r3, r4
 8009796:	6864      	ldr	r4, [r4, #4]
 8009798:	e7a6      	b.n	80096e8 <_malloc_r+0x24>
 800979a:	9c00      	ldr	r4, [sp, #0]
 800979c:	6863      	ldr	r3, [r4, #4]
 800979e:	9300      	str	r3, [sp, #0]
 80097a0:	e7ad      	b.n	80096fe <_malloc_r+0x3a>
 80097a2:	001a      	movs	r2, r3
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	42a3      	cmp	r3, r4
 80097a8:	d1fb      	bne.n	80097a2 <_malloc_r+0xde>
 80097aa:	2300      	movs	r3, #0
 80097ac:	e7da      	b.n	8009764 <_malloc_r+0xa0>
 80097ae:	230c      	movs	r3, #12
 80097b0:	0028      	movs	r0, r5
 80097b2:	602b      	str	r3, [r5, #0]
 80097b4:	f000 f8c0 	bl	8009938 <__malloc_unlock>
 80097b8:	e7c6      	b.n	8009748 <_malloc_r+0x84>
 80097ba:	6007      	str	r7, [r0, #0]
 80097bc:	e7da      	b.n	8009774 <_malloc_r+0xb0>
 80097be:	46c0      	nop			@ (mov r8, r8)
 80097c0:	20000880 	.word	0x20000880

080097c4 <__sflush_r>:
 80097c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097c6:	220c      	movs	r2, #12
 80097c8:	5e8b      	ldrsh	r3, [r1, r2]
 80097ca:	0005      	movs	r5, r0
 80097cc:	000c      	movs	r4, r1
 80097ce:	071a      	lsls	r2, r3, #28
 80097d0:	d456      	bmi.n	8009880 <__sflush_r+0xbc>
 80097d2:	684a      	ldr	r2, [r1, #4]
 80097d4:	2a00      	cmp	r2, #0
 80097d6:	dc02      	bgt.n	80097de <__sflush_r+0x1a>
 80097d8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80097da:	2a00      	cmp	r2, #0
 80097dc:	dd4e      	ble.n	800987c <__sflush_r+0xb8>
 80097de:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80097e0:	2f00      	cmp	r7, #0
 80097e2:	d04b      	beq.n	800987c <__sflush_r+0xb8>
 80097e4:	2200      	movs	r2, #0
 80097e6:	2080      	movs	r0, #128	@ 0x80
 80097e8:	682e      	ldr	r6, [r5, #0]
 80097ea:	602a      	str	r2, [r5, #0]
 80097ec:	001a      	movs	r2, r3
 80097ee:	0140      	lsls	r0, r0, #5
 80097f0:	6a21      	ldr	r1, [r4, #32]
 80097f2:	4002      	ands	r2, r0
 80097f4:	4203      	tst	r3, r0
 80097f6:	d033      	beq.n	8009860 <__sflush_r+0x9c>
 80097f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80097fa:	89a3      	ldrh	r3, [r4, #12]
 80097fc:	075b      	lsls	r3, r3, #29
 80097fe:	d506      	bpl.n	800980e <__sflush_r+0x4a>
 8009800:	6863      	ldr	r3, [r4, #4]
 8009802:	1ad2      	subs	r2, r2, r3
 8009804:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009806:	2b00      	cmp	r3, #0
 8009808:	d001      	beq.n	800980e <__sflush_r+0x4a>
 800980a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800980c:	1ad2      	subs	r2, r2, r3
 800980e:	2300      	movs	r3, #0
 8009810:	0028      	movs	r0, r5
 8009812:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8009814:	6a21      	ldr	r1, [r4, #32]
 8009816:	47b8      	blx	r7
 8009818:	89a2      	ldrh	r2, [r4, #12]
 800981a:	1c43      	adds	r3, r0, #1
 800981c:	d106      	bne.n	800982c <__sflush_r+0x68>
 800981e:	6829      	ldr	r1, [r5, #0]
 8009820:	291d      	cmp	r1, #29
 8009822:	d846      	bhi.n	80098b2 <__sflush_r+0xee>
 8009824:	4b29      	ldr	r3, [pc, #164]	@ (80098cc <__sflush_r+0x108>)
 8009826:	40cb      	lsrs	r3, r1
 8009828:	07db      	lsls	r3, r3, #31
 800982a:	d542      	bpl.n	80098b2 <__sflush_r+0xee>
 800982c:	2300      	movs	r3, #0
 800982e:	6063      	str	r3, [r4, #4]
 8009830:	6923      	ldr	r3, [r4, #16]
 8009832:	6023      	str	r3, [r4, #0]
 8009834:	04d2      	lsls	r2, r2, #19
 8009836:	d505      	bpl.n	8009844 <__sflush_r+0x80>
 8009838:	1c43      	adds	r3, r0, #1
 800983a:	d102      	bne.n	8009842 <__sflush_r+0x7e>
 800983c:	682b      	ldr	r3, [r5, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d100      	bne.n	8009844 <__sflush_r+0x80>
 8009842:	6560      	str	r0, [r4, #84]	@ 0x54
 8009844:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009846:	602e      	str	r6, [r5, #0]
 8009848:	2900      	cmp	r1, #0
 800984a:	d017      	beq.n	800987c <__sflush_r+0xb8>
 800984c:	0023      	movs	r3, r4
 800984e:	3344      	adds	r3, #68	@ 0x44
 8009850:	4299      	cmp	r1, r3
 8009852:	d002      	beq.n	800985a <__sflush_r+0x96>
 8009854:	0028      	movs	r0, r5
 8009856:	f000 fe6b 	bl	800a530 <_free_r>
 800985a:	2300      	movs	r3, #0
 800985c:	6363      	str	r3, [r4, #52]	@ 0x34
 800985e:	e00d      	b.n	800987c <__sflush_r+0xb8>
 8009860:	2301      	movs	r3, #1
 8009862:	0028      	movs	r0, r5
 8009864:	47b8      	blx	r7
 8009866:	0002      	movs	r2, r0
 8009868:	1c43      	adds	r3, r0, #1
 800986a:	d1c6      	bne.n	80097fa <__sflush_r+0x36>
 800986c:	682b      	ldr	r3, [r5, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d0c3      	beq.n	80097fa <__sflush_r+0x36>
 8009872:	2b1d      	cmp	r3, #29
 8009874:	d001      	beq.n	800987a <__sflush_r+0xb6>
 8009876:	2b16      	cmp	r3, #22
 8009878:	d11a      	bne.n	80098b0 <__sflush_r+0xec>
 800987a:	602e      	str	r6, [r5, #0]
 800987c:	2000      	movs	r0, #0
 800987e:	e01e      	b.n	80098be <__sflush_r+0xfa>
 8009880:	690e      	ldr	r6, [r1, #16]
 8009882:	2e00      	cmp	r6, #0
 8009884:	d0fa      	beq.n	800987c <__sflush_r+0xb8>
 8009886:	680f      	ldr	r7, [r1, #0]
 8009888:	600e      	str	r6, [r1, #0]
 800988a:	1bba      	subs	r2, r7, r6
 800988c:	9201      	str	r2, [sp, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	079b      	lsls	r3, r3, #30
 8009892:	d100      	bne.n	8009896 <__sflush_r+0xd2>
 8009894:	694a      	ldr	r2, [r1, #20]
 8009896:	60a2      	str	r2, [r4, #8]
 8009898:	9b01      	ldr	r3, [sp, #4]
 800989a:	2b00      	cmp	r3, #0
 800989c:	ddee      	ble.n	800987c <__sflush_r+0xb8>
 800989e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80098a0:	0032      	movs	r2, r6
 80098a2:	001f      	movs	r7, r3
 80098a4:	0028      	movs	r0, r5
 80098a6:	9b01      	ldr	r3, [sp, #4]
 80098a8:	6a21      	ldr	r1, [r4, #32]
 80098aa:	47b8      	blx	r7
 80098ac:	2800      	cmp	r0, #0
 80098ae:	dc07      	bgt.n	80098c0 <__sflush_r+0xfc>
 80098b0:	89a2      	ldrh	r2, [r4, #12]
 80098b2:	2340      	movs	r3, #64	@ 0x40
 80098b4:	2001      	movs	r0, #1
 80098b6:	4313      	orrs	r3, r2
 80098b8:	b21b      	sxth	r3, r3
 80098ba:	81a3      	strh	r3, [r4, #12]
 80098bc:	4240      	negs	r0, r0
 80098be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80098c0:	9b01      	ldr	r3, [sp, #4]
 80098c2:	1836      	adds	r6, r6, r0
 80098c4:	1a1b      	subs	r3, r3, r0
 80098c6:	9301      	str	r3, [sp, #4]
 80098c8:	e7e6      	b.n	8009898 <__sflush_r+0xd4>
 80098ca:	46c0      	nop			@ (mov r8, r8)
 80098cc:	20400001 	.word	0x20400001

080098d0 <_fflush_r>:
 80098d0:	690b      	ldr	r3, [r1, #16]
 80098d2:	b570      	push	{r4, r5, r6, lr}
 80098d4:	0005      	movs	r5, r0
 80098d6:	000c      	movs	r4, r1
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d102      	bne.n	80098e2 <_fflush_r+0x12>
 80098dc:	2500      	movs	r5, #0
 80098de:	0028      	movs	r0, r5
 80098e0:	bd70      	pop	{r4, r5, r6, pc}
 80098e2:	2800      	cmp	r0, #0
 80098e4:	d004      	beq.n	80098f0 <_fflush_r+0x20>
 80098e6:	6a03      	ldr	r3, [r0, #32]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d101      	bne.n	80098f0 <_fflush_r+0x20>
 80098ec:	f7fe fca2 	bl	8008234 <__sinit>
 80098f0:	220c      	movs	r2, #12
 80098f2:	5ea3      	ldrsh	r3, [r4, r2]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d0f1      	beq.n	80098dc <_fflush_r+0xc>
 80098f8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80098fa:	07d2      	lsls	r2, r2, #31
 80098fc:	d404      	bmi.n	8009908 <_fflush_r+0x38>
 80098fe:	059b      	lsls	r3, r3, #22
 8009900:	d402      	bmi.n	8009908 <_fflush_r+0x38>
 8009902:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009904:	f7fe fd7f 	bl	8008406 <__retarget_lock_acquire_recursive>
 8009908:	0028      	movs	r0, r5
 800990a:	0021      	movs	r1, r4
 800990c:	f7ff ff5a 	bl	80097c4 <__sflush_r>
 8009910:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009912:	0005      	movs	r5, r0
 8009914:	07db      	lsls	r3, r3, #31
 8009916:	d4e2      	bmi.n	80098de <_fflush_r+0xe>
 8009918:	89a3      	ldrh	r3, [r4, #12]
 800991a:	059b      	lsls	r3, r3, #22
 800991c:	d4df      	bmi.n	80098de <_fflush_r+0xe>
 800991e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009920:	f7fe fd72 	bl	8008408 <__retarget_lock_release_recursive>
 8009924:	e7db      	b.n	80098de <_fflush_r+0xe>
	...

08009928 <__malloc_lock>:
 8009928:	b510      	push	{r4, lr}
 800992a:	4802      	ldr	r0, [pc, #8]	@ (8009934 <__malloc_lock+0xc>)
 800992c:	f7fe fd6b 	bl	8008406 <__retarget_lock_acquire_recursive>
 8009930:	bd10      	pop	{r4, pc}
 8009932:	46c0      	nop			@ (mov r8, r8)
 8009934:	20000878 	.word	0x20000878

08009938 <__malloc_unlock>:
 8009938:	b510      	push	{r4, lr}
 800993a:	4802      	ldr	r0, [pc, #8]	@ (8009944 <__malloc_unlock+0xc>)
 800993c:	f7fe fd64 	bl	8008408 <__retarget_lock_release_recursive>
 8009940:	bd10      	pop	{r4, pc}
 8009942:	46c0      	nop			@ (mov r8, r8)
 8009944:	20000878 	.word	0x20000878

08009948 <_Balloc>:
 8009948:	b570      	push	{r4, r5, r6, lr}
 800994a:	69c5      	ldr	r5, [r0, #28]
 800994c:	0006      	movs	r6, r0
 800994e:	000c      	movs	r4, r1
 8009950:	2d00      	cmp	r5, #0
 8009952:	d10e      	bne.n	8009972 <_Balloc+0x2a>
 8009954:	2010      	movs	r0, #16
 8009956:	f7ff fe89 	bl	800966c <malloc>
 800995a:	1e02      	subs	r2, r0, #0
 800995c:	61f0      	str	r0, [r6, #28]
 800995e:	d104      	bne.n	800996a <_Balloc+0x22>
 8009960:	216b      	movs	r1, #107	@ 0x6b
 8009962:	4b19      	ldr	r3, [pc, #100]	@ (80099c8 <_Balloc+0x80>)
 8009964:	4819      	ldr	r0, [pc, #100]	@ (80099cc <_Balloc+0x84>)
 8009966:	f000 fd97 	bl	800a498 <__assert_func>
 800996a:	6045      	str	r5, [r0, #4]
 800996c:	6085      	str	r5, [r0, #8]
 800996e:	6005      	str	r5, [r0, #0]
 8009970:	60c5      	str	r5, [r0, #12]
 8009972:	69f5      	ldr	r5, [r6, #28]
 8009974:	68eb      	ldr	r3, [r5, #12]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d013      	beq.n	80099a2 <_Balloc+0x5a>
 800997a:	69f3      	ldr	r3, [r6, #28]
 800997c:	00a2      	lsls	r2, r4, #2
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	189b      	adds	r3, r3, r2
 8009982:	6818      	ldr	r0, [r3, #0]
 8009984:	2800      	cmp	r0, #0
 8009986:	d118      	bne.n	80099ba <_Balloc+0x72>
 8009988:	2101      	movs	r1, #1
 800998a:	000d      	movs	r5, r1
 800998c:	40a5      	lsls	r5, r4
 800998e:	1d6a      	adds	r2, r5, #5
 8009990:	0030      	movs	r0, r6
 8009992:	0092      	lsls	r2, r2, #2
 8009994:	f000 fd9e 	bl	800a4d4 <_calloc_r>
 8009998:	2800      	cmp	r0, #0
 800999a:	d00c      	beq.n	80099b6 <_Balloc+0x6e>
 800999c:	6044      	str	r4, [r0, #4]
 800999e:	6085      	str	r5, [r0, #8]
 80099a0:	e00d      	b.n	80099be <_Balloc+0x76>
 80099a2:	2221      	movs	r2, #33	@ 0x21
 80099a4:	2104      	movs	r1, #4
 80099a6:	0030      	movs	r0, r6
 80099a8:	f000 fd94 	bl	800a4d4 <_calloc_r>
 80099ac:	69f3      	ldr	r3, [r6, #28]
 80099ae:	60e8      	str	r0, [r5, #12]
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1e1      	bne.n	800997a <_Balloc+0x32>
 80099b6:	2000      	movs	r0, #0
 80099b8:	bd70      	pop	{r4, r5, r6, pc}
 80099ba:	6802      	ldr	r2, [r0, #0]
 80099bc:	601a      	str	r2, [r3, #0]
 80099be:	2300      	movs	r3, #0
 80099c0:	6103      	str	r3, [r0, #16]
 80099c2:	60c3      	str	r3, [r0, #12]
 80099c4:	e7f8      	b.n	80099b8 <_Balloc+0x70>
 80099c6:	46c0      	nop			@ (mov r8, r8)
 80099c8:	0800b149 	.word	0x0800b149
 80099cc:	0800b1da 	.word	0x0800b1da

080099d0 <_Bfree>:
 80099d0:	b570      	push	{r4, r5, r6, lr}
 80099d2:	69c6      	ldr	r6, [r0, #28]
 80099d4:	0005      	movs	r5, r0
 80099d6:	000c      	movs	r4, r1
 80099d8:	2e00      	cmp	r6, #0
 80099da:	d10e      	bne.n	80099fa <_Bfree+0x2a>
 80099dc:	2010      	movs	r0, #16
 80099de:	f7ff fe45 	bl	800966c <malloc>
 80099e2:	1e02      	subs	r2, r0, #0
 80099e4:	61e8      	str	r0, [r5, #28]
 80099e6:	d104      	bne.n	80099f2 <_Bfree+0x22>
 80099e8:	218f      	movs	r1, #143	@ 0x8f
 80099ea:	4b09      	ldr	r3, [pc, #36]	@ (8009a10 <_Bfree+0x40>)
 80099ec:	4809      	ldr	r0, [pc, #36]	@ (8009a14 <_Bfree+0x44>)
 80099ee:	f000 fd53 	bl	800a498 <__assert_func>
 80099f2:	6046      	str	r6, [r0, #4]
 80099f4:	6086      	str	r6, [r0, #8]
 80099f6:	6006      	str	r6, [r0, #0]
 80099f8:	60c6      	str	r6, [r0, #12]
 80099fa:	2c00      	cmp	r4, #0
 80099fc:	d007      	beq.n	8009a0e <_Bfree+0x3e>
 80099fe:	69eb      	ldr	r3, [r5, #28]
 8009a00:	6862      	ldr	r2, [r4, #4]
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	0092      	lsls	r2, r2, #2
 8009a06:	189b      	adds	r3, r3, r2
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	6022      	str	r2, [r4, #0]
 8009a0c:	601c      	str	r4, [r3, #0]
 8009a0e:	bd70      	pop	{r4, r5, r6, pc}
 8009a10:	0800b149 	.word	0x0800b149
 8009a14:	0800b1da 	.word	0x0800b1da

08009a18 <__multadd>:
 8009a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a1a:	000f      	movs	r7, r1
 8009a1c:	9001      	str	r0, [sp, #4]
 8009a1e:	000c      	movs	r4, r1
 8009a20:	001e      	movs	r6, r3
 8009a22:	2000      	movs	r0, #0
 8009a24:	690d      	ldr	r5, [r1, #16]
 8009a26:	3714      	adds	r7, #20
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	3001      	adds	r0, #1
 8009a2c:	b299      	uxth	r1, r3
 8009a2e:	4351      	muls	r1, r2
 8009a30:	0c1b      	lsrs	r3, r3, #16
 8009a32:	4353      	muls	r3, r2
 8009a34:	1989      	adds	r1, r1, r6
 8009a36:	0c0e      	lsrs	r6, r1, #16
 8009a38:	199b      	adds	r3, r3, r6
 8009a3a:	0c1e      	lsrs	r6, r3, #16
 8009a3c:	b289      	uxth	r1, r1
 8009a3e:	041b      	lsls	r3, r3, #16
 8009a40:	185b      	adds	r3, r3, r1
 8009a42:	c708      	stmia	r7!, {r3}
 8009a44:	4285      	cmp	r5, r0
 8009a46:	dcef      	bgt.n	8009a28 <__multadd+0x10>
 8009a48:	2e00      	cmp	r6, #0
 8009a4a:	d022      	beq.n	8009a92 <__multadd+0x7a>
 8009a4c:	68a3      	ldr	r3, [r4, #8]
 8009a4e:	42ab      	cmp	r3, r5
 8009a50:	dc19      	bgt.n	8009a86 <__multadd+0x6e>
 8009a52:	6861      	ldr	r1, [r4, #4]
 8009a54:	9801      	ldr	r0, [sp, #4]
 8009a56:	3101      	adds	r1, #1
 8009a58:	f7ff ff76 	bl	8009948 <_Balloc>
 8009a5c:	1e07      	subs	r7, r0, #0
 8009a5e:	d105      	bne.n	8009a6c <__multadd+0x54>
 8009a60:	003a      	movs	r2, r7
 8009a62:	21ba      	movs	r1, #186	@ 0xba
 8009a64:	4b0c      	ldr	r3, [pc, #48]	@ (8009a98 <__multadd+0x80>)
 8009a66:	480d      	ldr	r0, [pc, #52]	@ (8009a9c <__multadd+0x84>)
 8009a68:	f000 fd16 	bl	800a498 <__assert_func>
 8009a6c:	0021      	movs	r1, r4
 8009a6e:	6922      	ldr	r2, [r4, #16]
 8009a70:	310c      	adds	r1, #12
 8009a72:	3202      	adds	r2, #2
 8009a74:	0092      	lsls	r2, r2, #2
 8009a76:	300c      	adds	r0, #12
 8009a78:	f7fe fcd7 	bl	800842a <memcpy>
 8009a7c:	0021      	movs	r1, r4
 8009a7e:	9801      	ldr	r0, [sp, #4]
 8009a80:	f7ff ffa6 	bl	80099d0 <_Bfree>
 8009a84:	003c      	movs	r4, r7
 8009a86:	1d2b      	adds	r3, r5, #4
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	18e3      	adds	r3, r4, r3
 8009a8c:	3501      	adds	r5, #1
 8009a8e:	605e      	str	r6, [r3, #4]
 8009a90:	6125      	str	r5, [r4, #16]
 8009a92:	0020      	movs	r0, r4
 8009a94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009a96:	46c0      	nop			@ (mov r8, r8)
 8009a98:	0800b1b8 	.word	0x0800b1b8
 8009a9c:	0800b1da 	.word	0x0800b1da

08009aa0 <__hi0bits>:
 8009aa0:	2280      	movs	r2, #128	@ 0x80
 8009aa2:	0003      	movs	r3, r0
 8009aa4:	0252      	lsls	r2, r2, #9
 8009aa6:	2000      	movs	r0, #0
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d201      	bcs.n	8009ab0 <__hi0bits+0x10>
 8009aac:	041b      	lsls	r3, r3, #16
 8009aae:	3010      	adds	r0, #16
 8009ab0:	2280      	movs	r2, #128	@ 0x80
 8009ab2:	0452      	lsls	r2, r2, #17
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d201      	bcs.n	8009abc <__hi0bits+0x1c>
 8009ab8:	3008      	adds	r0, #8
 8009aba:	021b      	lsls	r3, r3, #8
 8009abc:	2280      	movs	r2, #128	@ 0x80
 8009abe:	0552      	lsls	r2, r2, #21
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d201      	bcs.n	8009ac8 <__hi0bits+0x28>
 8009ac4:	3004      	adds	r0, #4
 8009ac6:	011b      	lsls	r3, r3, #4
 8009ac8:	2280      	movs	r2, #128	@ 0x80
 8009aca:	05d2      	lsls	r2, r2, #23
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d201      	bcs.n	8009ad4 <__hi0bits+0x34>
 8009ad0:	3002      	adds	r0, #2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	db03      	blt.n	8009ae0 <__hi0bits+0x40>
 8009ad8:	3001      	adds	r0, #1
 8009ada:	4213      	tst	r3, r2
 8009adc:	d100      	bne.n	8009ae0 <__hi0bits+0x40>
 8009ade:	2020      	movs	r0, #32
 8009ae0:	4770      	bx	lr

08009ae2 <__lo0bits>:
 8009ae2:	6803      	ldr	r3, [r0, #0]
 8009ae4:	0001      	movs	r1, r0
 8009ae6:	2207      	movs	r2, #7
 8009ae8:	0018      	movs	r0, r3
 8009aea:	4010      	ands	r0, r2
 8009aec:	4213      	tst	r3, r2
 8009aee:	d00d      	beq.n	8009b0c <__lo0bits+0x2a>
 8009af0:	3a06      	subs	r2, #6
 8009af2:	2000      	movs	r0, #0
 8009af4:	4213      	tst	r3, r2
 8009af6:	d105      	bne.n	8009b04 <__lo0bits+0x22>
 8009af8:	3002      	adds	r0, #2
 8009afa:	4203      	tst	r3, r0
 8009afc:	d003      	beq.n	8009b06 <__lo0bits+0x24>
 8009afe:	40d3      	lsrs	r3, r2
 8009b00:	0010      	movs	r0, r2
 8009b02:	600b      	str	r3, [r1, #0]
 8009b04:	4770      	bx	lr
 8009b06:	089b      	lsrs	r3, r3, #2
 8009b08:	600b      	str	r3, [r1, #0]
 8009b0a:	e7fb      	b.n	8009b04 <__lo0bits+0x22>
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	2a00      	cmp	r2, #0
 8009b10:	d101      	bne.n	8009b16 <__lo0bits+0x34>
 8009b12:	2010      	movs	r0, #16
 8009b14:	0c1b      	lsrs	r3, r3, #16
 8009b16:	b2da      	uxtb	r2, r3
 8009b18:	2a00      	cmp	r2, #0
 8009b1a:	d101      	bne.n	8009b20 <__lo0bits+0x3e>
 8009b1c:	3008      	adds	r0, #8
 8009b1e:	0a1b      	lsrs	r3, r3, #8
 8009b20:	071a      	lsls	r2, r3, #28
 8009b22:	d101      	bne.n	8009b28 <__lo0bits+0x46>
 8009b24:	3004      	adds	r0, #4
 8009b26:	091b      	lsrs	r3, r3, #4
 8009b28:	079a      	lsls	r2, r3, #30
 8009b2a:	d101      	bne.n	8009b30 <__lo0bits+0x4e>
 8009b2c:	3002      	adds	r0, #2
 8009b2e:	089b      	lsrs	r3, r3, #2
 8009b30:	07da      	lsls	r2, r3, #31
 8009b32:	d4e9      	bmi.n	8009b08 <__lo0bits+0x26>
 8009b34:	3001      	adds	r0, #1
 8009b36:	085b      	lsrs	r3, r3, #1
 8009b38:	d1e6      	bne.n	8009b08 <__lo0bits+0x26>
 8009b3a:	2020      	movs	r0, #32
 8009b3c:	e7e2      	b.n	8009b04 <__lo0bits+0x22>
	...

08009b40 <__i2b>:
 8009b40:	b510      	push	{r4, lr}
 8009b42:	000c      	movs	r4, r1
 8009b44:	2101      	movs	r1, #1
 8009b46:	f7ff feff 	bl	8009948 <_Balloc>
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	d107      	bne.n	8009b5e <__i2b+0x1e>
 8009b4e:	2146      	movs	r1, #70	@ 0x46
 8009b50:	4c05      	ldr	r4, [pc, #20]	@ (8009b68 <__i2b+0x28>)
 8009b52:	0002      	movs	r2, r0
 8009b54:	4b05      	ldr	r3, [pc, #20]	@ (8009b6c <__i2b+0x2c>)
 8009b56:	0020      	movs	r0, r4
 8009b58:	31ff      	adds	r1, #255	@ 0xff
 8009b5a:	f000 fc9d 	bl	800a498 <__assert_func>
 8009b5e:	2301      	movs	r3, #1
 8009b60:	6144      	str	r4, [r0, #20]
 8009b62:	6103      	str	r3, [r0, #16]
 8009b64:	bd10      	pop	{r4, pc}
 8009b66:	46c0      	nop			@ (mov r8, r8)
 8009b68:	0800b1da 	.word	0x0800b1da
 8009b6c:	0800b1b8 	.word	0x0800b1b8

08009b70 <__multiply>:
 8009b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b72:	0014      	movs	r4, r2
 8009b74:	690a      	ldr	r2, [r1, #16]
 8009b76:	6923      	ldr	r3, [r4, #16]
 8009b78:	000d      	movs	r5, r1
 8009b7a:	b089      	sub	sp, #36	@ 0x24
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	db02      	blt.n	8009b86 <__multiply+0x16>
 8009b80:	0023      	movs	r3, r4
 8009b82:	000c      	movs	r4, r1
 8009b84:	001d      	movs	r5, r3
 8009b86:	6927      	ldr	r7, [r4, #16]
 8009b88:	692e      	ldr	r6, [r5, #16]
 8009b8a:	6861      	ldr	r1, [r4, #4]
 8009b8c:	19bb      	adds	r3, r7, r6
 8009b8e:	9300      	str	r3, [sp, #0]
 8009b90:	68a3      	ldr	r3, [r4, #8]
 8009b92:	19ba      	adds	r2, r7, r6
 8009b94:	4293      	cmp	r3, r2
 8009b96:	da00      	bge.n	8009b9a <__multiply+0x2a>
 8009b98:	3101      	adds	r1, #1
 8009b9a:	f7ff fed5 	bl	8009948 <_Balloc>
 8009b9e:	4684      	mov	ip, r0
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	d106      	bne.n	8009bb2 <__multiply+0x42>
 8009ba4:	21b1      	movs	r1, #177	@ 0xb1
 8009ba6:	4662      	mov	r2, ip
 8009ba8:	4b44      	ldr	r3, [pc, #272]	@ (8009cbc <__multiply+0x14c>)
 8009baa:	4845      	ldr	r0, [pc, #276]	@ (8009cc0 <__multiply+0x150>)
 8009bac:	0049      	lsls	r1, r1, #1
 8009bae:	f000 fc73 	bl	800a498 <__assert_func>
 8009bb2:	0002      	movs	r2, r0
 8009bb4:	19bb      	adds	r3, r7, r6
 8009bb6:	3214      	adds	r2, #20
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	18d3      	adds	r3, r2, r3
 8009bbc:	9301      	str	r3, [sp, #4]
 8009bbe:	2100      	movs	r1, #0
 8009bc0:	0013      	movs	r3, r2
 8009bc2:	9801      	ldr	r0, [sp, #4]
 8009bc4:	4283      	cmp	r3, r0
 8009bc6:	d328      	bcc.n	8009c1a <__multiply+0xaa>
 8009bc8:	0023      	movs	r3, r4
 8009bca:	00bf      	lsls	r7, r7, #2
 8009bcc:	3314      	adds	r3, #20
 8009bce:	9304      	str	r3, [sp, #16]
 8009bd0:	3514      	adds	r5, #20
 8009bd2:	19db      	adds	r3, r3, r7
 8009bd4:	00b6      	lsls	r6, r6, #2
 8009bd6:	9302      	str	r3, [sp, #8]
 8009bd8:	19ab      	adds	r3, r5, r6
 8009bda:	9307      	str	r3, [sp, #28]
 8009bdc:	2304      	movs	r3, #4
 8009bde:	9305      	str	r3, [sp, #20]
 8009be0:	0023      	movs	r3, r4
 8009be2:	9902      	ldr	r1, [sp, #8]
 8009be4:	3315      	adds	r3, #21
 8009be6:	4299      	cmp	r1, r3
 8009be8:	d305      	bcc.n	8009bf6 <__multiply+0x86>
 8009bea:	1b0c      	subs	r4, r1, r4
 8009bec:	3c15      	subs	r4, #21
 8009bee:	08a4      	lsrs	r4, r4, #2
 8009bf0:	3401      	adds	r4, #1
 8009bf2:	00a3      	lsls	r3, r4, #2
 8009bf4:	9305      	str	r3, [sp, #20]
 8009bf6:	9b07      	ldr	r3, [sp, #28]
 8009bf8:	429d      	cmp	r5, r3
 8009bfa:	d310      	bcc.n	8009c1e <__multiply+0xae>
 8009bfc:	9b00      	ldr	r3, [sp, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	dd05      	ble.n	8009c0e <__multiply+0x9e>
 8009c02:	9b01      	ldr	r3, [sp, #4]
 8009c04:	3b04      	subs	r3, #4
 8009c06:	9301      	str	r3, [sp, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d052      	beq.n	8009cb4 <__multiply+0x144>
 8009c0e:	4663      	mov	r3, ip
 8009c10:	4660      	mov	r0, ip
 8009c12:	9a00      	ldr	r2, [sp, #0]
 8009c14:	611a      	str	r2, [r3, #16]
 8009c16:	b009      	add	sp, #36	@ 0x24
 8009c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c1a:	c302      	stmia	r3!, {r1}
 8009c1c:	e7d1      	b.n	8009bc2 <__multiply+0x52>
 8009c1e:	682c      	ldr	r4, [r5, #0]
 8009c20:	b2a4      	uxth	r4, r4
 8009c22:	2c00      	cmp	r4, #0
 8009c24:	d01f      	beq.n	8009c66 <__multiply+0xf6>
 8009c26:	2300      	movs	r3, #0
 8009c28:	0017      	movs	r7, r2
 8009c2a:	9e04      	ldr	r6, [sp, #16]
 8009c2c:	9303      	str	r3, [sp, #12]
 8009c2e:	ce08      	ldmia	r6!, {r3}
 8009c30:	6839      	ldr	r1, [r7, #0]
 8009c32:	9306      	str	r3, [sp, #24]
 8009c34:	466b      	mov	r3, sp
 8009c36:	8b1b      	ldrh	r3, [r3, #24]
 8009c38:	b288      	uxth	r0, r1
 8009c3a:	4363      	muls	r3, r4
 8009c3c:	181b      	adds	r3, r3, r0
 8009c3e:	9803      	ldr	r0, [sp, #12]
 8009c40:	0c09      	lsrs	r1, r1, #16
 8009c42:	181b      	adds	r3, r3, r0
 8009c44:	9806      	ldr	r0, [sp, #24]
 8009c46:	0c00      	lsrs	r0, r0, #16
 8009c48:	4360      	muls	r0, r4
 8009c4a:	1840      	adds	r0, r0, r1
 8009c4c:	0c19      	lsrs	r1, r3, #16
 8009c4e:	1841      	adds	r1, r0, r1
 8009c50:	0c08      	lsrs	r0, r1, #16
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	0409      	lsls	r1, r1, #16
 8009c56:	4319      	orrs	r1, r3
 8009c58:	9b02      	ldr	r3, [sp, #8]
 8009c5a:	9003      	str	r0, [sp, #12]
 8009c5c:	c702      	stmia	r7!, {r1}
 8009c5e:	42b3      	cmp	r3, r6
 8009c60:	d8e5      	bhi.n	8009c2e <__multiply+0xbe>
 8009c62:	9b05      	ldr	r3, [sp, #20]
 8009c64:	50d0      	str	r0, [r2, r3]
 8009c66:	682c      	ldr	r4, [r5, #0]
 8009c68:	0c24      	lsrs	r4, r4, #16
 8009c6a:	d020      	beq.n	8009cae <__multiply+0x13e>
 8009c6c:	2100      	movs	r1, #0
 8009c6e:	0010      	movs	r0, r2
 8009c70:	6813      	ldr	r3, [r2, #0]
 8009c72:	9e04      	ldr	r6, [sp, #16]
 8009c74:	9103      	str	r1, [sp, #12]
 8009c76:	6831      	ldr	r1, [r6, #0]
 8009c78:	6807      	ldr	r7, [r0, #0]
 8009c7a:	b289      	uxth	r1, r1
 8009c7c:	4361      	muls	r1, r4
 8009c7e:	0c3f      	lsrs	r7, r7, #16
 8009c80:	19c9      	adds	r1, r1, r7
 8009c82:	9f03      	ldr	r7, [sp, #12]
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	19c9      	adds	r1, r1, r7
 8009c88:	040f      	lsls	r7, r1, #16
 8009c8a:	431f      	orrs	r7, r3
 8009c8c:	6007      	str	r7, [r0, #0]
 8009c8e:	ce80      	ldmia	r6!, {r7}
 8009c90:	6843      	ldr	r3, [r0, #4]
 8009c92:	0c3f      	lsrs	r7, r7, #16
 8009c94:	4367      	muls	r7, r4
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	0c09      	lsrs	r1, r1, #16
 8009c9a:	18fb      	adds	r3, r7, r3
 8009c9c:	185b      	adds	r3, r3, r1
 8009c9e:	0c19      	lsrs	r1, r3, #16
 8009ca0:	9103      	str	r1, [sp, #12]
 8009ca2:	9902      	ldr	r1, [sp, #8]
 8009ca4:	3004      	adds	r0, #4
 8009ca6:	42b1      	cmp	r1, r6
 8009ca8:	d8e5      	bhi.n	8009c76 <__multiply+0x106>
 8009caa:	9905      	ldr	r1, [sp, #20]
 8009cac:	5053      	str	r3, [r2, r1]
 8009cae:	3504      	adds	r5, #4
 8009cb0:	3204      	adds	r2, #4
 8009cb2:	e7a0      	b.n	8009bf6 <__multiply+0x86>
 8009cb4:	9b00      	ldr	r3, [sp, #0]
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	9300      	str	r3, [sp, #0]
 8009cba:	e79f      	b.n	8009bfc <__multiply+0x8c>
 8009cbc:	0800b1b8 	.word	0x0800b1b8
 8009cc0:	0800b1da 	.word	0x0800b1da

08009cc4 <__pow5mult>:
 8009cc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cc6:	2303      	movs	r3, #3
 8009cc8:	0015      	movs	r5, r2
 8009cca:	0007      	movs	r7, r0
 8009ccc:	000e      	movs	r6, r1
 8009cce:	401a      	ands	r2, r3
 8009cd0:	421d      	tst	r5, r3
 8009cd2:	d008      	beq.n	8009ce6 <__pow5mult+0x22>
 8009cd4:	4925      	ldr	r1, [pc, #148]	@ (8009d6c <__pow5mult+0xa8>)
 8009cd6:	3a01      	subs	r2, #1
 8009cd8:	0092      	lsls	r2, r2, #2
 8009cda:	5852      	ldr	r2, [r2, r1]
 8009cdc:	2300      	movs	r3, #0
 8009cde:	0031      	movs	r1, r6
 8009ce0:	f7ff fe9a 	bl	8009a18 <__multadd>
 8009ce4:	0006      	movs	r6, r0
 8009ce6:	10ad      	asrs	r5, r5, #2
 8009ce8:	d03d      	beq.n	8009d66 <__pow5mult+0xa2>
 8009cea:	69fc      	ldr	r4, [r7, #28]
 8009cec:	2c00      	cmp	r4, #0
 8009cee:	d10f      	bne.n	8009d10 <__pow5mult+0x4c>
 8009cf0:	2010      	movs	r0, #16
 8009cf2:	f7ff fcbb 	bl	800966c <malloc>
 8009cf6:	1e02      	subs	r2, r0, #0
 8009cf8:	61f8      	str	r0, [r7, #28]
 8009cfa:	d105      	bne.n	8009d08 <__pow5mult+0x44>
 8009cfc:	21b4      	movs	r1, #180	@ 0xb4
 8009cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8009d70 <__pow5mult+0xac>)
 8009d00:	481c      	ldr	r0, [pc, #112]	@ (8009d74 <__pow5mult+0xb0>)
 8009d02:	31ff      	adds	r1, #255	@ 0xff
 8009d04:	f000 fbc8 	bl	800a498 <__assert_func>
 8009d08:	6044      	str	r4, [r0, #4]
 8009d0a:	6084      	str	r4, [r0, #8]
 8009d0c:	6004      	str	r4, [r0, #0]
 8009d0e:	60c4      	str	r4, [r0, #12]
 8009d10:	69fb      	ldr	r3, [r7, #28]
 8009d12:	689c      	ldr	r4, [r3, #8]
 8009d14:	9301      	str	r3, [sp, #4]
 8009d16:	2c00      	cmp	r4, #0
 8009d18:	d108      	bne.n	8009d2c <__pow5mult+0x68>
 8009d1a:	0038      	movs	r0, r7
 8009d1c:	4916      	ldr	r1, [pc, #88]	@ (8009d78 <__pow5mult+0xb4>)
 8009d1e:	f7ff ff0f 	bl	8009b40 <__i2b>
 8009d22:	9b01      	ldr	r3, [sp, #4]
 8009d24:	0004      	movs	r4, r0
 8009d26:	6098      	str	r0, [r3, #8]
 8009d28:	2300      	movs	r3, #0
 8009d2a:	6003      	str	r3, [r0, #0]
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	421d      	tst	r5, r3
 8009d30:	d00a      	beq.n	8009d48 <__pow5mult+0x84>
 8009d32:	0031      	movs	r1, r6
 8009d34:	0022      	movs	r2, r4
 8009d36:	0038      	movs	r0, r7
 8009d38:	f7ff ff1a 	bl	8009b70 <__multiply>
 8009d3c:	0031      	movs	r1, r6
 8009d3e:	9001      	str	r0, [sp, #4]
 8009d40:	0038      	movs	r0, r7
 8009d42:	f7ff fe45 	bl	80099d0 <_Bfree>
 8009d46:	9e01      	ldr	r6, [sp, #4]
 8009d48:	106d      	asrs	r5, r5, #1
 8009d4a:	d00c      	beq.n	8009d66 <__pow5mult+0xa2>
 8009d4c:	6820      	ldr	r0, [r4, #0]
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	d107      	bne.n	8009d62 <__pow5mult+0x9e>
 8009d52:	0022      	movs	r2, r4
 8009d54:	0021      	movs	r1, r4
 8009d56:	0038      	movs	r0, r7
 8009d58:	f7ff ff0a 	bl	8009b70 <__multiply>
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	6020      	str	r0, [r4, #0]
 8009d60:	6003      	str	r3, [r0, #0]
 8009d62:	0004      	movs	r4, r0
 8009d64:	e7e2      	b.n	8009d2c <__pow5mult+0x68>
 8009d66:	0030      	movs	r0, r6
 8009d68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009d6a:	46c0      	nop			@ (mov r8, r8)
 8009d6c:	0800b27c 	.word	0x0800b27c
 8009d70:	0800b149 	.word	0x0800b149
 8009d74:	0800b1da 	.word	0x0800b1da
 8009d78:	00000271 	.word	0x00000271

08009d7c <__lshift>:
 8009d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d7e:	000c      	movs	r4, r1
 8009d80:	0016      	movs	r6, r2
 8009d82:	6923      	ldr	r3, [r4, #16]
 8009d84:	1157      	asrs	r7, r2, #5
 8009d86:	b085      	sub	sp, #20
 8009d88:	18fb      	adds	r3, r7, r3
 8009d8a:	9301      	str	r3, [sp, #4]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	9300      	str	r3, [sp, #0]
 8009d90:	6849      	ldr	r1, [r1, #4]
 8009d92:	68a3      	ldr	r3, [r4, #8]
 8009d94:	9002      	str	r0, [sp, #8]
 8009d96:	9a00      	ldr	r2, [sp, #0]
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	db10      	blt.n	8009dbe <__lshift+0x42>
 8009d9c:	9802      	ldr	r0, [sp, #8]
 8009d9e:	f7ff fdd3 	bl	8009948 <_Balloc>
 8009da2:	2300      	movs	r3, #0
 8009da4:	0001      	movs	r1, r0
 8009da6:	0005      	movs	r5, r0
 8009da8:	001a      	movs	r2, r3
 8009daa:	3114      	adds	r1, #20
 8009dac:	4298      	cmp	r0, r3
 8009dae:	d10c      	bne.n	8009dca <__lshift+0x4e>
 8009db0:	21ef      	movs	r1, #239	@ 0xef
 8009db2:	002a      	movs	r2, r5
 8009db4:	4b25      	ldr	r3, [pc, #148]	@ (8009e4c <__lshift+0xd0>)
 8009db6:	4826      	ldr	r0, [pc, #152]	@ (8009e50 <__lshift+0xd4>)
 8009db8:	0049      	lsls	r1, r1, #1
 8009dba:	f000 fb6d 	bl	800a498 <__assert_func>
 8009dbe:	3101      	adds	r1, #1
 8009dc0:	005b      	lsls	r3, r3, #1
 8009dc2:	e7e8      	b.n	8009d96 <__lshift+0x1a>
 8009dc4:	0098      	lsls	r0, r3, #2
 8009dc6:	500a      	str	r2, [r1, r0]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	42bb      	cmp	r3, r7
 8009dcc:	dbfa      	blt.n	8009dc4 <__lshift+0x48>
 8009dce:	43fb      	mvns	r3, r7
 8009dd0:	17db      	asrs	r3, r3, #31
 8009dd2:	401f      	ands	r7, r3
 8009dd4:	00bf      	lsls	r7, r7, #2
 8009dd6:	0023      	movs	r3, r4
 8009dd8:	201f      	movs	r0, #31
 8009dda:	19c9      	adds	r1, r1, r7
 8009ddc:	0037      	movs	r7, r6
 8009dde:	6922      	ldr	r2, [r4, #16]
 8009de0:	3314      	adds	r3, #20
 8009de2:	0092      	lsls	r2, r2, #2
 8009de4:	189a      	adds	r2, r3, r2
 8009de6:	4007      	ands	r7, r0
 8009de8:	4206      	tst	r6, r0
 8009dea:	d029      	beq.n	8009e40 <__lshift+0xc4>
 8009dec:	3001      	adds	r0, #1
 8009dee:	1bc0      	subs	r0, r0, r7
 8009df0:	9003      	str	r0, [sp, #12]
 8009df2:	468c      	mov	ip, r1
 8009df4:	2000      	movs	r0, #0
 8009df6:	681e      	ldr	r6, [r3, #0]
 8009df8:	40be      	lsls	r6, r7
 8009dfa:	4306      	orrs	r6, r0
 8009dfc:	4660      	mov	r0, ip
 8009dfe:	c040      	stmia	r0!, {r6}
 8009e00:	4684      	mov	ip, r0
 8009e02:	9e03      	ldr	r6, [sp, #12]
 8009e04:	cb01      	ldmia	r3!, {r0}
 8009e06:	40f0      	lsrs	r0, r6
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d8f4      	bhi.n	8009df6 <__lshift+0x7a>
 8009e0c:	0026      	movs	r6, r4
 8009e0e:	3615      	adds	r6, #21
 8009e10:	2304      	movs	r3, #4
 8009e12:	42b2      	cmp	r2, r6
 8009e14:	d304      	bcc.n	8009e20 <__lshift+0xa4>
 8009e16:	1b13      	subs	r3, r2, r4
 8009e18:	3b15      	subs	r3, #21
 8009e1a:	089b      	lsrs	r3, r3, #2
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	50c8      	str	r0, [r1, r3]
 8009e22:	2800      	cmp	r0, #0
 8009e24:	d002      	beq.n	8009e2c <__lshift+0xb0>
 8009e26:	9b01      	ldr	r3, [sp, #4]
 8009e28:	3302      	adds	r3, #2
 8009e2a:	9300      	str	r3, [sp, #0]
 8009e2c:	9b00      	ldr	r3, [sp, #0]
 8009e2e:	9802      	ldr	r0, [sp, #8]
 8009e30:	3b01      	subs	r3, #1
 8009e32:	0021      	movs	r1, r4
 8009e34:	612b      	str	r3, [r5, #16]
 8009e36:	f7ff fdcb 	bl	80099d0 <_Bfree>
 8009e3a:	0028      	movs	r0, r5
 8009e3c:	b005      	add	sp, #20
 8009e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e40:	cb01      	ldmia	r3!, {r0}
 8009e42:	c101      	stmia	r1!, {r0}
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d8fb      	bhi.n	8009e40 <__lshift+0xc4>
 8009e48:	e7f0      	b.n	8009e2c <__lshift+0xb0>
 8009e4a:	46c0      	nop			@ (mov r8, r8)
 8009e4c:	0800b1b8 	.word	0x0800b1b8
 8009e50:	0800b1da 	.word	0x0800b1da

08009e54 <__mcmp>:
 8009e54:	b530      	push	{r4, r5, lr}
 8009e56:	690b      	ldr	r3, [r1, #16]
 8009e58:	6904      	ldr	r4, [r0, #16]
 8009e5a:	0002      	movs	r2, r0
 8009e5c:	1ae0      	subs	r0, r4, r3
 8009e5e:	429c      	cmp	r4, r3
 8009e60:	d10f      	bne.n	8009e82 <__mcmp+0x2e>
 8009e62:	3214      	adds	r2, #20
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	3114      	adds	r1, #20
 8009e68:	0014      	movs	r4, r2
 8009e6a:	18c9      	adds	r1, r1, r3
 8009e6c:	18d2      	adds	r2, r2, r3
 8009e6e:	3a04      	subs	r2, #4
 8009e70:	3904      	subs	r1, #4
 8009e72:	6815      	ldr	r5, [r2, #0]
 8009e74:	680b      	ldr	r3, [r1, #0]
 8009e76:	429d      	cmp	r5, r3
 8009e78:	d004      	beq.n	8009e84 <__mcmp+0x30>
 8009e7a:	2001      	movs	r0, #1
 8009e7c:	429d      	cmp	r5, r3
 8009e7e:	d200      	bcs.n	8009e82 <__mcmp+0x2e>
 8009e80:	3802      	subs	r0, #2
 8009e82:	bd30      	pop	{r4, r5, pc}
 8009e84:	4294      	cmp	r4, r2
 8009e86:	d3f2      	bcc.n	8009e6e <__mcmp+0x1a>
 8009e88:	e7fb      	b.n	8009e82 <__mcmp+0x2e>
	...

08009e8c <__mdiff>:
 8009e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e8e:	000c      	movs	r4, r1
 8009e90:	b087      	sub	sp, #28
 8009e92:	9000      	str	r0, [sp, #0]
 8009e94:	0011      	movs	r1, r2
 8009e96:	0020      	movs	r0, r4
 8009e98:	0017      	movs	r7, r2
 8009e9a:	f7ff ffdb 	bl	8009e54 <__mcmp>
 8009e9e:	1e05      	subs	r5, r0, #0
 8009ea0:	d110      	bne.n	8009ec4 <__mdiff+0x38>
 8009ea2:	0001      	movs	r1, r0
 8009ea4:	9800      	ldr	r0, [sp, #0]
 8009ea6:	f7ff fd4f 	bl	8009948 <_Balloc>
 8009eaa:	1e02      	subs	r2, r0, #0
 8009eac:	d104      	bne.n	8009eb8 <__mdiff+0x2c>
 8009eae:	4b40      	ldr	r3, [pc, #256]	@ (8009fb0 <__mdiff+0x124>)
 8009eb0:	4840      	ldr	r0, [pc, #256]	@ (8009fb4 <__mdiff+0x128>)
 8009eb2:	4941      	ldr	r1, [pc, #260]	@ (8009fb8 <__mdiff+0x12c>)
 8009eb4:	f000 faf0 	bl	800a498 <__assert_func>
 8009eb8:	2301      	movs	r3, #1
 8009eba:	6145      	str	r5, [r0, #20]
 8009ebc:	6103      	str	r3, [r0, #16]
 8009ebe:	0010      	movs	r0, r2
 8009ec0:	b007      	add	sp, #28
 8009ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ec4:	2600      	movs	r6, #0
 8009ec6:	42b0      	cmp	r0, r6
 8009ec8:	da03      	bge.n	8009ed2 <__mdiff+0x46>
 8009eca:	0023      	movs	r3, r4
 8009ecc:	003c      	movs	r4, r7
 8009ece:	001f      	movs	r7, r3
 8009ed0:	3601      	adds	r6, #1
 8009ed2:	6861      	ldr	r1, [r4, #4]
 8009ed4:	9800      	ldr	r0, [sp, #0]
 8009ed6:	f7ff fd37 	bl	8009948 <_Balloc>
 8009eda:	1e02      	subs	r2, r0, #0
 8009edc:	d103      	bne.n	8009ee6 <__mdiff+0x5a>
 8009ede:	4b34      	ldr	r3, [pc, #208]	@ (8009fb0 <__mdiff+0x124>)
 8009ee0:	4834      	ldr	r0, [pc, #208]	@ (8009fb4 <__mdiff+0x128>)
 8009ee2:	4936      	ldr	r1, [pc, #216]	@ (8009fbc <__mdiff+0x130>)
 8009ee4:	e7e6      	b.n	8009eb4 <__mdiff+0x28>
 8009ee6:	6923      	ldr	r3, [r4, #16]
 8009ee8:	3414      	adds	r4, #20
 8009eea:	9300      	str	r3, [sp, #0]
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	18e3      	adds	r3, r4, r3
 8009ef0:	0021      	movs	r1, r4
 8009ef2:	9401      	str	r4, [sp, #4]
 8009ef4:	003c      	movs	r4, r7
 8009ef6:	9302      	str	r3, [sp, #8]
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	3414      	adds	r4, #20
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	18e3      	adds	r3, r4, r3
 8009f00:	9303      	str	r3, [sp, #12]
 8009f02:	0003      	movs	r3, r0
 8009f04:	60c6      	str	r6, [r0, #12]
 8009f06:	468c      	mov	ip, r1
 8009f08:	2000      	movs	r0, #0
 8009f0a:	3314      	adds	r3, #20
 8009f0c:	9304      	str	r3, [sp, #16]
 8009f0e:	9305      	str	r3, [sp, #20]
 8009f10:	4663      	mov	r3, ip
 8009f12:	cb20      	ldmia	r3!, {r5}
 8009f14:	b2a9      	uxth	r1, r5
 8009f16:	000e      	movs	r6, r1
 8009f18:	469c      	mov	ip, r3
 8009f1a:	cc08      	ldmia	r4!, {r3}
 8009f1c:	0c2d      	lsrs	r5, r5, #16
 8009f1e:	b299      	uxth	r1, r3
 8009f20:	1a71      	subs	r1, r6, r1
 8009f22:	1809      	adds	r1, r1, r0
 8009f24:	0c1b      	lsrs	r3, r3, #16
 8009f26:	1408      	asrs	r0, r1, #16
 8009f28:	1aeb      	subs	r3, r5, r3
 8009f2a:	181b      	adds	r3, r3, r0
 8009f2c:	1418      	asrs	r0, r3, #16
 8009f2e:	b289      	uxth	r1, r1
 8009f30:	041b      	lsls	r3, r3, #16
 8009f32:	4319      	orrs	r1, r3
 8009f34:	9b05      	ldr	r3, [sp, #20]
 8009f36:	c302      	stmia	r3!, {r1}
 8009f38:	9305      	str	r3, [sp, #20]
 8009f3a:	9b03      	ldr	r3, [sp, #12]
 8009f3c:	42a3      	cmp	r3, r4
 8009f3e:	d8e7      	bhi.n	8009f10 <__mdiff+0x84>
 8009f40:	0039      	movs	r1, r7
 8009f42:	9c03      	ldr	r4, [sp, #12]
 8009f44:	3115      	adds	r1, #21
 8009f46:	2304      	movs	r3, #4
 8009f48:	428c      	cmp	r4, r1
 8009f4a:	d304      	bcc.n	8009f56 <__mdiff+0xca>
 8009f4c:	1be3      	subs	r3, r4, r7
 8009f4e:	3b15      	subs	r3, #21
 8009f50:	089b      	lsrs	r3, r3, #2
 8009f52:	3301      	adds	r3, #1
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	9901      	ldr	r1, [sp, #4]
 8009f58:	18cd      	adds	r5, r1, r3
 8009f5a:	9904      	ldr	r1, [sp, #16]
 8009f5c:	002e      	movs	r6, r5
 8009f5e:	18cb      	adds	r3, r1, r3
 8009f60:	001f      	movs	r7, r3
 8009f62:	9902      	ldr	r1, [sp, #8]
 8009f64:	428e      	cmp	r6, r1
 8009f66:	d311      	bcc.n	8009f8c <__mdiff+0x100>
 8009f68:	9c02      	ldr	r4, [sp, #8]
 8009f6a:	1ee9      	subs	r1, r5, #3
 8009f6c:	2000      	movs	r0, #0
 8009f6e:	428c      	cmp	r4, r1
 8009f70:	d304      	bcc.n	8009f7c <__mdiff+0xf0>
 8009f72:	0021      	movs	r1, r4
 8009f74:	3103      	adds	r1, #3
 8009f76:	1b49      	subs	r1, r1, r5
 8009f78:	0889      	lsrs	r1, r1, #2
 8009f7a:	0088      	lsls	r0, r1, #2
 8009f7c:	181b      	adds	r3, r3, r0
 8009f7e:	3b04      	subs	r3, #4
 8009f80:	6819      	ldr	r1, [r3, #0]
 8009f82:	2900      	cmp	r1, #0
 8009f84:	d010      	beq.n	8009fa8 <__mdiff+0x11c>
 8009f86:	9b00      	ldr	r3, [sp, #0]
 8009f88:	6113      	str	r3, [r2, #16]
 8009f8a:	e798      	b.n	8009ebe <__mdiff+0x32>
 8009f8c:	4684      	mov	ip, r0
 8009f8e:	ce02      	ldmia	r6!, {r1}
 8009f90:	b288      	uxth	r0, r1
 8009f92:	4460      	add	r0, ip
 8009f94:	1400      	asrs	r0, r0, #16
 8009f96:	0c0c      	lsrs	r4, r1, #16
 8009f98:	1904      	adds	r4, r0, r4
 8009f9a:	4461      	add	r1, ip
 8009f9c:	1420      	asrs	r0, r4, #16
 8009f9e:	b289      	uxth	r1, r1
 8009fa0:	0424      	lsls	r4, r4, #16
 8009fa2:	4321      	orrs	r1, r4
 8009fa4:	c702      	stmia	r7!, {r1}
 8009fa6:	e7dc      	b.n	8009f62 <__mdiff+0xd6>
 8009fa8:	9900      	ldr	r1, [sp, #0]
 8009faa:	3901      	subs	r1, #1
 8009fac:	9100      	str	r1, [sp, #0]
 8009fae:	e7e6      	b.n	8009f7e <__mdiff+0xf2>
 8009fb0:	0800b1b8 	.word	0x0800b1b8
 8009fb4:	0800b1da 	.word	0x0800b1da
 8009fb8:	00000237 	.word	0x00000237
 8009fbc:	00000245 	.word	0x00000245

08009fc0 <__d2b>:
 8009fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fc2:	2101      	movs	r1, #1
 8009fc4:	0016      	movs	r6, r2
 8009fc6:	001f      	movs	r7, r3
 8009fc8:	f7ff fcbe 	bl	8009948 <_Balloc>
 8009fcc:	1e04      	subs	r4, r0, #0
 8009fce:	d105      	bne.n	8009fdc <__d2b+0x1c>
 8009fd0:	0022      	movs	r2, r4
 8009fd2:	4b25      	ldr	r3, [pc, #148]	@ (800a068 <__d2b+0xa8>)
 8009fd4:	4825      	ldr	r0, [pc, #148]	@ (800a06c <__d2b+0xac>)
 8009fd6:	4926      	ldr	r1, [pc, #152]	@ (800a070 <__d2b+0xb0>)
 8009fd8:	f000 fa5e 	bl	800a498 <__assert_func>
 8009fdc:	033b      	lsls	r3, r7, #12
 8009fde:	007d      	lsls	r5, r7, #1
 8009fe0:	0b1b      	lsrs	r3, r3, #12
 8009fe2:	0d6d      	lsrs	r5, r5, #21
 8009fe4:	d002      	beq.n	8009fec <__d2b+0x2c>
 8009fe6:	2280      	movs	r2, #128	@ 0x80
 8009fe8:	0352      	lsls	r2, r2, #13
 8009fea:	4313      	orrs	r3, r2
 8009fec:	9301      	str	r3, [sp, #4]
 8009fee:	2e00      	cmp	r6, #0
 8009ff0:	d025      	beq.n	800a03e <__d2b+0x7e>
 8009ff2:	4668      	mov	r0, sp
 8009ff4:	9600      	str	r6, [sp, #0]
 8009ff6:	f7ff fd74 	bl	8009ae2 <__lo0bits>
 8009ffa:	9b01      	ldr	r3, [sp, #4]
 8009ffc:	9900      	ldr	r1, [sp, #0]
 8009ffe:	2800      	cmp	r0, #0
 800a000:	d01b      	beq.n	800a03a <__d2b+0x7a>
 800a002:	2220      	movs	r2, #32
 800a004:	001e      	movs	r6, r3
 800a006:	1a12      	subs	r2, r2, r0
 800a008:	4096      	lsls	r6, r2
 800a00a:	0032      	movs	r2, r6
 800a00c:	40c3      	lsrs	r3, r0
 800a00e:	430a      	orrs	r2, r1
 800a010:	6162      	str	r2, [r4, #20]
 800a012:	9301      	str	r3, [sp, #4]
 800a014:	9e01      	ldr	r6, [sp, #4]
 800a016:	61a6      	str	r6, [r4, #24]
 800a018:	1e73      	subs	r3, r6, #1
 800a01a:	419e      	sbcs	r6, r3
 800a01c:	3601      	adds	r6, #1
 800a01e:	6126      	str	r6, [r4, #16]
 800a020:	2d00      	cmp	r5, #0
 800a022:	d014      	beq.n	800a04e <__d2b+0x8e>
 800a024:	2635      	movs	r6, #53	@ 0x35
 800a026:	4b13      	ldr	r3, [pc, #76]	@ (800a074 <__d2b+0xb4>)
 800a028:	18ed      	adds	r5, r5, r3
 800a02a:	9b08      	ldr	r3, [sp, #32]
 800a02c:	182d      	adds	r5, r5, r0
 800a02e:	601d      	str	r5, [r3, #0]
 800a030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a032:	1a36      	subs	r6, r6, r0
 800a034:	601e      	str	r6, [r3, #0]
 800a036:	0020      	movs	r0, r4
 800a038:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a03a:	6161      	str	r1, [r4, #20]
 800a03c:	e7ea      	b.n	800a014 <__d2b+0x54>
 800a03e:	a801      	add	r0, sp, #4
 800a040:	f7ff fd4f 	bl	8009ae2 <__lo0bits>
 800a044:	9b01      	ldr	r3, [sp, #4]
 800a046:	2601      	movs	r6, #1
 800a048:	6163      	str	r3, [r4, #20]
 800a04a:	3020      	adds	r0, #32
 800a04c:	e7e7      	b.n	800a01e <__d2b+0x5e>
 800a04e:	4b0a      	ldr	r3, [pc, #40]	@ (800a078 <__d2b+0xb8>)
 800a050:	18c0      	adds	r0, r0, r3
 800a052:	9b08      	ldr	r3, [sp, #32]
 800a054:	6018      	str	r0, [r3, #0]
 800a056:	4b09      	ldr	r3, [pc, #36]	@ (800a07c <__d2b+0xbc>)
 800a058:	18f3      	adds	r3, r6, r3
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	18e3      	adds	r3, r4, r3
 800a05e:	6958      	ldr	r0, [r3, #20]
 800a060:	f7ff fd1e 	bl	8009aa0 <__hi0bits>
 800a064:	0176      	lsls	r6, r6, #5
 800a066:	e7e3      	b.n	800a030 <__d2b+0x70>
 800a068:	0800b1b8 	.word	0x0800b1b8
 800a06c:	0800b1da 	.word	0x0800b1da
 800a070:	0000030f 	.word	0x0000030f
 800a074:	fffffbcd 	.word	0xfffffbcd
 800a078:	fffffbce 	.word	0xfffffbce
 800a07c:	3fffffff 	.word	0x3fffffff

0800a080 <__sread>:
 800a080:	b570      	push	{r4, r5, r6, lr}
 800a082:	000c      	movs	r4, r1
 800a084:	250e      	movs	r5, #14
 800a086:	5f49      	ldrsh	r1, [r1, r5]
 800a088:	f000 f9a8 	bl	800a3dc <_read_r>
 800a08c:	2800      	cmp	r0, #0
 800a08e:	db03      	blt.n	800a098 <__sread+0x18>
 800a090:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a092:	181b      	adds	r3, r3, r0
 800a094:	6563      	str	r3, [r4, #84]	@ 0x54
 800a096:	bd70      	pop	{r4, r5, r6, pc}
 800a098:	89a3      	ldrh	r3, [r4, #12]
 800a09a:	4a02      	ldr	r2, [pc, #8]	@ (800a0a4 <__sread+0x24>)
 800a09c:	4013      	ands	r3, r2
 800a09e:	81a3      	strh	r3, [r4, #12]
 800a0a0:	e7f9      	b.n	800a096 <__sread+0x16>
 800a0a2:	46c0      	nop			@ (mov r8, r8)
 800a0a4:	ffffefff 	.word	0xffffefff

0800a0a8 <__swrite>:
 800a0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0aa:	001f      	movs	r7, r3
 800a0ac:	898b      	ldrh	r3, [r1, #12]
 800a0ae:	0005      	movs	r5, r0
 800a0b0:	000c      	movs	r4, r1
 800a0b2:	0016      	movs	r6, r2
 800a0b4:	05db      	lsls	r3, r3, #23
 800a0b6:	d505      	bpl.n	800a0c4 <__swrite+0x1c>
 800a0b8:	230e      	movs	r3, #14
 800a0ba:	5ec9      	ldrsh	r1, [r1, r3]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	2302      	movs	r3, #2
 800a0c0:	f000 f978 	bl	800a3b4 <_lseek_r>
 800a0c4:	89a3      	ldrh	r3, [r4, #12]
 800a0c6:	4a05      	ldr	r2, [pc, #20]	@ (800a0dc <__swrite+0x34>)
 800a0c8:	0028      	movs	r0, r5
 800a0ca:	4013      	ands	r3, r2
 800a0cc:	81a3      	strh	r3, [r4, #12]
 800a0ce:	0032      	movs	r2, r6
 800a0d0:	230e      	movs	r3, #14
 800a0d2:	5ee1      	ldrsh	r1, [r4, r3]
 800a0d4:	003b      	movs	r3, r7
 800a0d6:	f000 f9a7 	bl	800a428 <_write_r>
 800a0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0dc:	ffffefff 	.word	0xffffefff

0800a0e0 <__sseek>:
 800a0e0:	b570      	push	{r4, r5, r6, lr}
 800a0e2:	000c      	movs	r4, r1
 800a0e4:	250e      	movs	r5, #14
 800a0e6:	5f49      	ldrsh	r1, [r1, r5]
 800a0e8:	f000 f964 	bl	800a3b4 <_lseek_r>
 800a0ec:	89a3      	ldrh	r3, [r4, #12]
 800a0ee:	1c42      	adds	r2, r0, #1
 800a0f0:	d103      	bne.n	800a0fa <__sseek+0x1a>
 800a0f2:	4a05      	ldr	r2, [pc, #20]	@ (800a108 <__sseek+0x28>)
 800a0f4:	4013      	ands	r3, r2
 800a0f6:	81a3      	strh	r3, [r4, #12]
 800a0f8:	bd70      	pop	{r4, r5, r6, pc}
 800a0fa:	2280      	movs	r2, #128	@ 0x80
 800a0fc:	0152      	lsls	r2, r2, #5
 800a0fe:	4313      	orrs	r3, r2
 800a100:	81a3      	strh	r3, [r4, #12]
 800a102:	6560      	str	r0, [r4, #84]	@ 0x54
 800a104:	e7f8      	b.n	800a0f8 <__sseek+0x18>
 800a106:	46c0      	nop			@ (mov r8, r8)
 800a108:	ffffefff 	.word	0xffffefff

0800a10c <__sclose>:
 800a10c:	b510      	push	{r4, lr}
 800a10e:	230e      	movs	r3, #14
 800a110:	5ec9      	ldrsh	r1, [r1, r3]
 800a112:	f000 f99d 	bl	800a450 <_close_r>
 800a116:	bd10      	pop	{r4, pc}

0800a118 <_realloc_r>:
 800a118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a11a:	0006      	movs	r6, r0
 800a11c:	000c      	movs	r4, r1
 800a11e:	0015      	movs	r5, r2
 800a120:	2900      	cmp	r1, #0
 800a122:	d105      	bne.n	800a130 <_realloc_r+0x18>
 800a124:	0011      	movs	r1, r2
 800a126:	f7ff facd 	bl	80096c4 <_malloc_r>
 800a12a:	0004      	movs	r4, r0
 800a12c:	0020      	movs	r0, r4
 800a12e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a130:	2a00      	cmp	r2, #0
 800a132:	d103      	bne.n	800a13c <_realloc_r+0x24>
 800a134:	f000 f9fc 	bl	800a530 <_free_r>
 800a138:	002c      	movs	r4, r5
 800a13a:	e7f7      	b.n	800a12c <_realloc_r+0x14>
 800a13c:	f000 fa54 	bl	800a5e8 <_malloc_usable_size_r>
 800a140:	0007      	movs	r7, r0
 800a142:	4285      	cmp	r5, r0
 800a144:	d802      	bhi.n	800a14c <_realloc_r+0x34>
 800a146:	0843      	lsrs	r3, r0, #1
 800a148:	42ab      	cmp	r3, r5
 800a14a:	d3ef      	bcc.n	800a12c <_realloc_r+0x14>
 800a14c:	0029      	movs	r1, r5
 800a14e:	0030      	movs	r0, r6
 800a150:	f7ff fab8 	bl	80096c4 <_malloc_r>
 800a154:	9001      	str	r0, [sp, #4]
 800a156:	2800      	cmp	r0, #0
 800a158:	d101      	bne.n	800a15e <_realloc_r+0x46>
 800a15a:	9c01      	ldr	r4, [sp, #4]
 800a15c:	e7e6      	b.n	800a12c <_realloc_r+0x14>
 800a15e:	002a      	movs	r2, r5
 800a160:	42bd      	cmp	r5, r7
 800a162:	d900      	bls.n	800a166 <_realloc_r+0x4e>
 800a164:	003a      	movs	r2, r7
 800a166:	0021      	movs	r1, r4
 800a168:	9801      	ldr	r0, [sp, #4]
 800a16a:	f7fe f95e 	bl	800842a <memcpy>
 800a16e:	0021      	movs	r1, r4
 800a170:	0030      	movs	r0, r6
 800a172:	f000 f9dd 	bl	800a530 <_free_r>
 800a176:	e7f0      	b.n	800a15a <_realloc_r+0x42>

0800a178 <__swbuf_r>:
 800a178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17a:	0006      	movs	r6, r0
 800a17c:	000d      	movs	r5, r1
 800a17e:	0014      	movs	r4, r2
 800a180:	2800      	cmp	r0, #0
 800a182:	d004      	beq.n	800a18e <__swbuf_r+0x16>
 800a184:	6a03      	ldr	r3, [r0, #32]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d101      	bne.n	800a18e <__swbuf_r+0x16>
 800a18a:	f7fe f853 	bl	8008234 <__sinit>
 800a18e:	69a3      	ldr	r3, [r4, #24]
 800a190:	60a3      	str	r3, [r4, #8]
 800a192:	89a3      	ldrh	r3, [r4, #12]
 800a194:	071b      	lsls	r3, r3, #28
 800a196:	d502      	bpl.n	800a19e <__swbuf_r+0x26>
 800a198:	6923      	ldr	r3, [r4, #16]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d109      	bne.n	800a1b2 <__swbuf_r+0x3a>
 800a19e:	0021      	movs	r1, r4
 800a1a0:	0030      	movs	r0, r6
 800a1a2:	f000 f82b 	bl	800a1fc <__swsetup_r>
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	d003      	beq.n	800a1b2 <__swbuf_r+0x3a>
 800a1aa:	2501      	movs	r5, #1
 800a1ac:	426d      	negs	r5, r5
 800a1ae:	0028      	movs	r0, r5
 800a1b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1b2:	6923      	ldr	r3, [r4, #16]
 800a1b4:	6820      	ldr	r0, [r4, #0]
 800a1b6:	b2ef      	uxtb	r7, r5
 800a1b8:	1ac0      	subs	r0, r0, r3
 800a1ba:	6963      	ldr	r3, [r4, #20]
 800a1bc:	b2ed      	uxtb	r5, r5
 800a1be:	4283      	cmp	r3, r0
 800a1c0:	dc05      	bgt.n	800a1ce <__swbuf_r+0x56>
 800a1c2:	0021      	movs	r1, r4
 800a1c4:	0030      	movs	r0, r6
 800a1c6:	f7ff fb83 	bl	80098d0 <_fflush_r>
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	d1ed      	bne.n	800a1aa <__swbuf_r+0x32>
 800a1ce:	68a3      	ldr	r3, [r4, #8]
 800a1d0:	3001      	adds	r0, #1
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	60a3      	str	r3, [r4, #8]
 800a1d6:	6823      	ldr	r3, [r4, #0]
 800a1d8:	1c5a      	adds	r2, r3, #1
 800a1da:	6022      	str	r2, [r4, #0]
 800a1dc:	701f      	strb	r7, [r3, #0]
 800a1de:	6963      	ldr	r3, [r4, #20]
 800a1e0:	4283      	cmp	r3, r0
 800a1e2:	d004      	beq.n	800a1ee <__swbuf_r+0x76>
 800a1e4:	89a3      	ldrh	r3, [r4, #12]
 800a1e6:	07db      	lsls	r3, r3, #31
 800a1e8:	d5e1      	bpl.n	800a1ae <__swbuf_r+0x36>
 800a1ea:	2d0a      	cmp	r5, #10
 800a1ec:	d1df      	bne.n	800a1ae <__swbuf_r+0x36>
 800a1ee:	0021      	movs	r1, r4
 800a1f0:	0030      	movs	r0, r6
 800a1f2:	f7ff fb6d 	bl	80098d0 <_fflush_r>
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	d0d9      	beq.n	800a1ae <__swbuf_r+0x36>
 800a1fa:	e7d6      	b.n	800a1aa <__swbuf_r+0x32>

0800a1fc <__swsetup_r>:
 800a1fc:	4b2d      	ldr	r3, [pc, #180]	@ (800a2b4 <__swsetup_r+0xb8>)
 800a1fe:	b570      	push	{r4, r5, r6, lr}
 800a200:	0005      	movs	r5, r0
 800a202:	6818      	ldr	r0, [r3, #0]
 800a204:	000c      	movs	r4, r1
 800a206:	2800      	cmp	r0, #0
 800a208:	d004      	beq.n	800a214 <__swsetup_r+0x18>
 800a20a:	6a03      	ldr	r3, [r0, #32]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d101      	bne.n	800a214 <__swsetup_r+0x18>
 800a210:	f7fe f810 	bl	8008234 <__sinit>
 800a214:	220c      	movs	r2, #12
 800a216:	5ea3      	ldrsh	r3, [r4, r2]
 800a218:	071a      	lsls	r2, r3, #28
 800a21a:	d423      	bmi.n	800a264 <__swsetup_r+0x68>
 800a21c:	06da      	lsls	r2, r3, #27
 800a21e:	d407      	bmi.n	800a230 <__swsetup_r+0x34>
 800a220:	2209      	movs	r2, #9
 800a222:	602a      	str	r2, [r5, #0]
 800a224:	2240      	movs	r2, #64	@ 0x40
 800a226:	2001      	movs	r0, #1
 800a228:	4313      	orrs	r3, r2
 800a22a:	81a3      	strh	r3, [r4, #12]
 800a22c:	4240      	negs	r0, r0
 800a22e:	e03a      	b.n	800a2a6 <__swsetup_r+0xaa>
 800a230:	075b      	lsls	r3, r3, #29
 800a232:	d513      	bpl.n	800a25c <__swsetup_r+0x60>
 800a234:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a236:	2900      	cmp	r1, #0
 800a238:	d008      	beq.n	800a24c <__swsetup_r+0x50>
 800a23a:	0023      	movs	r3, r4
 800a23c:	3344      	adds	r3, #68	@ 0x44
 800a23e:	4299      	cmp	r1, r3
 800a240:	d002      	beq.n	800a248 <__swsetup_r+0x4c>
 800a242:	0028      	movs	r0, r5
 800a244:	f000 f974 	bl	800a530 <_free_r>
 800a248:	2300      	movs	r3, #0
 800a24a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a24c:	2224      	movs	r2, #36	@ 0x24
 800a24e:	89a3      	ldrh	r3, [r4, #12]
 800a250:	4393      	bics	r3, r2
 800a252:	81a3      	strh	r3, [r4, #12]
 800a254:	2300      	movs	r3, #0
 800a256:	6063      	str	r3, [r4, #4]
 800a258:	6923      	ldr	r3, [r4, #16]
 800a25a:	6023      	str	r3, [r4, #0]
 800a25c:	2308      	movs	r3, #8
 800a25e:	89a2      	ldrh	r2, [r4, #12]
 800a260:	4313      	orrs	r3, r2
 800a262:	81a3      	strh	r3, [r4, #12]
 800a264:	6923      	ldr	r3, [r4, #16]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10b      	bne.n	800a282 <__swsetup_r+0x86>
 800a26a:	21a0      	movs	r1, #160	@ 0xa0
 800a26c:	2280      	movs	r2, #128	@ 0x80
 800a26e:	89a3      	ldrh	r3, [r4, #12]
 800a270:	0089      	lsls	r1, r1, #2
 800a272:	0092      	lsls	r2, r2, #2
 800a274:	400b      	ands	r3, r1
 800a276:	4293      	cmp	r3, r2
 800a278:	d003      	beq.n	800a282 <__swsetup_r+0x86>
 800a27a:	0021      	movs	r1, r4
 800a27c:	0028      	movs	r0, r5
 800a27e:	f000 f845 	bl	800a30c <__smakebuf_r>
 800a282:	220c      	movs	r2, #12
 800a284:	5ea3      	ldrsh	r3, [r4, r2]
 800a286:	2101      	movs	r1, #1
 800a288:	001a      	movs	r2, r3
 800a28a:	400a      	ands	r2, r1
 800a28c:	420b      	tst	r3, r1
 800a28e:	d00b      	beq.n	800a2a8 <__swsetup_r+0xac>
 800a290:	2200      	movs	r2, #0
 800a292:	60a2      	str	r2, [r4, #8]
 800a294:	6962      	ldr	r2, [r4, #20]
 800a296:	4252      	negs	r2, r2
 800a298:	61a2      	str	r2, [r4, #24]
 800a29a:	2000      	movs	r0, #0
 800a29c:	6922      	ldr	r2, [r4, #16]
 800a29e:	4282      	cmp	r2, r0
 800a2a0:	d101      	bne.n	800a2a6 <__swsetup_r+0xaa>
 800a2a2:	061a      	lsls	r2, r3, #24
 800a2a4:	d4be      	bmi.n	800a224 <__swsetup_r+0x28>
 800a2a6:	bd70      	pop	{r4, r5, r6, pc}
 800a2a8:	0799      	lsls	r1, r3, #30
 800a2aa:	d400      	bmi.n	800a2ae <__swsetup_r+0xb2>
 800a2ac:	6962      	ldr	r2, [r4, #20]
 800a2ae:	60a2      	str	r2, [r4, #8]
 800a2b0:	e7f3      	b.n	800a29a <__swsetup_r+0x9e>
 800a2b2:	46c0      	nop			@ (mov r8, r8)
 800a2b4:	20000018 	.word	0x20000018

0800a2b8 <__swhatbuf_r>:
 800a2b8:	b570      	push	{r4, r5, r6, lr}
 800a2ba:	000e      	movs	r6, r1
 800a2bc:	001d      	movs	r5, r3
 800a2be:	230e      	movs	r3, #14
 800a2c0:	5ec9      	ldrsh	r1, [r1, r3]
 800a2c2:	0014      	movs	r4, r2
 800a2c4:	b096      	sub	sp, #88	@ 0x58
 800a2c6:	2900      	cmp	r1, #0
 800a2c8:	da0c      	bge.n	800a2e4 <__swhatbuf_r+0x2c>
 800a2ca:	89b2      	ldrh	r2, [r6, #12]
 800a2cc:	2380      	movs	r3, #128	@ 0x80
 800a2ce:	0011      	movs	r1, r2
 800a2d0:	4019      	ands	r1, r3
 800a2d2:	421a      	tst	r2, r3
 800a2d4:	d114      	bne.n	800a300 <__swhatbuf_r+0x48>
 800a2d6:	2380      	movs	r3, #128	@ 0x80
 800a2d8:	00db      	lsls	r3, r3, #3
 800a2da:	2000      	movs	r0, #0
 800a2dc:	6029      	str	r1, [r5, #0]
 800a2de:	6023      	str	r3, [r4, #0]
 800a2e0:	b016      	add	sp, #88	@ 0x58
 800a2e2:	bd70      	pop	{r4, r5, r6, pc}
 800a2e4:	466a      	mov	r2, sp
 800a2e6:	f000 f8c5 	bl	800a474 <_fstat_r>
 800a2ea:	2800      	cmp	r0, #0
 800a2ec:	dbed      	blt.n	800a2ca <__swhatbuf_r+0x12>
 800a2ee:	23f0      	movs	r3, #240	@ 0xf0
 800a2f0:	9901      	ldr	r1, [sp, #4]
 800a2f2:	021b      	lsls	r3, r3, #8
 800a2f4:	4019      	ands	r1, r3
 800a2f6:	4b04      	ldr	r3, [pc, #16]	@ (800a308 <__swhatbuf_r+0x50>)
 800a2f8:	18c9      	adds	r1, r1, r3
 800a2fa:	424b      	negs	r3, r1
 800a2fc:	4159      	adcs	r1, r3
 800a2fe:	e7ea      	b.n	800a2d6 <__swhatbuf_r+0x1e>
 800a300:	2100      	movs	r1, #0
 800a302:	2340      	movs	r3, #64	@ 0x40
 800a304:	e7e9      	b.n	800a2da <__swhatbuf_r+0x22>
 800a306:	46c0      	nop			@ (mov r8, r8)
 800a308:	ffffe000 	.word	0xffffe000

0800a30c <__smakebuf_r>:
 800a30c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a30e:	2602      	movs	r6, #2
 800a310:	898b      	ldrh	r3, [r1, #12]
 800a312:	0005      	movs	r5, r0
 800a314:	000c      	movs	r4, r1
 800a316:	b085      	sub	sp, #20
 800a318:	4233      	tst	r3, r6
 800a31a:	d007      	beq.n	800a32c <__smakebuf_r+0x20>
 800a31c:	0023      	movs	r3, r4
 800a31e:	3347      	adds	r3, #71	@ 0x47
 800a320:	6023      	str	r3, [r4, #0]
 800a322:	6123      	str	r3, [r4, #16]
 800a324:	2301      	movs	r3, #1
 800a326:	6163      	str	r3, [r4, #20]
 800a328:	b005      	add	sp, #20
 800a32a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a32c:	ab03      	add	r3, sp, #12
 800a32e:	aa02      	add	r2, sp, #8
 800a330:	f7ff ffc2 	bl	800a2b8 <__swhatbuf_r>
 800a334:	9f02      	ldr	r7, [sp, #8]
 800a336:	9001      	str	r0, [sp, #4]
 800a338:	0039      	movs	r1, r7
 800a33a:	0028      	movs	r0, r5
 800a33c:	f7ff f9c2 	bl	80096c4 <_malloc_r>
 800a340:	2800      	cmp	r0, #0
 800a342:	d108      	bne.n	800a356 <__smakebuf_r+0x4a>
 800a344:	220c      	movs	r2, #12
 800a346:	5ea3      	ldrsh	r3, [r4, r2]
 800a348:	059a      	lsls	r2, r3, #22
 800a34a:	d4ed      	bmi.n	800a328 <__smakebuf_r+0x1c>
 800a34c:	2203      	movs	r2, #3
 800a34e:	4393      	bics	r3, r2
 800a350:	431e      	orrs	r6, r3
 800a352:	81a6      	strh	r6, [r4, #12]
 800a354:	e7e2      	b.n	800a31c <__smakebuf_r+0x10>
 800a356:	2380      	movs	r3, #128	@ 0x80
 800a358:	89a2      	ldrh	r2, [r4, #12]
 800a35a:	6020      	str	r0, [r4, #0]
 800a35c:	4313      	orrs	r3, r2
 800a35e:	81a3      	strh	r3, [r4, #12]
 800a360:	9b03      	ldr	r3, [sp, #12]
 800a362:	6120      	str	r0, [r4, #16]
 800a364:	6167      	str	r7, [r4, #20]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00c      	beq.n	800a384 <__smakebuf_r+0x78>
 800a36a:	0028      	movs	r0, r5
 800a36c:	230e      	movs	r3, #14
 800a36e:	5ee1      	ldrsh	r1, [r4, r3]
 800a370:	f000 f80e 	bl	800a390 <_isatty_r>
 800a374:	2800      	cmp	r0, #0
 800a376:	d005      	beq.n	800a384 <__smakebuf_r+0x78>
 800a378:	2303      	movs	r3, #3
 800a37a:	89a2      	ldrh	r2, [r4, #12]
 800a37c:	439a      	bics	r2, r3
 800a37e:	3b02      	subs	r3, #2
 800a380:	4313      	orrs	r3, r2
 800a382:	81a3      	strh	r3, [r4, #12]
 800a384:	89a3      	ldrh	r3, [r4, #12]
 800a386:	9a01      	ldr	r2, [sp, #4]
 800a388:	4313      	orrs	r3, r2
 800a38a:	81a3      	strh	r3, [r4, #12]
 800a38c:	e7cc      	b.n	800a328 <__smakebuf_r+0x1c>
	...

0800a390 <_isatty_r>:
 800a390:	2300      	movs	r3, #0
 800a392:	b570      	push	{r4, r5, r6, lr}
 800a394:	4d06      	ldr	r5, [pc, #24]	@ (800a3b0 <_isatty_r+0x20>)
 800a396:	0004      	movs	r4, r0
 800a398:	0008      	movs	r0, r1
 800a39a:	602b      	str	r3, [r5, #0]
 800a39c:	f7fa fad7 	bl	800494e <_isatty>
 800a3a0:	1c43      	adds	r3, r0, #1
 800a3a2:	d103      	bne.n	800a3ac <_isatty_r+0x1c>
 800a3a4:	682b      	ldr	r3, [r5, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d000      	beq.n	800a3ac <_isatty_r+0x1c>
 800a3aa:	6023      	str	r3, [r4, #0]
 800a3ac:	bd70      	pop	{r4, r5, r6, pc}
 800a3ae:	46c0      	nop			@ (mov r8, r8)
 800a3b0:	20000884 	.word	0x20000884

0800a3b4 <_lseek_r>:
 800a3b4:	b570      	push	{r4, r5, r6, lr}
 800a3b6:	0004      	movs	r4, r0
 800a3b8:	0008      	movs	r0, r1
 800a3ba:	0011      	movs	r1, r2
 800a3bc:	001a      	movs	r2, r3
 800a3be:	2300      	movs	r3, #0
 800a3c0:	4d05      	ldr	r5, [pc, #20]	@ (800a3d8 <_lseek_r+0x24>)
 800a3c2:	602b      	str	r3, [r5, #0]
 800a3c4:	f7fa facc 	bl	8004960 <_lseek>
 800a3c8:	1c43      	adds	r3, r0, #1
 800a3ca:	d103      	bne.n	800a3d4 <_lseek_r+0x20>
 800a3cc:	682b      	ldr	r3, [r5, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d000      	beq.n	800a3d4 <_lseek_r+0x20>
 800a3d2:	6023      	str	r3, [r4, #0]
 800a3d4:	bd70      	pop	{r4, r5, r6, pc}
 800a3d6:	46c0      	nop			@ (mov r8, r8)
 800a3d8:	20000884 	.word	0x20000884

0800a3dc <_read_r>:
 800a3dc:	b570      	push	{r4, r5, r6, lr}
 800a3de:	0004      	movs	r4, r0
 800a3e0:	0008      	movs	r0, r1
 800a3e2:	0011      	movs	r1, r2
 800a3e4:	001a      	movs	r2, r3
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	4d05      	ldr	r5, [pc, #20]	@ (800a400 <_read_r+0x24>)
 800a3ea:	602b      	str	r3, [r5, #0]
 800a3ec:	f7fa fa5e 	bl	80048ac <_read>
 800a3f0:	1c43      	adds	r3, r0, #1
 800a3f2:	d103      	bne.n	800a3fc <_read_r+0x20>
 800a3f4:	682b      	ldr	r3, [r5, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d000      	beq.n	800a3fc <_read_r+0x20>
 800a3fa:	6023      	str	r3, [r4, #0]
 800a3fc:	bd70      	pop	{r4, r5, r6, pc}
 800a3fe:	46c0      	nop			@ (mov r8, r8)
 800a400:	20000884 	.word	0x20000884

0800a404 <_sbrk_r>:
 800a404:	2300      	movs	r3, #0
 800a406:	b570      	push	{r4, r5, r6, lr}
 800a408:	4d06      	ldr	r5, [pc, #24]	@ (800a424 <_sbrk_r+0x20>)
 800a40a:	0004      	movs	r4, r0
 800a40c:	0008      	movs	r0, r1
 800a40e:	602b      	str	r3, [r5, #0]
 800a410:	f7fa fab2 	bl	8004978 <_sbrk>
 800a414:	1c43      	adds	r3, r0, #1
 800a416:	d103      	bne.n	800a420 <_sbrk_r+0x1c>
 800a418:	682b      	ldr	r3, [r5, #0]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d000      	beq.n	800a420 <_sbrk_r+0x1c>
 800a41e:	6023      	str	r3, [r4, #0]
 800a420:	bd70      	pop	{r4, r5, r6, pc}
 800a422:	46c0      	nop			@ (mov r8, r8)
 800a424:	20000884 	.word	0x20000884

0800a428 <_write_r>:
 800a428:	b570      	push	{r4, r5, r6, lr}
 800a42a:	0004      	movs	r4, r0
 800a42c:	0008      	movs	r0, r1
 800a42e:	0011      	movs	r1, r2
 800a430:	001a      	movs	r2, r3
 800a432:	2300      	movs	r3, #0
 800a434:	4d05      	ldr	r5, [pc, #20]	@ (800a44c <_write_r+0x24>)
 800a436:	602b      	str	r3, [r5, #0]
 800a438:	f7fa fa55 	bl	80048e6 <_write>
 800a43c:	1c43      	adds	r3, r0, #1
 800a43e:	d103      	bne.n	800a448 <_write_r+0x20>
 800a440:	682b      	ldr	r3, [r5, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d000      	beq.n	800a448 <_write_r+0x20>
 800a446:	6023      	str	r3, [r4, #0]
 800a448:	bd70      	pop	{r4, r5, r6, pc}
 800a44a:	46c0      	nop			@ (mov r8, r8)
 800a44c:	20000884 	.word	0x20000884

0800a450 <_close_r>:
 800a450:	2300      	movs	r3, #0
 800a452:	b570      	push	{r4, r5, r6, lr}
 800a454:	4d06      	ldr	r5, [pc, #24]	@ (800a470 <_close_r+0x20>)
 800a456:	0004      	movs	r4, r0
 800a458:	0008      	movs	r0, r1
 800a45a:	602b      	str	r3, [r5, #0]
 800a45c:	f7fa fa5f 	bl	800491e <_close>
 800a460:	1c43      	adds	r3, r0, #1
 800a462:	d103      	bne.n	800a46c <_close_r+0x1c>
 800a464:	682b      	ldr	r3, [r5, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d000      	beq.n	800a46c <_close_r+0x1c>
 800a46a:	6023      	str	r3, [r4, #0]
 800a46c:	bd70      	pop	{r4, r5, r6, pc}
 800a46e:	46c0      	nop			@ (mov r8, r8)
 800a470:	20000884 	.word	0x20000884

0800a474 <_fstat_r>:
 800a474:	2300      	movs	r3, #0
 800a476:	b570      	push	{r4, r5, r6, lr}
 800a478:	4d06      	ldr	r5, [pc, #24]	@ (800a494 <_fstat_r+0x20>)
 800a47a:	0004      	movs	r4, r0
 800a47c:	0008      	movs	r0, r1
 800a47e:	0011      	movs	r1, r2
 800a480:	602b      	str	r3, [r5, #0]
 800a482:	f7fa fa56 	bl	8004932 <_fstat>
 800a486:	1c43      	adds	r3, r0, #1
 800a488:	d103      	bne.n	800a492 <_fstat_r+0x1e>
 800a48a:	682b      	ldr	r3, [r5, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d000      	beq.n	800a492 <_fstat_r+0x1e>
 800a490:	6023      	str	r3, [r4, #0]
 800a492:	bd70      	pop	{r4, r5, r6, pc}
 800a494:	20000884 	.word	0x20000884

0800a498 <__assert_func>:
 800a498:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a49a:	0014      	movs	r4, r2
 800a49c:	001a      	movs	r2, r3
 800a49e:	4b09      	ldr	r3, [pc, #36]	@ (800a4c4 <__assert_func+0x2c>)
 800a4a0:	0005      	movs	r5, r0
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	000e      	movs	r6, r1
 800a4a6:	68d8      	ldr	r0, [r3, #12]
 800a4a8:	4b07      	ldr	r3, [pc, #28]	@ (800a4c8 <__assert_func+0x30>)
 800a4aa:	2c00      	cmp	r4, #0
 800a4ac:	d101      	bne.n	800a4b2 <__assert_func+0x1a>
 800a4ae:	4b07      	ldr	r3, [pc, #28]	@ (800a4cc <__assert_func+0x34>)
 800a4b0:	001c      	movs	r4, r3
 800a4b2:	4907      	ldr	r1, [pc, #28]	@ (800a4d0 <__assert_func+0x38>)
 800a4b4:	9301      	str	r3, [sp, #4]
 800a4b6:	9402      	str	r4, [sp, #8]
 800a4b8:	002b      	movs	r3, r5
 800a4ba:	9600      	str	r6, [sp, #0]
 800a4bc:	f000 f89c 	bl	800a5f8 <fiprintf>
 800a4c0:	f000 f8b7 	bl	800a632 <abort>
 800a4c4:	20000018 	.word	0x20000018
 800a4c8:	0800b23d 	.word	0x0800b23d
 800a4cc:	0800b278 	.word	0x0800b278
 800a4d0:	0800b24a 	.word	0x0800b24a

0800a4d4 <_calloc_r>:
 800a4d4:	b570      	push	{r4, r5, r6, lr}
 800a4d6:	0c0b      	lsrs	r3, r1, #16
 800a4d8:	0c15      	lsrs	r5, r2, #16
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d11e      	bne.n	800a51c <_calloc_r+0x48>
 800a4de:	2d00      	cmp	r5, #0
 800a4e0:	d10c      	bne.n	800a4fc <_calloc_r+0x28>
 800a4e2:	b289      	uxth	r1, r1
 800a4e4:	b294      	uxth	r4, r2
 800a4e6:	434c      	muls	r4, r1
 800a4e8:	0021      	movs	r1, r4
 800a4ea:	f7ff f8eb 	bl	80096c4 <_malloc_r>
 800a4ee:	1e05      	subs	r5, r0, #0
 800a4f0:	d01b      	beq.n	800a52a <_calloc_r+0x56>
 800a4f2:	0022      	movs	r2, r4
 800a4f4:	2100      	movs	r1, #0
 800a4f6:	f7fd ff53 	bl	80083a0 <memset>
 800a4fa:	e016      	b.n	800a52a <_calloc_r+0x56>
 800a4fc:	1c2b      	adds	r3, r5, #0
 800a4fe:	1c0c      	adds	r4, r1, #0
 800a500:	b289      	uxth	r1, r1
 800a502:	b292      	uxth	r2, r2
 800a504:	434a      	muls	r2, r1
 800a506:	b29b      	uxth	r3, r3
 800a508:	b2a1      	uxth	r1, r4
 800a50a:	4359      	muls	r1, r3
 800a50c:	0c14      	lsrs	r4, r2, #16
 800a50e:	190c      	adds	r4, r1, r4
 800a510:	0c23      	lsrs	r3, r4, #16
 800a512:	d107      	bne.n	800a524 <_calloc_r+0x50>
 800a514:	0424      	lsls	r4, r4, #16
 800a516:	b292      	uxth	r2, r2
 800a518:	4314      	orrs	r4, r2
 800a51a:	e7e5      	b.n	800a4e8 <_calloc_r+0x14>
 800a51c:	2d00      	cmp	r5, #0
 800a51e:	d101      	bne.n	800a524 <_calloc_r+0x50>
 800a520:	1c14      	adds	r4, r2, #0
 800a522:	e7ed      	b.n	800a500 <_calloc_r+0x2c>
 800a524:	230c      	movs	r3, #12
 800a526:	2500      	movs	r5, #0
 800a528:	6003      	str	r3, [r0, #0]
 800a52a:	0028      	movs	r0, r5
 800a52c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a530 <_free_r>:
 800a530:	b570      	push	{r4, r5, r6, lr}
 800a532:	0005      	movs	r5, r0
 800a534:	1e0c      	subs	r4, r1, #0
 800a536:	d010      	beq.n	800a55a <_free_r+0x2a>
 800a538:	3c04      	subs	r4, #4
 800a53a:	6823      	ldr	r3, [r4, #0]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	da00      	bge.n	800a542 <_free_r+0x12>
 800a540:	18e4      	adds	r4, r4, r3
 800a542:	0028      	movs	r0, r5
 800a544:	f7ff f9f0 	bl	8009928 <__malloc_lock>
 800a548:	4a1d      	ldr	r2, [pc, #116]	@ (800a5c0 <_free_r+0x90>)
 800a54a:	6813      	ldr	r3, [r2, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d105      	bne.n	800a55c <_free_r+0x2c>
 800a550:	6063      	str	r3, [r4, #4]
 800a552:	6014      	str	r4, [r2, #0]
 800a554:	0028      	movs	r0, r5
 800a556:	f7ff f9ef 	bl	8009938 <__malloc_unlock>
 800a55a:	bd70      	pop	{r4, r5, r6, pc}
 800a55c:	42a3      	cmp	r3, r4
 800a55e:	d908      	bls.n	800a572 <_free_r+0x42>
 800a560:	6820      	ldr	r0, [r4, #0]
 800a562:	1821      	adds	r1, r4, r0
 800a564:	428b      	cmp	r3, r1
 800a566:	d1f3      	bne.n	800a550 <_free_r+0x20>
 800a568:	6819      	ldr	r1, [r3, #0]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	1809      	adds	r1, r1, r0
 800a56e:	6021      	str	r1, [r4, #0]
 800a570:	e7ee      	b.n	800a550 <_free_r+0x20>
 800a572:	001a      	movs	r2, r3
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d001      	beq.n	800a57e <_free_r+0x4e>
 800a57a:	42a3      	cmp	r3, r4
 800a57c:	d9f9      	bls.n	800a572 <_free_r+0x42>
 800a57e:	6811      	ldr	r1, [r2, #0]
 800a580:	1850      	adds	r0, r2, r1
 800a582:	42a0      	cmp	r0, r4
 800a584:	d10b      	bne.n	800a59e <_free_r+0x6e>
 800a586:	6820      	ldr	r0, [r4, #0]
 800a588:	1809      	adds	r1, r1, r0
 800a58a:	1850      	adds	r0, r2, r1
 800a58c:	6011      	str	r1, [r2, #0]
 800a58e:	4283      	cmp	r3, r0
 800a590:	d1e0      	bne.n	800a554 <_free_r+0x24>
 800a592:	6818      	ldr	r0, [r3, #0]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	1841      	adds	r1, r0, r1
 800a598:	6011      	str	r1, [r2, #0]
 800a59a:	6053      	str	r3, [r2, #4]
 800a59c:	e7da      	b.n	800a554 <_free_r+0x24>
 800a59e:	42a0      	cmp	r0, r4
 800a5a0:	d902      	bls.n	800a5a8 <_free_r+0x78>
 800a5a2:	230c      	movs	r3, #12
 800a5a4:	602b      	str	r3, [r5, #0]
 800a5a6:	e7d5      	b.n	800a554 <_free_r+0x24>
 800a5a8:	6820      	ldr	r0, [r4, #0]
 800a5aa:	1821      	adds	r1, r4, r0
 800a5ac:	428b      	cmp	r3, r1
 800a5ae:	d103      	bne.n	800a5b8 <_free_r+0x88>
 800a5b0:	6819      	ldr	r1, [r3, #0]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	1809      	adds	r1, r1, r0
 800a5b6:	6021      	str	r1, [r4, #0]
 800a5b8:	6063      	str	r3, [r4, #4]
 800a5ba:	6054      	str	r4, [r2, #4]
 800a5bc:	e7ca      	b.n	800a554 <_free_r+0x24>
 800a5be:	46c0      	nop			@ (mov r8, r8)
 800a5c0:	20000880 	.word	0x20000880

0800a5c4 <__ascii_mbtowc>:
 800a5c4:	b082      	sub	sp, #8
 800a5c6:	2900      	cmp	r1, #0
 800a5c8:	d100      	bne.n	800a5cc <__ascii_mbtowc+0x8>
 800a5ca:	a901      	add	r1, sp, #4
 800a5cc:	1e10      	subs	r0, r2, #0
 800a5ce:	d006      	beq.n	800a5de <__ascii_mbtowc+0x1a>
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d006      	beq.n	800a5e2 <__ascii_mbtowc+0x1e>
 800a5d4:	7813      	ldrb	r3, [r2, #0]
 800a5d6:	600b      	str	r3, [r1, #0]
 800a5d8:	7810      	ldrb	r0, [r2, #0]
 800a5da:	1e43      	subs	r3, r0, #1
 800a5dc:	4198      	sbcs	r0, r3
 800a5de:	b002      	add	sp, #8
 800a5e0:	4770      	bx	lr
 800a5e2:	2002      	movs	r0, #2
 800a5e4:	4240      	negs	r0, r0
 800a5e6:	e7fa      	b.n	800a5de <__ascii_mbtowc+0x1a>

0800a5e8 <_malloc_usable_size_r>:
 800a5e8:	1f0b      	subs	r3, r1, #4
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	1f18      	subs	r0, r3, #4
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	da01      	bge.n	800a5f6 <_malloc_usable_size_r+0xe>
 800a5f2:	580b      	ldr	r3, [r1, r0]
 800a5f4:	18c0      	adds	r0, r0, r3
 800a5f6:	4770      	bx	lr

0800a5f8 <fiprintf>:
 800a5f8:	b40e      	push	{r1, r2, r3}
 800a5fa:	b517      	push	{r0, r1, r2, r4, lr}
 800a5fc:	4c05      	ldr	r4, [pc, #20]	@ (800a614 <fiprintf+0x1c>)
 800a5fe:	ab05      	add	r3, sp, #20
 800a600:	cb04      	ldmia	r3!, {r2}
 800a602:	0001      	movs	r1, r0
 800a604:	6820      	ldr	r0, [r4, #0]
 800a606:	9301      	str	r3, [sp, #4]
 800a608:	f7fe ff14 	bl	8009434 <_vfiprintf_r>
 800a60c:	bc1e      	pop	{r1, r2, r3, r4}
 800a60e:	bc08      	pop	{r3}
 800a610:	b003      	add	sp, #12
 800a612:	4718      	bx	r3
 800a614:	20000018 	.word	0x20000018

0800a618 <__ascii_wctomb>:
 800a618:	0003      	movs	r3, r0
 800a61a:	1e08      	subs	r0, r1, #0
 800a61c:	d005      	beq.n	800a62a <__ascii_wctomb+0x12>
 800a61e:	2aff      	cmp	r2, #255	@ 0xff
 800a620:	d904      	bls.n	800a62c <__ascii_wctomb+0x14>
 800a622:	228a      	movs	r2, #138	@ 0x8a
 800a624:	2001      	movs	r0, #1
 800a626:	601a      	str	r2, [r3, #0]
 800a628:	4240      	negs	r0, r0
 800a62a:	4770      	bx	lr
 800a62c:	2001      	movs	r0, #1
 800a62e:	700a      	strb	r2, [r1, #0]
 800a630:	e7fb      	b.n	800a62a <__ascii_wctomb+0x12>

0800a632 <abort>:
 800a632:	2006      	movs	r0, #6
 800a634:	b510      	push	{r4, lr}
 800a636:	f000 f82d 	bl	800a694 <raise>
 800a63a:	2001      	movs	r0, #1
 800a63c:	f7fa f929 	bl	8004892 <_exit>

0800a640 <_raise_r>:
 800a640:	b570      	push	{r4, r5, r6, lr}
 800a642:	0004      	movs	r4, r0
 800a644:	000d      	movs	r5, r1
 800a646:	291f      	cmp	r1, #31
 800a648:	d904      	bls.n	800a654 <_raise_r+0x14>
 800a64a:	2316      	movs	r3, #22
 800a64c:	6003      	str	r3, [r0, #0]
 800a64e:	2001      	movs	r0, #1
 800a650:	4240      	negs	r0, r0
 800a652:	bd70      	pop	{r4, r5, r6, pc}
 800a654:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800a656:	2b00      	cmp	r3, #0
 800a658:	d004      	beq.n	800a664 <_raise_r+0x24>
 800a65a:	008a      	lsls	r2, r1, #2
 800a65c:	189b      	adds	r3, r3, r2
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	2a00      	cmp	r2, #0
 800a662:	d108      	bne.n	800a676 <_raise_r+0x36>
 800a664:	0020      	movs	r0, r4
 800a666:	f000 f831 	bl	800a6cc <_getpid_r>
 800a66a:	002a      	movs	r2, r5
 800a66c:	0001      	movs	r1, r0
 800a66e:	0020      	movs	r0, r4
 800a670:	f000 f81a 	bl	800a6a8 <_kill_r>
 800a674:	e7ed      	b.n	800a652 <_raise_r+0x12>
 800a676:	2a01      	cmp	r2, #1
 800a678:	d009      	beq.n	800a68e <_raise_r+0x4e>
 800a67a:	1c51      	adds	r1, r2, #1
 800a67c:	d103      	bne.n	800a686 <_raise_r+0x46>
 800a67e:	2316      	movs	r3, #22
 800a680:	6003      	str	r3, [r0, #0]
 800a682:	2001      	movs	r0, #1
 800a684:	e7e5      	b.n	800a652 <_raise_r+0x12>
 800a686:	2100      	movs	r1, #0
 800a688:	0028      	movs	r0, r5
 800a68a:	6019      	str	r1, [r3, #0]
 800a68c:	4790      	blx	r2
 800a68e:	2000      	movs	r0, #0
 800a690:	e7df      	b.n	800a652 <_raise_r+0x12>
	...

0800a694 <raise>:
 800a694:	b510      	push	{r4, lr}
 800a696:	4b03      	ldr	r3, [pc, #12]	@ (800a6a4 <raise+0x10>)
 800a698:	0001      	movs	r1, r0
 800a69a:	6818      	ldr	r0, [r3, #0]
 800a69c:	f7ff ffd0 	bl	800a640 <_raise_r>
 800a6a0:	bd10      	pop	{r4, pc}
 800a6a2:	46c0      	nop			@ (mov r8, r8)
 800a6a4:	20000018 	.word	0x20000018

0800a6a8 <_kill_r>:
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	b570      	push	{r4, r5, r6, lr}
 800a6ac:	4d06      	ldr	r5, [pc, #24]	@ (800a6c8 <_kill_r+0x20>)
 800a6ae:	0004      	movs	r4, r0
 800a6b0:	0008      	movs	r0, r1
 800a6b2:	0011      	movs	r1, r2
 800a6b4:	602b      	str	r3, [r5, #0]
 800a6b6:	f7fa f8dc 	bl	8004872 <_kill>
 800a6ba:	1c43      	adds	r3, r0, #1
 800a6bc:	d103      	bne.n	800a6c6 <_kill_r+0x1e>
 800a6be:	682b      	ldr	r3, [r5, #0]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d000      	beq.n	800a6c6 <_kill_r+0x1e>
 800a6c4:	6023      	str	r3, [r4, #0]
 800a6c6:	bd70      	pop	{r4, r5, r6, pc}
 800a6c8:	20000884 	.word	0x20000884

0800a6cc <_getpid_r>:
 800a6cc:	b510      	push	{r4, lr}
 800a6ce:	f7fa f8ca 	bl	8004866 <_getpid>
 800a6d2:	bd10      	pop	{r4, pc}

0800a6d4 <_init>:
 800a6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6d6:	46c0      	nop			@ (mov r8, r8)
 800a6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6da:	bc08      	pop	{r3}
 800a6dc:	469e      	mov	lr, r3
 800a6de:	4770      	bx	lr

0800a6e0 <_fini>:
 800a6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6e2:	46c0      	nop			@ (mov r8, r8)
 800a6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6e6:	bc08      	pop	{r3}
 800a6e8:	469e      	mov	lr, r3
 800a6ea:	4770      	bx	lr
